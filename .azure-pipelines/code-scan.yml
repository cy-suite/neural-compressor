trigger: none
pr: 
  - master

pool: ICX-16C

variables:
  IMAGE_NAME: "code-scan"
  IMAGE_TAG: "1.3"
  CODE_SCAN_PATH: ".azure-pipelines/scripts/codeScan"
  CODE_SCAN_LOG_PATH: ".azure-pipelines/scripts/codeScan/scanLog"
  DOCKER_TEMPLATE: ".azure-pipelines/template"
  BANDIT_CONTAINER_NAME: "bandit"
  PYLINT_CONTAINER_NAME: "pylint"
  PYSPELLING_CONTAINER_NAME: "pyspelling"

stages:
  - stage: BanditCodeScan
    displayName: Bandit Code Scan
    dependsOn: []
    jobs:
      - job: Bandit
        displayName: Bandit
        steps:
          - template: template/docker-template.yml
            parameters:
               repoName: 'code-scan'
               repoTag: '1.0'
               dockerFileName: 'DockerfileCodeScan'
               containerConfigName: 'commonContainer'
               containerName: $(BANDIT_CONTAINER_NAME)

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                docker exec $(BANDIT_CONTAINER_NAME) bash /neural-compressor/$(CODE_SCAN_PATH)/bandit/bandit.sh
            displayName: "Bandit Check"

          - task: PublishPipelineArtifact@1
            condition: always()
            inputs:
              targetPath: $(Build.SourcesDirectory)/$(CODE_SCAN_LOG_PATH)/lpot-bandit.log
              artifact: bandit
              publishLocation: "pipeline"
            displayName: "PublishPipelineArtifact"


  - stage: PylintCodeScan
    displayName: Pylint Code Scan
    dependsOn: []
    jobs:
      - job: Pylint
        displayName: Pylint
        steps:
          - template: template/docker-template.yml
            parameters:
               repoName: 'code-scan'
               repoTag: '1.0'
               dockerFileName: 'DockerfileCodeScan'
               containerConfigName: 'commonContainer'
               containerName: $(PYLINT_CONTAINER_NAME)

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                docker exec $(PYLINT_CONTAINER_NAME) bash /neural-compressor/$(CODE_SCAN_PATH)/pylint/pylint.sh
            displayName: "Pylint Check"

          - task: PublishPipelineArtifact@1
            condition: always()
            inputs:
              targetPath: $(Build.SourcesDirectory)/$(CODE_SCAN_LOG_PATH)/lpot-pylint.json
              artifact: pylint
              publishLocation: "pipeline"
            displayName: "PublishPipelineArtifact"


  - stage: PyspellingCodeScan
    displayName: Pyspelling Code Scan
    dependsOn: []
    jobs:
      - job: Pyspelling
        displayName: Pyspelling
        steps:
          - template: template/docker-template.yml
            parameters:
               repoName: 'code-scan'
               repoTag: '1.0'
               dockerFileName: 'DockerfileCodeScan'
               containerConfigName: 'commonContainer'
               containerName: $(PYSPELLING_CONTAINER_NAME)

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                docker exec $(PYSPELLING_CONTAINER_NAME) bash /neural-compressor/$(CODE_SCAN_PATH)/pyspelling/pyspelling.sh
            displayName: "Pyspelling Check"

          - task: PublishPipelineArtifact@1
            condition: always()
            inputs:
              targetPath: $(Build.SourcesDirectory)/$(CODE_SCAN_LOG_PATH)/lpot_pyspelling.log
              artifact: pyspelling
              publishLocation: "pipeline"   
            displayName: "PublishPipelineArtifact"


  - stage: CopyRight
    displayName: CopyRight Code Scan
    dependsOn: []
    jobs:
      - job: CopyRight
        displayName: CopyRight
        steps:
          - script: |
              sudo rm -fr $(Build.SourcesDirectory) || true
              echo y | docker system prune
            displayName: "Clean workspace"
          - checkout: self
            displayName: "Checkout out Repo"

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                source $(Build.SourcesDirectory)/.azure-pipelines/scripts/change_color.sh
                set -e
                mkdir -p $(Build.SourcesDirectory)/$(CODE_SCAN_LOG_PATH)            
                RESET="echo -en \\E[0m \\n"  # close 

                supported_extensions=(py, sh, yaml)
                git --no-pager diff --name-only $(git show-ref -s remotes/origin/$(System.PullRequest.TargetBranch)) $(Build.SourcesDirectory)/neural_compressor > $(Build.SourcesDirectory)/$(CODE_SCAN_LOG_PATH)/diff.log
                files=$(cat $(Build.SourcesDirectory)/$(CODE_SCAN_LOG_PATH)/diff.log | awk '!a[$0]++')

                for file in ${files}
                do
                    if [[ "${supported_extensions[@]}" =~ "${file##*.}" ]]; then
                        if [ $(grep -E -c "Copyright \\(c\\) ([0-9]{4})(-[0-9]{4})? Intel Corporation" ${file}) = 0 ]; then
                            echo ${file} >>  $(Build.SourcesDirectory)/$(CODE_SCAN_LOG_PATH)/copyright_issue_summary.log
                            $BOLD_YELLOW && echo " -----------------  Current log file output start --------------------------"
                            cat   $(Build.SourcesDirectory)/$(CODE_SCAN_LOG_PATH)/copyright_issue_summary.log
                            $BOLD_YELLOW && echo " -----------------  Current log file output end --------------------------" && $RESET
                            $BOLD_RED && echo "CopyRight has something wrong! Please click on the artifact button to download and view the error log!" && $RESET; exit 1
                        fi
                    else
                        $LIGHT_PURPLE && echo "Skipping ${file}"  && $RESET
                    fi
                done
            displayName: "CopyRight Check"

          - task: PublishPipelineArtifact@1
            condition: failed()
            inputs:
              targetPath: $(Build.SourcesDirectory)/$(CODE_SCAN_LOG_PATH)/copyright_issue_summary.log
              artifact: copyright
              publishLocation: "pipeline" 
            displayName: "PublishPipelineArtifact"

            