trigger: none

pr:
  - master

pool: ICX-16C

variables:
  OUT_SCRIPT_PATH: $(Build.SourcesDirectory)/.azure-pipelines/scripts/models
  SCRIPT_PATH: /neural-compressor/.azure-pipelines/scripts

parameters:
- name: test_tf
  displayName: Run tensorflow models?
  type: boolean
  default: true
- name: test_pt
  displayName: Run pytorch models?
  type: boolean
  default: true
- name: test_onnx
  displayName: Run onnxrt models?
  type: boolean
  default: true
- name: test_mxnet
  displayName: Run mxnet models?
  type: boolean
  default: true

- name: tensorflowJobList
  type: object
  default:
  - jobName: 'resnet50v1_5'
    displayName: 'resnet50v1.5'
    modelName: 'resnet50v1.5'
    framework: 'tensorflow'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'tensorflow_resnet50v1.5_failed'
  - jobName: 'ssd_resnet50_v1'
    displayName: 'ssd_resnet50_v1'
    modelName: 'ssd_resnet50_v1'
    framework: 'tensorflow'
    modelTemplate: 'template/model-template.yml'    
    modelFailedName: 'tensorflow_ssd_resnet50_v1_failed'    
  - jobName: 'ssd_mobilenet_v1_ckpt'
    displayName: 'ssd_mobilenet_v1_ckpt'
    modelName: 'ssd_mobilenet_v1_ckpt'
    framework: 'tensorflow'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'tensorflow_ssd_mobilenet_v1_ckpt_failed'
  - jobName: 'inception_v1'
    displayName: 'inception_v1'
    modelName: 'inception_v1'
    framework: 'tensorflow'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'tensorflow_inception_v1_failed'   
  - jobName: 'resnet50_fashion'
    displayName: 'resnet50_fashion'
    modelName: 'resnet50_fashion'
    framework: 'tensorflow'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'tensorflow_resnet50_fashion_failed'   
  - jobName: 'darknet19'
    displayName: 'darknet19'
    modelName: 'darknet19'
    framework: 'tensorflow'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'tensorflow_darknet19_failed'         
  - jobName: 'densenet121'
    displayName: 'densenet-121'
    modelName: 'densenet-121'
    framework: 'tensorflow'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'tensorflow_densenet-121_failed'          
  - jobName: 'resnet101'
    displayName: 'resnet-101'
    modelName: 'resnet-101'
    framework: 'tensorflow'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'tensorflow_resnet-101_failed'       

- name: pyTorchJobList
  type: object
  default:
  - jobName: 'resnet18'
    displayName: 'resnet18'
    modelName: 'resnet18'
    framework: 'pytorch'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'pytorch_resnet18_failed'     
  - jobName: 'resnet18_fx'
    displayName: 'resnet18_fx'
    modelName: 'resnet18_fx'
    framework: 'pytorch'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'pytorch_resnet18_fx_failed'  

- name: onnxrtJobList
  type: object
  default: 
  - jobName: 'resnet50_v1_12'
    displayName: 'resnet50-v1-12'
    modelName: 'resnet50-v1-12'
    framework: 'onnxrt'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'onnxrt_resnet50-v1-12_failed'     
  - jobName: 'bert_base_MRPC_dynamic'
    displayName: 'bert_base_MRPC_dynamic'
    modelName: 'bert_base_MRPC_dynamic'
    framework: 'onnxrt'
    modelTemplate: 'template/model-template.yml'
    modelFailedName: 'onnxrt_bert_base_MRPC_dynamic_failed'      


stages:
  - stage: TensorflowModels
    displayName: Tensorflow Model Test
    dependsOn: []
    condition: eq('${{ parameters.test_tf }}', 'true')
    jobs:
      - ${{ each jobItem in parameters.tensorflowJobList }}:
        - job: ${{ jobItem.jobName }}
          displayName: ${{ jobItem.displayName }}
          steps:
            - template: ${{ jobItem.modelTemplate }}
              parameters:
                modelName: ${{ jobItem.modelName }}
                framework: ${{ jobItem.framework }}
                modelFailedName: ${{ jobItem.modelFailedName }}       

  - stage: PyTorchModels
    displayName: PyTorch Model Test
    dependsOn: []
    condition: eq('${{ parameters.test_pt }}', 'true')
    jobs:
      - ${{ each jobItem in parameters.pyTorchJobList }}:
        - job: ${{ jobItem.jobName }}
          displayName: ${{ jobItem.displayName }}
          steps:
            - template: ${{ jobItem.modelTemplate }}
              parameters:
                modelName: ${{ jobItem.modelName }}
                framework: ${{ jobItem.framework }}
                modelFailedName: ${{ jobItem.modelFailedName }}  

  - stage: MXNetModels
    displayName: Mxnet Model Test
    dependsOn: []
    condition: eq('${{ parameters.test_mxnet }}', 'true')
    jobs:
      - job: resnet50v1
        displayName: resnet50v1
        steps:
          - template: template/model-template.yml
            parameters:
              modelName: 'resnet50v1'
              framework: 'mxnet'
              modelFailedName: 'mxnet_resnet50v1_failed'              

  - stage: ONNXModels
    displayName: ONNXrt Model Test
    dependsOn: []
    condition: eq('${{ parameters.test_onnx }}', 'true')
    jobs:
      - ${{ each jobItem in parameters.onnxrtJobList }}:
        - job: ${{ jobItem.jobName }}
          displayName: ${{ jobItem.displayName }}
          steps:
            - template:  ${{ jobItem.modelTemplate }}
              parameters:
                modelName: ${{ jobItem.modelName }}
                framework: ${{ jobItem.framework }}
                modelFailedName: ${{ jobItem.modelFailedName }}  

  - stage: GenerateLogs
    displayName: Generate Report
    dependsOn: [ TensorflowModels, PyTorchModels, MXNetModels, ONNXModels ]
    condition: always()
    jobs:
      - job: GenerateReport
        displayName: generate report
        steps:
          - script: |
              echo ${BUILD_SOURCESDIRECTORY}
              sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
              echo y | docker system prune
            displayName: 'Clean workspace'
          - checkout: self
            clean: true
            displayName: 'Checkout out Repo'
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact:
              patterns: '**'
              path: $(OUT_SCRIPT_PATH)
          - task: UsePythonVersion@0
            displayName: 'Use Python 3.'
            inputs:
              versionSpec: '3'
          - script: |
              cd ${OUT_SCRIPT_PATH}
              mkdir generated
              mkdir last_generated
              python -u collect_log_all.py --logs_dir $(OUT_SCRIPT_PATH) --output_dir generated
            displayName: "Collect all logs"
          # - task: DownloadPipelineArtifact@2
          #   inputs:
          #     source: 'specific'
          #     artifact: 'FinalReport'
          #     patterns: '**.log'
          #     path: $(OUT_SCRIPT_PATH)/last_generated
          #     project: $(System.TeamProject)
          #     pipeline: 'Baseline'
          #     runVersion: 'specific'
          #     runId: $(model_runID)
          #     retryDownloadCount: 3
          #   displayName: 'Download last logs'
          - script: |
              echo "------ Generating final report.html ------"
              cd ${OUT_SCRIPT_PATH}
              /usr/bin/bash generate_report.sh --WORKSPACE generated --output_dir generated --last_logt_dir last_generated
            displayName: 'Generate report'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(OUT_SCRIPT_PATH)/generated
              artifact: FinalReport
              publishLocation: 'pipeline'
            displayName: "Publish report"
          - script: |
              if [ $(is_perf_reg) == 'true' ]; then
                echo "[Performance Regression] Some model performance regression occurred, please check artifacts and reports."
                exit 1
              fi
            displayName: "Specify performance regression"