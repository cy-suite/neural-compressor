trigger: none

pr:
  branches:
    include:
    - master
  paths:
    include:
    - neural_compressor
    exclude:
    - neural_compressor/ux

pool: ICX-16C

variables:
  IMAGE_NAME: 'neural-compressor'
  IMAGE_TAG: 'py38'
  UPLOAD_PATH: $(Build.SourcesDirectory)/log_dir
  DOWNLOAD_PATH: $(Build.SourcesDirectory)/log_dir
  ARTIFACT_NAME: 'UT_coverage_report'


stages:
- stage: Adaptor
  displayName: Unit Test FWKs adaptor
  dependsOn: []
  jobs:
  - job:
    steps:
      - template: template/ut-basic-template.yml
        parameters:
          dockerTemplate: 'commonDockerTemplate'
          dockerTemplateRepoName: 'neural-compressor'
          dockerTemplateRepoTag: 'py38'
          dockerTemplateFileName: 'Dockerfile'
          dockerTemplateContainerConfigName: 'commonContainer'
          dockerTemplateContainerName: 'adaptorContainer'
          utScriptFileName: 'run_basic_adaptor'
          UPLOAD_PATH: $(UPLOAD_PATH)
          utArtifact: 'ut-coverage-adaptor'

- stage: TFNewAPI
  displayName: Unit Test tf newAPI
  dependsOn: []
  jobs:
  - job:
    steps:
      - template: template/ut-basic-template.yml
        parameters:
          dockerTemplate: 'commonDockerTemplate'
          dockerTemplateRepoName: 'neural-compressor'
          dockerTemplateRepoTag: 'py38'
          dockerTemplateFileName: 'Dockerfile'
          dockerTemplateContainerConfigName: 'tfDatasetContainer'
          dockerTemplateContainerName: 'TFNewAPIContainer'
          utScriptFileName: 'run_basic_adaptor_tfnewapi'
          UPLOAD_PATH: $(UPLOAD_PATH)
          utArtifact: 'ut-coverage-tfnewapi'

- stage: IPEX
  displayName: Unit Test IPEX
  dependsOn: []
  jobs:
  - job:
    steps:
      - template: template/ut-basic-template.yml
        parameters:
          dockerTemplate: 'commonDockerTemplate'
          dockerTemplateRepoName: 'neural-compressor'
          dockerTemplateRepoTag: 'py38'
          dockerTemplateFileName: 'Dockerfile'
          dockerTemplateContainerConfigName: 'tfDatasetContainer'
          dockerTemplateContainerName: 'IPEXContainer'
          utScriptFileName: 'run_basic_ipex'
          UPLOAD_PATH: $(UPLOAD_PATH)
          utArtifact: 'ut-coverage-ipex'

- stage: Others
  displayName: Unit Test other basic case
  dependsOn: []
  jobs:
  - job:
    steps:
      - template: template/ut-basic-template.yml
        parameters:
          dockerTemplate: 'commonDockerTemplate'
          dockerTemplateRepoName: 'neural-compressor'
          dockerTemplateRepoTag: 'py38'
          dockerTemplateFileName: 'Dockerfile'
          dockerTemplateContainerConfigName: 'tfDatasetContainer'
          dockerTemplateContainerName: 'othersContainer'
          utScriptFileName: 'run_basic_others'
          UPLOAD_PATH: $(UPLOAD_PATH)
          utArtifact: 'ut-coverage-others'

- stage: Adaptor_base
  displayName: Unit Test FWKs adaptor baseline
  dependsOn: []
  jobs:
  - job:
    steps:
      - template: template/ut-basic-template.yml
        parameters:
          dockerTemplate: 'baseDockerTemplate'
          dockerTemplateRepoName: 'neural-compressor'
          dockerTemplateRepoTag: 'py38'
          dockerTemplateFileName: 'Dockerfile'
          dockerTemplateContainerConfigName: 'commonContainer'
          dockerTemplateContainerName: 'adaptorBaseContainer'
          utScriptFileName: 'run_basic_adaptor'
          UPLOAD_PATH: $(UPLOAD_PATH)
          utArtifact: 'ut-coverage-adaptor-base'          

- stage: TFNewAPI_base
  displayName: Unit Test tf newAPI baseline
  dependsOn: []
  jobs:
  - job:
    steps:
      - template: template/ut-basic-template.yml
        parameters:
          dockerTemplate: 'baseDockerTemplate'
          dockerTemplateRepoName: 'neural-compressor'
          dockerTemplateRepoTag: 'py38'
          dockerTemplateFileName: 'Dockerfile'
          dockerTemplateContainerConfigName: 'tfDatasetContainer'
          dockerTemplateContainerName: 'TFNewAPIBaseContainer'
          utScriptFileName: 'run_basic_adaptor_tfnewapi'
          UPLOAD_PATH: $(UPLOAD_PATH)
          utArtifact: 'ut-coverage-tfnewapi-base'        

- stage: IPEX_base
  displayName: Unit Test IPEX baseline
  dependsOn: []
  jobs:
  - job:
    steps:
      - template: template/ut-basic-template.yml
        parameters:
          dockerTemplate: 'baseDockerTemplate'
          dockerTemplateRepoName: 'neural-compressor'
          dockerTemplateRepoTag: 'py38'
          dockerTemplateFileName: 'Dockerfile'
          dockerTemplateContainerConfigName: 'tfDatasetContainer'
          dockerTemplateContainerName: 'IPEXBaseContainer'
          utScriptFileName: 'run_basic_ipex'
          UPLOAD_PATH: $(UPLOAD_PATH)
          utArtifact: 'ut-coverage-ipex-base' 
  
- stage: Others_base
  displayName: Unit Test other cases baseline
  dependsOn: []
  jobs:
  - job:
    steps:
      - template: template/ut-basic-template.yml
        parameters:
          dockerTemplate: 'baseDockerTemplate'
          dockerTemplateRepoName: 'neural-compressor'
          dockerTemplateRepoTag: 'py38'
          dockerTemplateFileName: 'Dockerfile'
          dockerTemplateContainerConfigName: 'tfDatasetContainer'
          dockerTemplateContainerName: 'othersBaseContainer'
          utScriptFileName: 'run_basic_others'
          UPLOAD_PATH: $(UPLOAD_PATH)
          utArtifact: 'ut-coverage-others-base' 

- stage: Coverage
  displayName: "Coverage Combine"
  dependsOn: [Adaptor, TFNewAPI, Others, IPEX, Adaptor_base, TFNewAPI_base, Others_base, IPEX_base]
  jobs:
  - job: CollectDatafiles
    steps:
      - template: template/docker-template.yml
        parameters:
          repoName: 'neural-compressor'
          repoTag: 'py38'
          dockerFileName: 'Dockerfile'    
          containerConfigName: ''
          containerName: ''

      - task: DownloadPipelineArtifact@2
        inputs:
          artifact:
          path: $(DOWNLOAD_PATH)

      - script: |
          echo "------ Collecting logs ------"
          echo "--- create container ---"
          docker run -d -it --name="collectLogs"  -v ${BUILD_SOURCESDIRECTORY}:/neural-compressor  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash
          echo "--- docker ps ---"
          docker ps
          echo "--- collect logs ---"
          docker exec collectLogs /bin/bash  +x -c "cd /neural-compressor/.azure-pipelines/scripts \
          && bash install_nc.sh \
          && bash ut/collect_log.sh"
        displayName: 'collect logs'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(UPLOAD_PATH)
          artifact: $(ARTIFACT_NAME)
          publishLocation: 'pipeline'
