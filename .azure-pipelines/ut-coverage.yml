trigger: none

pr:
  - wenxin/ut-coverage

pool: suyue-test

variables:
  IMAGE_NAME: 'neural-compressor'
  IMAGE_TAG: 'py38'
  UPLOAD_PATH: $(Build.SourcesDirectory)/log_dir
  DOWNLOAD_PATH: $(Build.SourcesDirectory)/log_dir
  OS: 'linux'
  PLATFORM: 'clx8280'
  ARTIFACT_NAME: 'UT_coverage_report'

stages:
- stage: Strategy
  displayName: "Unit Test Strategy"
  dependsOn: []
  jobs:
  - job:
    steps:
    - script: |
        echo ${BUILD_SOURCESDIRECTORY}
        sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
      displayName: 'Clean workspace'

    - checkout: self
      displayName: "Checkout out Repo"

    - script: |
        if [[ ! $(docker images | grep -i '${IMAGE_NAME}:${IMAGE_TAG}' ) ]]; then
            docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
        fi
        docker images | grep -i ${IMAGE_NAME}
        if [[ $? -ne 0 ]]; then
          echo "NO Such Image ${IMAGE_NAME}"
          exit 1
        fi
      displayName: "Build develop docker image"

    - script: |
        docker stop $(docker ps -aq)
        docker rm -vf $(docker ps -aq) || true
        env | sort
      displayName: 'Clean docker'

    - script: |
        docker run --disable-content-trust --privileged --name="ut-stra" --hostname="pr-host" -v ${BUILD_SOURCESDIRECTORY}:/neural-compressor ${IMAGE_NAME}:${IMAGE_TAG} \
        bash -c "cd /neural-compressor/.azure-pipelines/scripts \
        && bash install_nc_coverage.sh \
        && bash ut/run_basic_strategy.sh"
        # docker cp 'ut-stra':/neural-compressor/log_dir/.coverage.strategy $(UPLOAD_PATH)/
        ls -l $(UPLOAD_PATH)
        ls -l $(DOWNLOAD_PATH)
      displayName: 'Install Neural Compressor and run UT'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(UPLOAD_PATH)
        artifact: 'ut-coverage-strategy'
        publishLocation: 'pipeline'

- stage: Utils
  displayName: "Unit Test Utils"
  dependsOn: []
  jobs:
  - job:
    steps:
    - script: |
        echo ${BUILD_SOURCESDIRECTORY}
        sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
      displayName: 'Clean workspace'

    - checkout: self
      displayName: "Checkout out Repo"

    - script: |
        if [[ ! $(docker images | grep -i '${IMAGE_NAME}:${IMAGE_TAG}' ) ]]; then
            docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
        fi
        docker images | grep -i ${IMAGE_NAME}
        if [[ $? -ne 0 ]]; then
          echo "NO Such Image ${IMAGE_NAME}"
          exit 1
        fi
      displayName: "Build develop docker image"

    - script: |
        docker stop $(docker ps -aq)
        docker rm -vf $(docker ps -aq) || true
        env | sort
      displayName: 'Clean docker'

    - script: |
        docker run --disable-content-trust --privileged --name="ut-util" --hostname="pr-host" -v ${BUILD_SOURCESDIRECTORY}:/neural-compressor ${IMAGE_NAME}:${IMAGE_TAG} \
        bash -c "cd /neural-compressor/.azure-pipelines/scripts \
        && bash install_nc_coverage.sh \
        && bash ut/run_basic_utils.sh"
        # docker cp 'ut-util':/neural-compressor/log_dir/.coverage.util $(UPLOAD_PATH)/
        ls -l $(UPLOAD_PATH)
        ls -l $(DOWNLOAD_PATH)
      displayName: 'Install Neural Compressor and run UT'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(UPLOAD_PATH)
        artifact: 'ut-coverage-util'
        publishLocation: 'pipeline'

- stage: Coverage
  displayName: "Coverage Combine"
  dependsOn: [Utils, Strategy]
  jobs:
    - job: CollectDatafiles
      displayName: collect coverage files
      steps:
        - script: |
            echo ${BUILD_SOURCESDIRECTORY}
            sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
            echo y | docker system prune
          displayName: 'Clean  workspace'
        - checkout: self
          clean: true
          displayName: 'Checkout out Repo'
        - script: |
            if [[ ! $(docker images | grep -i ${IMAGE_NAME}:${IMAGE_TAG}) ]]; then
              docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
            fi
            docker images | grep -i ${IMAGE_NAME}
            if [[ $? -ne 0 ]]; then
              echo "NO Such Image ${IMAGE_NAME}"
              exit 1
            fi
          displayName: "Build Devel Images"
        - script: |
            docker stop $(docker ps -aq)
            docker rm -vf $(docker ps -aq) || true
          displayName: 'Clean Docker'
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact:
            path: $(DOWNLOAD_PATH)
        - script: |
            echo "------ Collecting logs ------"
            echo "--- create container ---"
            docker run -d -it --name="collectLogs"  -v ${BUILD_SOURCESDIRECTORY}:/neural-compressor  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash
            #echo "------ make coverage datas directory"
            #docker exec collectLogs /bin/bash  +x -c "mkdir -p /neural-compressor/.azure-pipelines/scripts/ut/coverage_datas"
            #echo "--- copy files into container ---"
            #docker cp $(DOWNLOAD_PATH)/ 'collectLogs':/neural-compressor/log_dir
            echo "--- docker ps ---"
            docker ps
            echo "--- collect logs ---"
            docker exec collectLogs /bin/bash  +x -c "cd /neural-compressor/.azure-pipelines/scripts \
             && bash install_nc_coverage.sh \
             && bash collect_log.sh"
            #docker cp 'collectLogs':/neural-compressor/log_dir/htmlcov $(UPLOAD_PATH)/htmlcov
          displayName: 'collect logs'
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(UPLOAD_PATH)
            artifact: $(ARTIFACT_NAME)
            publishLocation: 'pipeline'
