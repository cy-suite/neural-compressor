parameters:
  - name: modelName
    type: string
    default: "resnet50v1.5"
  - name: framework
    type: string
    default: "tensorflow"

  - name: modelContainerName
    type: string
    default: "model"

steps:
  - template: docker-template.yml
    parameters:
      dockerConfigName: "commonDockerConfig"
      repoName: "neural-compressor"
      repoTag: "py38"
      dockerFileName: "Dockerfile"
      containerName: ${{ parameters.modelContainerName }}

  - script: |
      docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
      && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --mode='env_setup'"
    displayName: Env setup

  - task: DownloadPipelineArtifact@2
    inputs:
      source: "specific"
      artifact: "FinalReport"
      patterns: "**.log"
      path: $(Build.SourcesDirectory)/.azure-pipelines/scripts/models/refer_log
      project: $(System.TeamProject)
      pipeline: "Baseline"
      runVersion: "specific"
      runId: $(model_runID)
      retryDownloadCount: 3
    displayName: "Download refer logs"

  - script: |
      docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
      && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --mode='tuning'"
    displayName: Tuning

  - script: |
      docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
      && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --tune_acc=true --mode='int8_benchmark'"
    displayName: INT8 Benchmark

  - script: |
      docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
      && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --tune_acc=true --mode='fp32_benchmark'"
    displayName: FP32 Benchmark

  - script: |
      docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
      && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --tune_acc=true --mode='collect_log'"
    displayName: Collect log

  - task: PublishPipelineArtifact@1
    condition: always()
    inputs:
      targetPath: $(Build.SourcesDirectory)/.azure-pipelines/scripts/models/${{ parameters.modelName }}/
      artifact: ${{ parameters.framework }}_${{ parameters.modelName }}
      publishLocation: "pipeline"

  - script: |
      if [ ${{ parameters.framework }}_${{ parameters.modelName }}_failed == 'true' ]; then
        echo "[Failed] Model ${{ parameters.modelName }} failed, please check artifacts and logs."
        exit 1
      fi
    displayName: "Check Test Status"
