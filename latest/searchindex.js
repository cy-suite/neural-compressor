Search.setIndex({"alltitles": {"2.0 API": [[506, "api"]], "2.X API User Guide": [[475, "x-api-user-guide"]], "2018 - 2020 (4)": [[550, "id5"]], "2021 (15)": [[550, "id4"]], "2022 (35)": [[550, "id3"]], "2023 (25)": [[550, "id2"]], "2024 (6)": [[550, "id1"]], "3.0 API": [[507, "api"]], "API Document Example": [[508, "api-document-example"]], "API List that Need to Implement": [[501, "api-list-that-need-to-implement"]], "API for TensorFlow": [[486, "api-for-tensorflow"]], "APIs": [[509, "apis"]], "AWQ": [[482, "awq"]], "Accuracy Aware Tuning": [[493, "accuracy-aware-tuning"], [551, "accuracy-aware-tuning"]], "Accuracy Criteria": [[559, "accuracy-criteria"]], "Accuracy-driven mixed precision": [[479, "accuracy-driven-mixed-precision"], [544, "accuracy-driven-mixed-precision"]], "Adaptor": [[500, "adaptor"], [503, "adaptor"]], "Adaptor Support Matrix": [[500, "adaptor-support-matrix"]], "Add quantize API according to tune_cfg": [[501, "add-quantize-api-according-to-tune-cfg"]], "Add query_fw_capability to Adaptor": [[501, "add-query-fw-capability-to-adaptor"]], "Additional Content": [[499, "additional-content"]], "Advanced Topics": [[475, "advanced-topics"]], "Algorithm: Auto-tuning of $\\alpha$.": [[557, "algorithm-auto-tuning-of-alpha"]], "Appendix": [[533, "appendix"]], "Architecture": [[490, "architecture"], [529, "architecture"], [538, "architecture"]], "Attributes": [[212, "attributes"], [282, "attributes"]], "Attribution": [[495, "attribution"]], "Auto": [[559, "auto"]], "Auto-tune the alpha for each layer/block": [[557, "auto-tune-the-alpha-for-each-layer-block"]], "Auto-tune the alpha for the entire model": [[557, "auto-tune-the-alpha-for-the-entire-model"]], "AutoRound": [[482, "autoround"]], "AutoTune": [[487, "autotune"]], "Autotune API": [[483, "autotune-api"]], "Backend and Device": [[486, "backend-and-device"]], "Background": [[500, "background"], [527, "background"]], "Basic": [[559, "basic"]], "Bayesian": [[559, "bayesian"]], "Benchmark": [[488, "benchmark"], [510, "benchmark"], [543, "benchmark"]], "Benchmark Support Matrix": [[525, "benchmark-support-matrix"]], "Benchmarking": [[525, "benchmarking"]], "Benefit of SigOpt Strategy": [[556, "benefit-of-sigopt-strategy"]], "Build Custom Dataloader with Python API": [[528, "build-custom-dataloader-with-python-api"]], "Build Custom Metric with Python API": [[542, "build-custom-metric-with-python-api"]], "Built-in transform/dataset/metric APIs": [[537, "built-in-transform-dataset-metric-apis"]], "Calculate the data range and generate quantized model": [[501, "calculate-the-data-range-and-generate-quantized-model"]], "Calibration Algorithms": [[526, "calibration-algorithms"]], "Calibration Algorithms in Quantization": [[526, "calibration-algorithms-in-quantization"]], "Capability": [[500, "capability"]], "Citation": [[540, "citation"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [5, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [98, "classes"], [100, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [134, "classes"], [135, "classes"], [139, "classes"], [142, "classes"], [143, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [150, "classes"], [152, "classes"], [153, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [161, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [170, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [196, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [222, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [228, "classes"], [231, "classes"], [235, "classes"], [237, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [284, "classes"], [285, "classes"], [287, "classes"], [289, "classes"], [290, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [304, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [384, "classes"], [385, "classes"], [388, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [402, "classes"], [403, "classes"], [405, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [416, "classes"], [417, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [430, "classes"], [431, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [443, "classes"], [447, "classes"], [450, "classes"], [454, "classes"], [457, "classes"], [458, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [471, "classes"], [472, "classes"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[543, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Comments": [[527, "comments"]], "Common Build Issues": [[534, "common-build-issues"]], "Common Problem": [[497, "common-problem"]], "Common Problems": [[483, "common-problems"]], "Common arguments": [[482, "common-arguments"]], "Communication": [[499, "communication"]], "Compression": [[511, "compression"]], "Config": [[512, "config"]], "Config Multiple Objectives": [[547, "config-multiple-objectives"]], "Config Single Objective": [[547, "config-single-objective"]], "Conservative Tuning": [[559, "conservative-tuning"]], "Contribution Guidelines": [[496, "contribution-guidelines"]], "Contributor Covenant Code of Conduct": [[495, "contributor-covenant-code-of-conduct"], [496, "contributor-covenant-code-of-conduct"]], "Create Pull Request": [[496, "create-pull-request"]], "Customize a New Tuning Strategy": [[559, "customize-a-new-tuning-strategy"]], "DataLoader": [[528, "dataloader"]], "Define the Quantization Ability of the Specific Operator": [[502, "define-the-quantization-ability-of-the-specific-operator"]], "Demo Usage": [[477, "demo-usage"]], "Demo usage": [[488, "demo-usage"]], "Design": [[490, "design"], [529, "design"], [559, "design"], [559, "id1"], [559, "id3"], [559, "id5"], [559, "id7"], [559, "id9"], [559, "id11"], [559, "id13"], [559, "id15"], [559, "id17"], [559, "id19"], [559, "id21"]], "Design the framework YAML": [[501, "design-the-framework-yaml"]], "Details": [[497, "details"]], "Determining the alpha through auto-tuning": [[485, "determining-the-alpha-through-auto-tuning"], [557, "determining-the-alpha-through-auto-tuning"]], "Distillation": [[543, "distillation"]], "Distillation for Quantization": [[530, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[530, "distillation-for-quantization-support-matrix"]], "Distributed Training and Inference (Evaluation)": [[531, "distributed-training-and-inference-evaluation"]], "Distributed Tuning": [[559, "distributed-tuning"]], "Documentation": [[499, "documentation"]], "Dump Throughput and Latency Summary": [[488, "dump-throughput-and-latency-summary"]], "During quantization mixed precision": [[544, "during-quantization-mixed-precision"]], "Dynamic Quantization": [[476, "dynamic-quantization"], [493, "dynamic-quantization"], [497, "dynamic-quantization"]], "Efficient Usage on Client-Side": [[482, "efficient-usage-on-client-side"]], "Enforcement": [[495, "enforcement"]], "Engineering": [[557, "engineering"]], "Example": [[542, "example"], [547, "example"]], "Example List": [[532, "example-list"]], "Example of Adding a New Backend Support": [[500, "example-of-adding-a-new-backend-support"]], "Examples": [[476, "examples"], [477, "examples"], [478, "examples"], [479, "examples"], [482, "examples"], [484, "examples"], [485, "examples"], [494, "examples"], [497, "examples"], [525, "examples"], [528, "examples"], [530, "examples"], [531, "examples"], [532, "examples"], [533, "examples"], [543, "examples"], [544, "examples"], [545, "examples"], [546, "examples"], [548, "examples"], [549, "examples"], [551, "examples"], [552, "examples"], [554, "examples"]], "Exceptions": [[138, "exceptions"], [401, "exceptions"]], "Exhaustive": [[559, "exhaustive"]], "Exit Policy": [[559, "exit-policy"]], "Export": [[533, "export"]], "Export Compressed Model": [[554, "export-compressed-model"]], "FP32 Model Export": [[533, "fp32-model-export"], [533, "id1"]], "FP8 Quantization": [[477, "fp8-quantization"], [499, "fp8-quantization"]], "FX": [[497, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[497, "fx-mode-support-matrix-in-neural-compressor"]], "Feature Matrix": [[536, "feature-matrix"]], "Fixed Alpha": [[480, "fixed-alpha"]], "Folder structure": [[527, "folder-structure"]], "Framework YAML Configuration Files": [[535, "framework-yaml-configuration-files"]], "Frequently Asked Questions": [[534, "frequently-asked-questions"]], "Full Publications/Events (85)": [[550, "full-publications-events-85"]], "Functions": [[1, "functions"], [3, "functions"], [21, "functions"], [29, "functions"], [30, "functions"], [31, "functions"], [52, "functions"], [53, "functions"], [55, "functions"], [89, "functions"], [90, "functions"], [101, "functions"], [103, "functions"], [133, "functions"], [134, "functions"], [135, "functions"], [140, "functions"], [141, "functions"], [144, "functions"], [145, "functions"], [146, "functions"], [151, "functions"], [152, "functions"], [153, "functions"], [154, "functions"], [160, "functions"], [161, "functions"], [164, "functions"], [166, "functions"], [167, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [176, "functions"], [177, "functions"], [181, "functions"], [184, "functions"], [189, "functions"], [190, "functions"], [191, "functions"], [192, "functions"], [193, "functions"], [195, "functions"], [202, "functions"], [203, "functions"], [210, "functions"], [212, "functions"], [219, "functions"], [225, "functions"], [226, "functions"], [228, "functions"], [229, "functions"], [231, "functions"], [232, "functions"], [233, "functions"], [235, "functions"], [236, "functions"], [240, "functions"], [244, "functions"], [246, "functions"], [258, "functions"], [262, "functions"], [263, "functions"], [267, "functions"], [275, "functions"], [279, "functions"], [281, "functions"], [282, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [302, "functions"], [303, "functions"], [304, "functions"], [306, "functions"], [325, "functions"], [326, "functions"], [328, "functions"], [386, "functions"], [388, "functions"], [391, "functions"], [392, "functions"], [394, "functions"], [395, "functions"], [396, "functions"], [400, "functions"], [402, "functions"], [408, "functions"], [410, "functions"], [412, "functions"], [413, "functions"], [415, "functions"], [416, "functions"], [417, "functions"], [419, "functions"], [421, "functions"], [422, "functions"], [424, "functions"], [429, "functions"], [431, "functions"], [435, "functions"], [437, "functions"], [439, "functions"], [441, "functions"], [442, "functions"], [443, "functions"], [445, "functions"], [446, "functions"], [447, "functions"], [448, "functions"], [449, "functions"], [451, "functions"], [453, "functions"], [454, "functions"], [460, "functions"], [462, "functions"], [463, "functions"], [464, "functions"], [467, "functions"], [468, "functions"], [470, "functions"], [471, "functions"]], "GPTQ": [[482, "gptq"]], "General Use Cases": [[488, "general-use-cases"]], "Get Start with FP8 Quantization": [[477, "get-start-with-fp8-quantization"]], "Get Started": [[481, "get-started"], [482, "get-started"], [484, "get-started"], [489, "get-started"], [497, "get-started"], [551, "get-started"]], "Get Started with Adaptor API": [[500, "get-started-with-adaptor-api"]], "Get Started with Benchmark API": [[525, "get-started-with-benchmark-api"]], "Get Started with DataLoader": [[528, "get-started-with-dataloader"]], "Get Started with Distillation for Quantization API": [[530, "get-started-with-distillation-for-quantization-api"]], "Get Started with Distributed Training and Inference API": [[531, "get-started-with-distributed-training-and-inference-api"]], "Get Started with Metric": [[542, "get-started-with-metric"]], "Get Started with Microscaling Quantization API": [[478, "get-started-with-microscaling-quantization-api"], [546, "get-started-with-microscaling-quantization-api"]], "Get Started with Mixed Precision API": [[544, "get-started-with-mixed-precision-api"]], "Get Started with Objective API": [[547, "get-started-with-objective-api"]], "Get Started with Orchestration API": [[548, "get-started-with-orchestration-api"]], "Get Started with Pruning API": [[549, "get-started-with-pruning-api"]], "Get Started with autotune API": [[479, "get-started-with-autotune-api"]], "Get started with Framework YAML Files": [[535, "get-started-with-framework-yaml-files"]], "Getting Started": [[499, "getting-started"], [536, "getting-started"]], "Getting Started with Dynamic Quantization": [[476, "getting-started-with-dynamic-quantization"]], "HAWQ_V2": [[559, "hawq-v2"]], "HQQ": [[482, "hqq"]], "Hardware and Software requests for BF16": [[479, "hardware-and-software-requests-for-bf16"], [544, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[479, "hardware-and-software-requests-for-fp16"], [544, "hardware-and-software-requests-for-fp16"]], "Horovodrun Execution": [[531, "horovodrun-execution"]], "How it Works": [[487, "how-it-works"]], "How to Add An Adaptor": [[501, "how-to-add-an-adaptor"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[502, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "INC Coding Conventions": [[527, "inc-coding-conventions"]], "INT8 Model Export": [[533, "int8-model-export"], [533, "id2"]], "Implement ONNXRTAdaptor Class": [[500, "implement-onnxrtadaptor-class"]], "Imports": [[527, "imports"]], "Incompatible Changes": [[555, "incompatible-changes"]], "Incompatible changes between v1.2 and v1.1": [[537, "incompatible-changes-between-v1-2-and-v1-1"]], "Infrastructure of Intel\u00ae Neural Compressor": [[538, "infrastructure-of-intel-neural-compressor"]], "Install Framework": [[499, "install-framework"], [539, "install-framework"]], "Install from AI Kit": [[539, "install-from-ai-kit"]], "Install from Binary": [[539, "install-from-binary"]], "Install from Source": [[539, "install-from-source"]], "Install from pypi": [[499, "install-from-pypi"]], "Install tensorflow": [[499, "install-tensorflow"], [539, "install-tensorflow"]], "Install torch for CPU": [[499, "install-torch-for-cpu"], [539, "install-torch-for-cpu"]], "Install torch for other platform": [[499, "install-torch-for-other-platform"], [539, "install-torch-for-other-platform"]], "Install torch/intel_extension_for_pytorch for Intel GPU": [[499, "install-torch-intel-extension-for-pytorch-for-intel-gpu"], [539, "install-torch-intel-extension-for-pytorch-for-intel-gpu"]], "Installation": [[499, "installation"], [539, "installation"], [539, "id1"]], "Intel\u00ae Neural Compressor": [[499, "intel-neural-compressor"]], "Intel\u00ae Neural Compressor Documentation": [[474, "intel-neural-compressor-documentation"], [561, "intel-neural-compressor-documentation"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[539, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[539, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[539, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor supports HPUs based on heterogeneous architecture with two compute engines (MME and TPC):": [[539, "intel-neural-compressor-supports-hpus-based-on-heterogeneous-architecture-with-two-compute-engines-mme-and-tpc"]], "Introduction": [[476, "introduction"], [477, "introduction"], [478, "introduction"], [479, "introduction"], [480, "introduction"], [481, "introduction"], [482, "introduction"], [483, "introduction"], [484, "introduction"], [485, "introduction"], [486, "introduction"], [488, "introduction"], [489, "introduction"], [493, "introduction"], [494, "introduction"], [497, "introduction"], [500, "introduction"], [501, "introduction"], [502, "introduction"], [525, "introduction"], [526, "introduction"], [528, "introduction"], [530, "introduction"], [531, "introduction"], [533, "introduction"], [535, "introduction"], [538, "introduction"], [542, "introduction"], [544, "introduction"], [545, "introduction"], [546, "introduction"], [547, "introduction"], [548, "introduction"], [549, "introduction"], [552, "introduction"], [554, "introduction"], [556, "introduction"], [557, "introduction"], [558, "introduction"], [559, "introduction"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[502, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Issue 1:": [[534, "issue-1"]], "Issue 2:": [[534, "issue-2"]], "Issue 3:": [[534, "issue-3"]], "Issue 4:": [[534, "issue-4"]], "Issue 5:": [[534, "issue-5"]], "Issue 6:": [[534, "issue-6"]], "Keras Models with keras 2.15.1": [[560, "keras-models-with-keras-2-15-1"]], "Known Issues": [[555, "known-issues"]], "LLMs Quantization Recipes": [[541, "llms-quantization-recipes"]], "Large Language Model Pruning": [[549, "large-language-model-pruning"]], "Large Language Models Accuracy": [[541, "large-language-models-accuracy"]], "Large Language Models Recipes": [[541, "large-language-models-recipes"]], "Layer Wise Quantization": [[482, "layer-wise-quantization"]], "Layer Wise Quantization (LWQ)": [[552, "layer-wise-quantization-lwq"]], "Legal Information": [[540, "legal-information"]], "License": [[540, "license"]], "Load API": [[483, "load-api"]], "Logger": [[527, "logger"]], "MSE": [[559, "mse"]], "MSE_V2": [[559, "mse-v2"]], "MXNet": [[542, "mxnet"], [558, "mxnet"]], "Matmul quantization example": [[493, "matmul-quantization-example"], [557, "matmul-quantization-example"]], "Metrics": [[542, "metrics"]], "Microscaling Quantization": [[478, "microscaling-quantization"], [546, "microscaling-quantization"]], "Mix Precision": [[513, "mix-precision"], [543, "mix-precision"]], "Mixed Precision": [[486, "mixed-precision"], [544, "mixed-precision"]], "Mixed Precision Support Matrix": [[479, "mixed-precision-support-matrix"], [544, "mixed-precision-support-matrix"]], "Model": [[514, "model"], [545, "model"]], "Model Examples": [[481, "model-examples"]], "Model Examples with PT2E": [[481, "model-examples-with-pt2e"]], "Model Quantization": [[543, "model-quantization"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [98, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [166, "module-contents"], [167, "module-contents"], [170, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [222, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [287, "module-contents"], [289, "module-contents"], [290, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [405, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [412, "module-contents"], [413, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [439, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [453, "module-contents"], [454, "module-contents"], [457, "module-contents"], [458, "module-contents"], [460, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"]], "Multiple Objectives": [[547, "multiple-objectives"]], "Neural Compressor Configuration": [[556, "neural-compressor-configuration"]], "Neural Network Pruning": [[549, "neural-network-pruning"]], "Note": [[497, "note"]], "ONNX Models with ONNX Runtime 1.18.1": [[560, "onnx-models-with-onnx-runtime-1-18-1"]], "ONNX Runtime": [[504, "onnx-runtime"]], "ONNX Runtime framework example": [[552, "onnx-runtime-framework-example"]], "ONNXRT": [[542, "onnxrt"], [558, "onnxrt"]], "Objective": [[515, "objective"], [547, "objective"]], "Objective Support Matrix": [[547, "objective-support-matrix"]], "One-shot": [[548, "one-shot"]], "Optimization Orchestration": [[548, "optimization-orchestration"]], "Option 1: Pure Yaml Configuration": [[531, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[531, "option-2-user-defined-training-function"]], "Orchestration": [[543, "orchestration"]], "Orchestration Support Matrix": [[548, "orchestration-support-matrix"]], "Our Pledge": [[495, "our-pledge"]], "Our Responsibilities": [[495, "our-responsibilities"]], "Our Standards": [[495, "our-standards"]], "Our enhancement:": [[557, "our-enhancement"]], "Overview": [[475, "overview"], [487, "overview"]], "Package Contents": [[171, "package-contents"], [177, "package-contents"], [184, "package-contents"]], "Per-channel example": [[493, "per-channel-example"], [557, "per-channel-example"]], "Per-channel limitation": [[493, "per-channel-limitation"], [557, "per-channel-limitation"]], "Per-tensor & Per-channel": [[493, "per-tensor-per-channel"], [557, "per-tensor-per-channel"]], "Per-tensor example": [[493, "per-tensor-example"], [557, "per-tensor-example"]], "Performance": [[556, "performance"]], "Performance Comparison of Different Strategies": [[556, "performance-comparison-of-different-strategies"]], "Post Training Dynamic Quantization": [[497, "post-training-dynamic-quantization"], [551, "post-training-dynamic-quantization"]], "Post Training Quantization": [[551, "post-training-quantization"]], "Post Training Static Quantization": [[486, "post-training-static-quantization"], [497, "post-training-static-quantization"], [551, "post-training-static-quantization"]], "Post-training Quantization": [[543, "post-training-quantization"]], "Preparation": [[556, "preparation"]], "Prepare Dependency Packages": [[494, "prepare-dependency-packages"]], "Prepare calibration model from fp32 graph": [[501, "prepare-calibration-model-from-fp32-graph"]], "Prerequisites": [[539, "prerequisites"]], "Pruning": [[543, "pruning"], [549, "pruning"]], "Pruning Criteria": [[549, "pruning-criteria"]], "Pruning Patterns": [[549, "pruning-patterns"]], "Pruning Schedules": [[549, "pruning-schedules"]], "Pruning Scope": [[549, "pruning-scope"]], "Pruning Support Matrix": [[549, "pruning-support-matrix"]], "Pruning Types": [[549, "pruning-types"]], "Pruning with Hyperparameter Optimization": [[549, "pruning-with-hyperparameter-optimization"]], "Public and Internal Interfaces": [[527, "public-and-internal-interfaces"]], "Pull Request Acceptance Criteria": [[496, "pull-request-acceptance-criteria"]], "Pull Request Checklist": [[496, "pull-request-checklist"]], "Pull Request Status Checks Overview": [[496, "pull-request-status-checks-overview"]], "Pull Request Template": [[496, "pull-request-template"]], "PyTorch": [[542, "pytorch"], [553, "pytorch"]], "PyTorch Examples:": [[531, "pytorch-examples"]], "PyTorch Mixed Precision": [[479, "pytorch-mixed-precision"]], "PyTorch Model": [[533, "pytorch-model"]], "PyTorch Models with Torch 2.3.0+cpu in IPEX Mode": [[560, "pytorch-models-with-torch-2-3-0-cpu-in-ipex-mode"]], "PyTorch Models with Torch 2.3.0+cpu in PTQ Mode": [[560, "pytorch-models-with-torch-2-3-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.3.0+cpu in QAT Mode": [[560, "pytorch-models-with-torch-2-3-0-cpu-in-qat-mode"]], "PyTorch Smooth Quantization": [[480, "pytorch-smooth-quantization"]], "PyTorch Static Quantization": [[481, "pytorch-static-quantization"]], "PyTorch Weight Only Quantization": [[482, "pytorch-weight-only-quantization"]], "PyTorch framework example": [[552, "pytorch-framework-example"]], "Python-based APIs": [[475, "python-based-apis"]], "Pytorch": [[558, "pytorch"]], "Pytorch Quantization AutoTune": [[521, "pytorch-quantization-autotune"]], "Pytorch Quantization Base API": [[522, "pytorch-quantization-base-api"]], "Pytorch Quantization Config": [[523, "pytorch-quantization-config"]], "Quantization": [[493, "quantization"], [516, "quantization"], [551, "quantization"]], "Quantization APIs": [[483, "quantization-apis"]], "Quantization Approaches": [[486, "quantization-approaches"], [551, "quantization-approaches"]], "Quantization Aware Training": [[493, "quantization-aware-training"], [543, "quantization-aware-training"], [551, "quantization-aware-training"], [551, "id1"]], "Quantization Capability": [[554, "quantization-capability"]], "Quantization Fundamentals": [[493, "quantization-fundamentals"], [551, "quantization-fundamentals"], [557, "quantization-fundamentals"]], "Quantization Introduction": [[551, "quantization-introduction"]], "Quantization Scheme": [[486, "quantization-scheme"]], "Quantization Scheme in IPEX": [[493, "quantization-scheme-in-ipex"], [551, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[551, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[551, "quantization-scheme-in-onnx-runtime"]], "Quantization Scheme in PyTorch": [[493, "quantization-scheme-in-pytorch"], [551, "quantization-scheme-in-pytorch"]], "Quantization Scheme in TensorFlow": [[493, "quantization-scheme-in-tensorflow"], [551, "quantization-scheme-in-tensorflow"]], "Quantization Support Matrix": [[551, "quantization-support-matrix"]], "Quantization on Client": [[489, "quantization-on-client"]], "Quantization-Aware Training": [[497, "quantization-aware-training"]], "Query API": [[500, "query-api"]], "Query API Introduction": [[500, "query-api-introduction"]], "Quick Samples": [[536, "quick-samples"]], "RTN": [[482, "rtn"]], "Random": [[559, "random"]], "Recommend VS Code settings.json": [[527, "recommend-vs-code-settings-json"]], "Reference": [[478, "reference"], [482, "reference"], [493, "reference"], [526, "reference"], [527, "reference"], [546, "reference"], [549, "reference"], [551, "reference"], [554, "reference"], [557, "reference"]], "Regularization": [[549, "regularization"]], "Release": [[555, "release"]], "Release Data": [[532, "release-data"]], "Release Notes": [[555, "release-notes"]], "Report a Vulnerability": [[498, "report-a-vulnerability"]], "Retrain-free Pruning API": [[549, "retrain-free-pruning-api"]], "Rules": [[527, "rules"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[501, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Saving and Loading": [[482, "saving-and-loading"]], "Scope": [[495, "scope"]], "Sections": [[474, "sections"], [561, "sections"]], "Security": [[531, "security"]], "Security Policy": [[498, "security-policy"]], "Selected Publications/Events": [[499, "selected-publications-events"]], "SigOpt": [[559, "sigopt"]], "SigOpt Platform": [[556, "sigopt-platform"]], "SigOpt Strategy": [[556, "sigopt-strategy"]], "Single Objective": [[547, "single-objective"]], "Smooth Quant": [[485, "smooth-quant"], [557, "smooth-quant"]], "Smooth Quantization": [[486, "smooth-quantization"], [493, "smooth-quantization"]], "SmoothQuant": [[557, "smoothquant"]], "SmoothQuant and Our Enhancement": [[557, "smoothquant-and-our-enhancement"]], "Sparse Model Deployment": [[549, "sparse-model-deployment"]], "Sparsity Decay Types": [[549, "sparsity-decay-types"]], "Specify Quantization Backend and Device": [[551, "specify-quantization-backend-and-device"]], "Specify Quantization Recipes": [[551, "specify-quantization-recipes"]], "Specify Quantization Rules": [[480, "specify-quantization-rules"], [481, "specify-quantization-rules"], [482, "specify-quantization-rules"], [484, "specify-quantization-rules"], [551, "specify-quantization-rules"]], "Static Quantization": [[493, "static-quantization"]], "Static Quantization & Quantization Aware Training": [[497, "static-quantization-quantization-aware-training"]], "Static Quantization with IPEX Backend": [[481, "static-quantization-with-ipex-backend"]], "Static Quantization with PT2E Backend": [[481, "static-quantization-with-pt2e-backend"]], "Step-by-Step guidelines": [[496, "step-by-step-guidelines"]], "Strategy": [[517, "strategy"]], "Strategy Design": [[559, "strategy-design"]], "Strings": [[527, "strings"]], "Submodules": [[0, "submodules"], [4, "submodules"], [16, "submodules"], [37, "submodules"], [61, "submodules"], [72, "submodules"], [80, "submodules"], [86, "submodules"], [91, "submodules"], [96, "submodules"], [97, "submodules"], [99, "submodules"], [102, "submodules"], [115, "submodules"], [130, "submodules"], [136, "submodules"], [137, "submodules"], [148, "submodules"], [155, "submodules"], [158, "submodules"], [165, "submodules"], [168, "submodules"], [171, "submodules"], [173, "submodules"], [177, "submodules"], [184, "submodules"], [194, "submodules"], [198, "submodules"], [216, "submodules"], [220, "submodules"], [223, "submodules"], [227, "submodules"], [234, "submodules"], [238, "submodules"], [271, "submodules"], [277, "submodules"], [286, "submodules"], [288, "submodules"], [296, "submodules"], [301, "submodules"], [305, "submodules"], [310, "submodules"], [334, "submodules"], [345, "submodules"], [352, "submodules"], [357, "submodules"], [362, "submodules"], [363, "submodules"], [371, "submodules"], [383, "submodules"], [389, "submodules"], [398, "submodules"], [399, "submodules"], [404, "submodules"], [406, "submodules"], [411, "submodules"], [414, "submodules"], [418, "submodules"], [428, "submodules"], [432, "submodules"], [438, "submodules"], [444, "submodules"], [452, "submodules"], [456, "submodules"], [461, "submodules"], [465, "submodules"]], "Subpackages": [[4, "subpackages"], [72, "subpackages"], [96, "subpackages"], [97, "subpackages"], [99, "subpackages"], [136, "subpackages"], [155, "subpackages"], [171, "subpackages"], [197, "subpackages"], [221, "subpackages"], [227, "subpackages"], [271, "subpackages"], [283, "subpackages"], [291, "subpackages"], [292, "subpackages"], [305, "subpackages"], [345, "subpackages"], [362, "subpackages"], [363, "subpackages"], [398, "subpackages"], [432, "subpackages"], [440, "subpackages"], [465, "subpackages"]], "Summary": [[502, "summary"]], "Support": [[496, "support"]], "Support Matrix": [[486, "support-matrix"], [526, "support-matrix"]], "Supported Algorithms": [[494, "supported-algorithms"]], "Supported Built-in Metric Matrix": [[542, "supported-built-in-metric-matrix"]], "Supported Feature Matrix": [[531, "supported-feature-matrix"], [535, "supported-feature-matrix"], [538, "supported-feature-matrix"], [551, "supported-feature-matrix"]], "Supported Framework Dataloader Matrix": [[528, "supported-framework-dataloader-matrix"]], "Supported Framework Matrix": [[480, "supported-framework-matrix"], [557, "supported-framework-matrix"]], "Supported Framework Model Matrix": [[533, "supported-framework-model-matrix"], [545, "supported-framework-model-matrix"], [546, "supported-framework-model-matrix"], [552, "supported-framework-model-matrix"], [554, "supported-framework-model-matrix"]], "Supported Matrix": [[482, "supported-matrix"], [483, "supported-matrix"], [488, "supported-matrix"]], "Supported Parameters": [[477, "supported-parameters"]], "Supported quantized ops": [[533, "supported-quantized-ops"]], "Symmetric & Asymmetric": [[493, "symmetric-asymmetric"]], "System Requirements": [[539, "system-requirements"]], "TEQ": [[482, "teq"]], "TODO Comments": [[527, "todo-comments"]], "TPE": [[559, "tpe"]], "TensorFlow": [[486, "tensorflow"], [542, "tensorflow"], [558, "tensorflow"]], "TensorFlow Examples:": [[531, "tensorflow-examples"]], "TensorFlow Models with TensorFlow 2.16.1": [[560, "tensorflow-models-with-tensorflow-2-16-1"]], "TensorFlow Quantization": [[484, "tensorflow-quantization"]], "Tensorflow": [[553, "tensorflow"]], "Tensorflow Model": [[533, "tensorflow-model"]], "Tensorflow Quantization AutoTune": [[518, "tensorflow-quantization-autotune"]], "Tensorflow Quantization Base API": [[519, "tensorflow-quantization-base-api"]], "Tensorflow Quantization Config": [[520, "tensorflow-quantization-config"]], "Torch": [[483, "torch"]], "Torch Utils": [[505, "torch-utils"]], "Torch-like APIs": [[483, "torch-like-apis"]], "Trademarks": [[540, "trademarks"]], "Training": [[524, "training"]], "Training-aware pruning API": [[549, "training-aware-pruning-api"]], "Transform": [[558, "transform"]], "Transform Support List": [[558, "transform-support-list"]], "Transformers-like API": [[494, "transformers-like-api"]], "Tuning Algorithms": [[559, "tuning-algorithms"]], "Tuning Process": [[559, "tuning-process"]], "Tuning Space": [[559, "tuning-space"]], "Tuning Strategies": [[559, "tuning-strategies"]], "Turn OFF Auto Mixed Precision during Quantization": [[553, "turn-off-auto-mixed-precision-during-quantization"]], "Type Annotations": [[527, "type-annotations"]], "Usage": [[480, "usage"], [482, "usage"], [485, "usage"], [488, "usage"], [557, "usage"], [559, "usage"], [559, "id2"], [559, "id4"], [559, "id6"], [559, "id8"], [559, "id10"], [559, "id12"], [559, "id14"], [559, "id16"], [559, "id18"], [559, "id20"], [559, "id22"]], "Usage For CPU": [[494, "usage-for-cpu"]], "Usage For Intel GPU": [[494, "usage-for-intel-gpu"]], "Usage Sample with IPEX": [[481, "usage-sample-with-ipex"]], "Usage Sample with PT2E": [[481, "usage-sample-with-pt2e"]], "Usage examples for CPU device": [[494, "usage-examples-for-cpu-device"]], "Use Docker Image with torch installed for HPU": [[499, "use-docker-image-with-torch-installed-for-hpu"], [539, "use-docker-image-with-torch-installed-for-hpu"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[528, "use-intel-neural-compressor-dataloader-api"]], "Use Intel\u00ae Neural Compressor Metric API": [[542, "use-intel-neural-compressor-metric-api"]], "Use the New Data Type": [[502, "use-the-new-data-type"]], "User Code Example": [[554, "user-code-example"]], "User code example": [[554, "id1"]], "User-facing APIs": [[537, "user-facing-apis"]], "Using a Fixed alpha": [[485, "using-a-fixed-alpha"]], "Using a fixed alpha": [[557, "using-a-fixed-alpha"]], "Validated Hardware Environment": [[539, "validated-hardware-environment"]], "Validated Knowledge Distillation Examples": [[560, "validated-knowledge-distillation-examples"]], "Validated Models": [[480, "validated-models"], [557, "validated-models"], [560, "validated-models"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[560, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]], "Validated Pruning Examples": [[560, "validated-pruning-examples"]], "Validated Quantization Examples": [[560, "validated-quantization-examples"]], "Validated Software Environment": [[539, "validated-software-environment"]], "Version mapping between Intel Neural Compressor to Gaudi Software Stack": [[491, "version-mapping-between-intel-neural-compressor-to-gaudi-software-stack"]], "WOQ Algorithms Tuning": [[554, "woq-algorithms-tuning"]], "Weight Only Quantization": [[493, "weight-only-quantization"]], "Weight Only Quantization (WOQ)": [[554, "weight-only-quantization-woq"]], "Weight-Only Large Language Model Loading (LLMs)": [[499, "weight-only-large-language-model-loading-llms"]], "What\u2019s New": [[499, "what-s-new"]], "With Accuracy Aware Tuning": [[484, "with-accuracy-aware-tuning"]], "Without Accuracy Aware Tuning": [[484, "without-accuracy-aware-tuning"]], "Workflow": [[529, "workflow"]], "Workflows": [[490, "workflows"]], "Working Flow": [[500, "working-flow"], [551, "working-flow"]], "Working with Autotune": [[487, "working-with-autotune"]], "Working with PyTorch Model": [[487, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[487, "working-with-tensorflow-model"]], "neural_compressor": [[227, "module-neural_compressor"]], "neural_compressor.adaptor.mxnet_utils": [[0, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[1, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.ox_utils": [[4, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.calibration": [[2, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[3, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils.operators": [[16, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[5, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[6, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[7, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[8, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[9, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[10, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[11, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[12, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[13, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[17, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[18, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[19, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[20, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[21, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[22, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[24, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[25, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[26, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[27, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[28, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[29, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[30, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[31, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.tensorflow": [[32, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils": [[96, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[33, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[35, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[95, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[97, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[125, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[127, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[128, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[133, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils": [[136, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[134, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[135, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[137, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[142, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[143, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[144, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[145, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm": [[148, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.algorithm": [[146, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[147, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm.smooth_quant": [[149, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[150, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[151, "module-neural_compressor.benchmark"]], "neural_compressor.common": [[155, "module-neural_compressor.common"]], "neural_compressor.common.base_config": [[152, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tuning": [[153, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common.benchmark": [[154, "module-neural_compressor.common.benchmark"]], "neural_compressor.common.tuning_param": [[156, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils": [[158, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.constants": [[157, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils.logger": [[159, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.save_load": [[160, "module-neural_compressor.common.utils.save_load"]], "neural_compressor.common.utils.utility": [[161, "module-neural_compressor.common.utils.utility"]], "neural_compressor.common.version": [[162, "module-neural_compressor.common.version"]], "neural_compressor.compression.callbacks": [[163, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation": [[165, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.criterions": [[164, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation.optimizers": [[166, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[167, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[168, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[169, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.pruner": [[171, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.criteria": [[170, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.model_slim": [[173, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[172, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[174, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[175, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[177, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.base": [[176, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns.mha": [[178, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[179, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[180, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners": [[184, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.base": [[181, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[182, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[183, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners.mha": [[185, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[186, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[187, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[188, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruning": [[189, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[190, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[191, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[192, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[193, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[194, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[195, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.config": [[196, "module-neural_compressor.config"]], "neural_compressor.contrib": [[197, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[198, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[199, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[200, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data": [[221, "module-neural_compressor.data"]], "neural_compressor.data.dataloaders.base_dataloader": [[201, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[202, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[203, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[204, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[205, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[206, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[207, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[208, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[209, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets": [[216, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.bert_dataset": [[210, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[211, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[212, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[213, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[214, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[215, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[217, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters": [[220, "module-neural_compressor.data.filters"]], "neural_compressor.data.filters.coco_filter": [[218, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[219, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.transforms": [[223, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.imagenet_transform": [[222, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms.postprocess": [[224, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[225, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[226, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.metric": [[234, "module-neural_compressor.metric"]], "neural_compressor.metric.bleu": [[228, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[229, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[230, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[231, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[232, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[233, "module-neural_compressor.metric.f1"]], "neural_compressor.metric.metric": [[235, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[236, "module-neural_compressor.mix_precision"]], "neural_compressor.model": [[238, "module-neural_compressor.model"]], "neural_compressor.model.base_model": [[237, "module-neural_compressor.model.base_model"]], "neural_compressor.model.keras_model": [[239, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[240, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[241, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[242, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[243, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[244, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[245, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[246, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[247, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[248, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[249, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[250, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[251, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[252, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[253, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[254, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[255, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[256, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[257, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[258, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[259, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[260, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[261, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[262, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[263, "module-neural_compressor.quantization"]], "neural_compressor.strategy": [[271, "module-neural_compressor.strategy"]], "neural_compressor.strategy.auto": [[264, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[265, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[266, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[267, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[268, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[269, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[270, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy.mse": [[272, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[273, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[274, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[275, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[277, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.constant": [[276, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils.tuning_sampler": [[278, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[279, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[280, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[281, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[282, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.tensorflow": [[291, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.algorithms": [[283, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother": [[286, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[284, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[285, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[287, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[288, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[289, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[290, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow.keras": [[292, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers": [[296, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[293, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[294, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[295, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers.layer_initializer": [[297, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[298, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[299, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization": [[301, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.keras.quantization.config": [[300, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.quantization": [[305, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[302, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[303, "module-neural_compressor.tensorflow.quantization.autotune"]], "neural_compressor.tensorflow.quantization.config": [[304, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization.quantize": [[306, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils": [[362, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[307, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[345, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[310, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[308, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[309, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[334, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[311, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[312, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[313, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[314, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[315, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[316, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[317, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[318, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[319, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[320, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[321, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[322, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[323, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[324, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[325, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[326, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[327, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[328, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[329, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[330, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[331, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[332, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[333, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[335, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[336, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[337, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[338, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[339, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[340, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[341, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[342, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[343, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[344, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[352, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[346, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[347, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[348, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[349, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[350, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[351, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[353, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[354, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[355, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[356, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[357, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[358, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[359, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[360, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[361, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[363, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[371, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[364, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[365, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[366, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[367, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[368, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[369, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[370, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[372, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[373, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[374, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[375, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[376, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[377, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[378, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[379, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[380, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[383, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[381, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[382, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[384, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[385, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[386, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils": [[389, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.constants": [[387, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[388, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils.model": [[390, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[391, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.utility": [[392, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch": [[440, "module-neural_compressor.torch"]], "neural_compressor.torch.algorithms": [[398, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.base_algorithm": [[393, "module-neural_compressor.torch.algorithms.base_algorithm"]], "neural_compressor.torch.algorithms.fp8_quant.observer": [[394, "module-neural_compressor.torch.algorithms.fp8_quant.observer"]], "neural_compressor.torch.algorithms.fp8_quant.patched_module_base": [[395, "module-neural_compressor.torch.algorithms.fp8_quant.patched_module_base"]], "neural_compressor.torch.algorithms.fp8_quant.scaling_method_base": [[396, "module-neural_compressor.torch.algorithms.fp8_quant.scaling_method_base"]], "neural_compressor.torch.algorithms.fp8_quant.utils.logger": [[397, "module-neural_compressor.torch.algorithms.fp8_quant.utils.logger"]], "neural_compressor.torch.algorithms.layer_wise": [[399, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[400, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[401, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[402, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.mixed_precision": [[404, "module-neural_compressor.torch.algorithms.mixed_precision"]], "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert": [[403, "module-neural_compressor.torch.algorithms.mixed_precision.half_precision_convert"]], "neural_compressor.torch.algorithms.mixed_precision.module_wrappers": [[405, "module-neural_compressor.torch.algorithms.mixed_precision.module_wrappers"]], "neural_compressor.torch.algorithms.mx_quant": [[406, "module-neural_compressor.torch.algorithms.mx_quant"]], "neural_compressor.torch.algorithms.mx_quant.mx": [[407, "module-neural_compressor.torch.algorithms.mx_quant.mx"]], "neural_compressor.torch.algorithms.mx_quant.utils": [[408, "module-neural_compressor.torch.algorithms.mx_quant.utils"]], "neural_compressor.torch.algorithms.pt2e_quant": [[411, "module-neural_compressor.torch.algorithms.pt2e_quant"]], "neural_compressor.torch.algorithms.pt2e_quant.core": [[409, "module-neural_compressor.torch.algorithms.pt2e_quant.core"]], "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter": [[410, "module-neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter"]], "neural_compressor.torch.algorithms.pt2e_quant.save_load": [[412, "module-neural_compressor.torch.algorithms.pt2e_quant.save_load"]], "neural_compressor.torch.algorithms.pt2e_quant.utility": [[413, "module-neural_compressor.torch.algorithms.pt2e_quant.utility"]], "neural_compressor.torch.algorithms.smooth_quant": [[414, "module-neural_compressor.torch.algorithms.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[415, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[416, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[417, "module-neural_compressor.torch.algorithms.smooth_quant.utility"]], "neural_compressor.torch.algorithms.static_quant": [[418, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.save_load": [[419, "module-neural_compressor.torch.algorithms.static_quant.save_load"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[420, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "neural_compressor.torch.algorithms.static_quant.utility": [[421, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "neural_compressor.torch.algorithms.weight_only": [[432, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[422, "module-neural_compressor.torch.algorithms.weight_only.autoround"]], "neural_compressor.torch.algorithms.weight_only.awq": [[423, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[424, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[428, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[425, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[426, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[427, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[429, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[430, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[431, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "neural_compressor.torch.algorithms.weight_only.modules": [[433, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[434, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only.save_load": [[435, "module-neural_compressor.torch.algorithms.weight_only.save_load"]], "neural_compressor.torch.algorithms.weight_only.teq": [[436, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "neural_compressor.torch.algorithms.weight_only.utility": [[437, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "neural_compressor.torch.export": [[438, "module-neural_compressor.torch.export"]], "neural_compressor.torch.export.pt2e_export": [[439, "module-neural_compressor.torch.export.pt2e_export"]], "neural_compressor.torch.quantization": [[444, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.algorithm_entry": [[441, "module-neural_compressor.torch.quantization.algorithm_entry"]], "neural_compressor.torch.quantization.autotune": [[442, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[443, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization.quantize": [[445, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.quantization.save_load_entry": [[446, "module-neural_compressor.torch.quantization.save_load_entry"]], "neural_compressor.torch.utils": [[452, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.auto_accelerator": [[447, "module-neural_compressor.torch.utils.auto_accelerator"]], "neural_compressor.torch.utils.bit_packer": [[448, "module-neural_compressor.torch.utils.bit_packer"]], "neural_compressor.torch.utils.block_wise": [[449, "module-neural_compressor.torch.utils.block_wise"]], "neural_compressor.torch.utils.constants": [[450, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[451, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils.utility": [[453, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[454, "module-neural_compressor.training"]], "neural_compressor.transformers.quantization.utils": [[455, "module-neural_compressor.transformers.quantization.utils"]], "neural_compressor.transformers.utils": [[456, "module-neural_compressor.transformers.utils"]], "neural_compressor.transformers.utils.quantization_config": [[457, "module-neural_compressor.transformers.utils.quantization_config"]], "neural_compressor.utils": [[465, "module-neural_compressor.utils"]], "neural_compressor.utils.collect_layer_histogram": [[458, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[459, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[460, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[461, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[462, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[463, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[464, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils.kl_divergence": [[466, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[467, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[468, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[469, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[470, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[471, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[472, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[473, "module-neural_compressor.version"]], "}": [[145, "id3"]]}, "docnames": ["autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/benchmark/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/save_load/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/common/version/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/keras/index", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/index", "autoapi/neural_compressor/tensorflow/keras/layers/layer_initializer/index", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index", "autoapi/neural_compressor/tensorflow/keras/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/autotune/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/algorithms/base_algorithm/index", "autoapi/neural_compressor/torch/algorithms/fp8_quant/observer/index", "autoapi/neural_compressor/torch/algorithms/fp8_quant/patched_module_base/index", "autoapi/neural_compressor/torch/algorithms/fp8_quant/scaling_method_base/index", "autoapi/neural_compressor/torch/algorithms/fp8_quant/utils/logger/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/mixed_precision/half_precision_convert/index", "autoapi/neural_compressor/torch/algorithms/mixed_precision/index", "autoapi/neural_compressor/torch/algorithms/mixed_precision/module_wrappers/index", "autoapi/neural_compressor/torch/algorithms/mx_quant/index", "autoapi/neural_compressor/torch/algorithms/mx_quant/mx/index", "autoapi/neural_compressor/torch/algorithms/mx_quant/utils/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/core/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/half_precision_rewriter/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/smooth_quant/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/autoround/index", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only/save_load/index", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index", "autoapi/neural_compressor/torch/export/index", "autoapi/neural_compressor/torch/export/pt2e_export/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/quantization/save_load_entry/index", "autoapi/neural_compressor/torch/utils/auto_accelerator/index", "autoapi/neural_compressor/torch/utils/bit_packer/index", "autoapi/neural_compressor/torch/utils/block_wise/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/environ/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/transformers/quantization/utils/index", "autoapi/neural_compressor/transformers/utils/index", "autoapi/neural_compressor/transformers/utils/quantization_config/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/2x_user_guide", "docs/source/3x/PT_DynamicQuant", "docs/source/3x/PT_FP8Quant", "docs/source/3x/PT_MXQuant", "docs/source/3x/PT_MixedPrecision", "docs/source/3x/PT_SmoothQuant", "docs/source/3x/PT_StaticQuant", "docs/source/3x/PT_WeightOnlyQuant", "docs/source/3x/PyTorch", "docs/source/3x/TF_Quant", "docs/source/3x/TF_SQ", "docs/source/3x/TensorFlow", "docs/source/3x/autotune", "docs/source/3x/benchmark", "docs/source/3x/client_quant", "docs/source/3x/design", "docs/source/3x/gaudi_version_map", "docs/source/3x/llm_recipes", "docs/source/3x/quantization", "docs/source/3x/transformers_like_api", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_2", "docs/source/api-doc/api_3", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/tf_quantization_autotune", "docs/source/api-doc/tf_quantization_common", "docs/source/api-doc/tf_quantization_config", "docs/source/api-doc/torch_quantization_autotune", "docs/source/api-doc/torch_quantization_common", "docs/source/api-doc/torch_quantization_config", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/design", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/validated_model_list", "index"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/benchmark/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/save_load/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/common/version/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/keras/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/layer_initializer/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/autotune/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/base_algorithm/index.rst", "autoapi/neural_compressor/torch/algorithms/fp8_quant/observer/index.rst", "autoapi/neural_compressor/torch/algorithms/fp8_quant/patched_module_base/index.rst", "autoapi/neural_compressor/torch/algorithms/fp8_quant/scaling_method_base/index.rst", "autoapi/neural_compressor/torch/algorithms/fp8_quant/utils/logger/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/mixed_precision/half_precision_convert/index.rst", "autoapi/neural_compressor/torch/algorithms/mixed_precision/index.rst", "autoapi/neural_compressor/torch/algorithms/mixed_precision/module_wrappers/index.rst", "autoapi/neural_compressor/torch/algorithms/mx_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/mx_quant/mx/index.rst", "autoapi/neural_compressor/torch/algorithms/mx_quant/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/core/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/half_precision_rewriter/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/smooth_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/autoround/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/torch/export/index.rst", "autoapi/neural_compressor/torch/export/pt2e_export/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/quantization/save_load_entry/index.rst", "autoapi/neural_compressor/torch/utils/auto_accelerator/index.rst", "autoapi/neural_compressor/torch/utils/bit_packer/index.rst", "autoapi/neural_compressor/torch/utils/block_wise/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/environ/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/transformers/quantization/utils/index.rst", "autoapi/neural_compressor/transformers/utils/index.rst", "autoapi/neural_compressor/transformers/utils/quantization_config/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/2x_user_guide.md", "docs/source/3x/PT_DynamicQuant.md", "docs/source/3x/PT_FP8Quant.md", "docs/source/3x/PT_MXQuant.md", "docs/source/3x/PT_MixedPrecision.md", "docs/source/3x/PT_SmoothQuant.md", "docs/source/3x/PT_StaticQuant.md", "docs/source/3x/PT_WeightOnlyQuant.md", "docs/source/3x/PyTorch.md", "docs/source/3x/TF_Quant.md", "docs/source/3x/TF_SQ.md", "docs/source/3x/TensorFlow.md", "docs/source/3x/autotune.md", "docs/source/3x/benchmark.md", "docs/source/3x/client_quant.md", "docs/source/3x/design.md", "docs/source/3x/gaudi_version_map.md", "docs/source/3x/llm_recipes.md", "docs/source/3x/quantization.md", "docs/source/3x/transformers_like_api.md", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_2.rst", "docs/source/api-doc/api_3.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/tf_quantization_autotune.rst", "docs/source/api-doc/tf_quantization_common.rst", "docs/source/api-doc/tf_quantization_config.rst", "docs/source/api-doc/torch_quantization_autotune.rst", "docs/source/api-doc/torch_quantization_common.rst", "docs/source/api-doc/torch_quantization_config.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/design.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/validated_model_list.md", "index.rst"], "indexentries": {"_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran", false]], "acceleratorregistry (class in neural_compressor.torch.utils.auto_accelerator)": [[447, "neural_compressor.torch.utils.auto_accelerator.AcceleratorRegistry", false]], "accuracy (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.Accuracy", false]], "accuracy (class in neural_compressor.objective)": [[246, "neural_compressor.objective.Accuracy", false]], "accuracycriterion (class in neural_compressor.config)": [[196, "neural_compressor.config.AccuracyCriterion", false]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[267, "neural_compressor.strategy.bayesian.acq_max", false]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[5, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator", false]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name", false]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[146, "neural_compressor.algorithm.algorithm.Algorithm", false]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[146, "neural_compressor.algorithm.algorithm.algorithm_registry", false]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[146, "neural_compressor.algorithm.algorithm.ALGORITHMS", false]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[146, "neural_compressor.algorithm.algorithm.AlgorithmScheduler", false]], "alias_param() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.alias_param", false]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.AlignImageChannelTransform", false]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[190, "neural_compressor.compression.pruner.regs.GroupLasso.alpha", false]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.amp_convert", false]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.append_attr", false]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip", false]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale", false]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.apply_inlining", false]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining", false]], "apply_single_pattern_pair() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.apply_single_pattern_pair", false]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal", false]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[6, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator", false]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error", false]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[7, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator", false]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[282, "neural_compressor.template.api_doc_example.ExampleClass.attr1", false]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[282, "neural_compressor.template.api_doc_example.ExampleClass.attr2", false]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[282, "neural_compressor.template.api_doc_example.ExampleClass.attr5", false]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[282, "neural_compressor.template.api_doc_example.attribute1", false]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg", false]], "auto_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[447, "neural_compressor.torch.utils.auto_accelerator.Auto_Accelerator", false]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.auto_copy", false]], "auto_detect_accelerator() (in module neural_compressor.torch.utils.auto_accelerator)": [[447, "neural_compressor.torch.utils.auto_accelerator.auto_detect_accelerator", false]], "autoalpha (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.AutoAlpha", false]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[265, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy", false]], "autoround_quantize_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.autoround_quantize_entry", false]], "autoroundconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.AutoRoundConfig", false]], "autoroundconfig (class in neural_compressor.transformers.utils.quantization_config)": [[457, "neural_compressor.transformers.utils.quantization_config.AutoRoundConfig", false]], "autoroundquantizer (class in neural_compressor.torch.algorithms.weight_only.autoround)": [[422, "neural_compressor.torch.algorithms.weight_only.autoround.AutoRoundQuantizer", false]], "autotune() (in module neural_compressor.tensorflow.quantization.autotune)": [[303, "neural_compressor.tensorflow.quantization.autotune.autotune", false]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[442, "neural_compressor.torch.quantization.autotune.autotune", false]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[264, "neural_compressor.strategy.auto.AutoTuneStrategy", false]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize", false]], "awq_quantize_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.awq_quantize_entry", false]], "awqconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.AWQConfig", false]], "awqconfig (class in neural_compressor.transformers.utils.quantization_config)": [[457, "neural_compressor.transformers.utils.quantization_config.AwqConfig", false]], "awqquantizer (class in neural_compressor.torch.algorithms.weight_only.awq)": [[423, "neural_compressor.torch.algorithms.weight_only.awq.AWQQuantizer", false]], "axis (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[430, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.axis", false]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[163, "neural_compressor.compression.callbacks.BaseCallbacks", false]], "baseconfig (class in neural_compressor.common.base_config)": [[152, "neural_compressor.common.base_config.BaseConfig", false]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[201, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader", false]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[388, "neural_compressor.tensorflow.utils.data.BaseDataLoader", false]], "basemetric (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.BaseMetric", false]], "basemodel (class in neural_compressor.model.base_model)": [[237, "neural_compressor.model.base_model.BaseModel", false]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel", false]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern", false]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner", false]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[189, "neural_compressor.compression.pruner.pruning.BasePruning", false]], "basereg (class in neural_compressor.compression.pruner.regs)": [[190, "neural_compressor.compression.pruner.regs.BaseReg", false]], "basetransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.BaseTransform", false]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[189, "neural_compressor.compression.pruner.pruning.BasicPruning", false]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[225, "neural_compressor.data.transforms.tokenization.BasicTokenizer", false]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[266, "neural_compressor.strategy.basic.BasicTuneStrategy", false]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[20, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator", false]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[208, "neural_compressor.data.dataloaders.sampler.BatchSampler", false]], "batchsampler (class in neural_compressor.tensorflow.utils.data)": [[388, "neural_compressor.tensorflow.utils.data.BatchSampler", false]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[267, "neural_compressor.strategy.bayesian.BayesianOptimization", false]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[267, "neural_compressor.strategy.bayesian.BayesianTuneStrategy", false]], "benchmark() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.benchmark", false]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.benchmark_with_raw_cmd", false]], "benchmarkconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.BenchmarkConfig", false]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model", false]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score", false]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[35, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert", false]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[308, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert", false]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[134, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper", false]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[128, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection", false]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[381, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection", false]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform", false]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[8, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator", false]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[8, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator", false]], "bleu (class in neural_compressor.metric.bleu)": [[228, "neural_compressor.metric.bleu.BLEU", false]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[228, "neural_compressor.metric.bleu.bleu_tokenize", false]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[180, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size", false]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[180, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size", false]], "block_wise_calibration() (in module neural_compressor.torch.utils.block_wise)": [[449, "neural_compressor.torch.utils.block_wise.block_wise_calibration", false]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler", false]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion", false]], "build_captured_dataloader() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.build_captured_dataloader", false]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[281, "neural_compressor.strategy.utils.utility.build_slave_faker_model", false]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[325, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[326, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape", false]], "cal_scale() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.cal_scale", false]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.calculate_md5", false]], "calculate_mse() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.calculate_mse", false]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max", false]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp", false]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.calib_model", false]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[3, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry", false]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector", false]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.CalibData", false]], "calibration (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.Calibration", false]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.calibration", false]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[3, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase", false]], "call_counter() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.call_counter", false]], "call_one() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.call_one", false]], "callbacks (class in neural_compressor.training)": [[454, "neural_compressor.training.CallBacks", false]], "can_pack_with_numba() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.can_pack_with_numba", false]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile", false]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.CaptureOutputToFile", false]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.cast_tensor", false]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.CastONNXTransform", false]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.CastPyTorchTransform", false]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.CastTFTransform", false]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.CenterCropTFTransform", false]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.CenterCropTransform", false]], "cfg_to_qconfig() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.cfg_to_qconfig", false]], "cfg_to_qconfig() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.cfg_to_qconfig", false]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig", false]], "check_cfg_and_qconfig() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.check_cfg_and_qconfig", false]], "check_cfg_and_qconfig() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.check_cfg_and_qconfig", false]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.check_config", false]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[202, "neural_compressor.data.dataloaders.dataloader.check_dataloader", false]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.check_integrity", false]], "check_key_exist() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.check_key_exist", false]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.check_key_validity", false]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[462, "neural_compressor.utils.export.qlinear2qdq.check_model", false]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version", false]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.checkpoint_session", false]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session", false]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.CIFAR10", false]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.CIFAR100", false]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher", false]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF", false]], "classregister (class in neural_compressor.strategy.utils.utility)": [[281, "neural_compressor.strategy.utils.utility.ClassRegister", false]], "clean_module_weight() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.clean_module_weight", false]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[231, "neural_compressor.metric.coco_tools.COCOEvalWrapper", false]], "cocomapv2 (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.COCOmAPv2", false]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[211, "neural_compressor.data.datasets.coco_dataset.COCONpy", false]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[211, "neural_compressor.data.datasets.coco_dataset.COCORaw", false]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[211, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset", false]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[231, "neural_compressor.metric.coco_tools.COCOWrapper", false]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.collate_preds", false]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds", false]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds", false]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds", false]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.collect_layer_inputs", false]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.collect_weight_info", false]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase", false]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.CollectTransform", false]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities", false]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.combine_histogram", false]], "combine_histogram() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.combine_histogram", false]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[235, "neural_compressor.metric.metric.MAE.compare_label", false]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[235, "neural_compressor.metric.metric.MSE.compare_label", false]], "compare_objects() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.compare_objects", false]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[135, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights", false]], "composableconfig (class in neural_compressor.common.base_config)": [[152, "neural_compressor.common.base_config.ComposableConfig", false]], "composetransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ComposeTransform", false]], "compressionmanager (class in neural_compressor.training)": [[454, "neural_compressor.training.CompressionManager", false]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[229, "neural_compressor.metric.bleu_util.compute_bleu", false]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf", false]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.compute_sparsity", false]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[9, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator", false]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.config", false]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config", false]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config", false]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.config", false]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config", false]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config", false]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[191, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config", false]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path", false]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path", false]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path", false]], "config_instance() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.config_instance", false]], "config_list (neural_compressor.common.base_config.composableconfig attribute)": [[152, "neural_compressor.common.base_config.ComposableConfig.config_list", false]], "config_list (neural_compressor.common.base_tuning.configset attribute)": [[153, "neural_compressor.common.base_tuning.ConfigSet.config_list", false]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[103, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers", false]], "configloader (class in neural_compressor.common.base_tuning)": [[153, "neural_compressor.common.base_tuning.ConfigLoader", false]], "configregistry (class in neural_compressor.common.base_config)": [[152, "neural_compressor.common.base_config.ConfigRegistry", false]], "configset (class in neural_compressor.common.base_tuning)": [[153, "neural_compressor.common.base_tuning.ConfigSet", false]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[268, "neural_compressor.strategy.conservative.ConservativeTuneStrategy", false]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def", false]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def", false]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[134, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert", false]], "convert() (in module neural_compressor.torch.quantization.quantize)": [[445, "neural_compressor.torch.quantization.quantize.convert", false]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[225, "neural_compressor.data.transforms.tokenization.convert_by_vocab", false]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[210, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.convert_examples_to_features", false]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx", false]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[225, "neural_compressor.data.transforms.tokenization.convert_to_unicode", false]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[38, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer", false]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[311, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer", false]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[39, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer", false]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[312, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer", false]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[40, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer", false]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[313, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer", false]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[41, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom", false]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[314, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom", false]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[42, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst", false]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[315, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst", false]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[10, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator", false]], "cpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[447, "neural_compressor.torch.utils.auto_accelerator.CPU_Accelerator", false]], "cpuinfo (class in neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.CpuInfo", false]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.CpuInfo", false]], "cpuinfo (class in neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.CpuInfo", false]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.create_data_example", false]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[460, "neural_compressor.utils.create_obj_from_config.create_dataloader", false]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[460, "neural_compressor.utils.create_obj_from_config.create_dataset", false]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[460, "neural_compressor.utils.create_obj_from_config.create_eval_func", false]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[258, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config", false]], "create_quant_spec_from_config() (in module neural_compressor.torch.algorithms.pt2e_quant.utility)": [[413, "neural_compressor.torch.algorithms.pt2e_quant.utility.create_quant_spec_from_config", false]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[262, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config", false]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[460, "neural_compressor.utils.create_obj_from_config.create_train_func", false]], "create_xiq_quantizer_from_pt2e_config() (in module neural_compressor.torch.algorithms.pt2e_quant.utility)": [[413, "neural_compressor.torch.algorithms.pt2e_quant.utility.create_xiq_quantizer_from_pt2e_config", false]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion", false]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.criterion_registry", false]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.Criterions", false]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.CropResizeTFTransform", false]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.CropResizeTransform", false]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.CropToBoundingBox", false]], "cuda_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[447, "neural_compressor.torch.utils.auto_accelerator.CUDA_Accelerator", false]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio", false]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader", false]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[202, "neural_compressor.data.dataloaders.dataloader.DataLoader", false]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap", false]], "dataset (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.Dataset", false]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[231, "neural_compressor.metric.coco_tools.COCOWrapper.dataset", false]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.dataset_registry", false]], "datasets (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.Datasets", false]], "debug() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.debug", false]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.deep_get", false]], "deep_get() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.deep_get", false]], "deep_set() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.deep_set", false]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[203, "neural_compressor.data.dataloaders.default_dataloader.default_collate", false]], "default_collate() (in module neural_compressor.tensorflow.utils.data)": [[388, "neural_compressor.tensorflow.utils.data.default_collate", false]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[203, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader", false]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[262, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign", false]], "dequantize() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.Dequantize", false]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.dequantize_data", false]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero", false]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.dequantize_weight", false]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[36, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer", false]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[309, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer", false]], "detect_device() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.detect_device", false]], "detect_processor_type_based_on_hw() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.detect_processor_type_based_on_hw", false]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[231, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device", false]], "device_synchronize() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.device_synchronize", false]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[43, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction", false]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[316, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction", false]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[11, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator", false]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.disable_random", false]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.disable_random", false]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks", false]], "distillationconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.DistillationConfig", false]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors", false]], "dotdict (class in neural_compressor.config)": [[196, "neural_compressor.config.DotDict", false]], "dotdict (class in neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.DotDict", false]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model", false]], "dowload_hf_model() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.dowload_hf_model", false]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.download_url", false]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.dtype_to_name", false]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[213, "neural_compressor.data.datasets.dummy_dataset.DummyDataset", false]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[214, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset", false]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[388, "neural_compressor.tensorflow.utils.data.DummyDataset", false]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[388, "neural_compressor.tensorflow.utils.data.DummyDatasetV2", false]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.dump_class_attrs", false]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.dump_data_to_local", false]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.dump_elapsed_time", false]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time", false]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.dump_elapsed_time", false]], "dump_model_op_stats() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.dump_model_op_stats", false]], "dump_model_op_stats() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.dump_model_op_stats", false]], "dump_model_op_stats() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.dump_model_op_stats", false]], "dump_numa_info() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.dump_numa_info", false]], "dump_table() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.dump_table", false]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.dump_table_to_csv", false]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[464, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export", false]], "dynamicquantconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.DynamicQuantConfig", false]], "elemformat (class in neural_compressor.torch.algorithms.mx_quant.utils)": [[408, "neural_compressor.torch.algorithms.mx_quant.utils.ElemFormat", false]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[12, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator", false]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step", false]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step", false]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step", false]], "enough_memo_store_scale() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.enough_memo_store_scale", false]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.ensure_list", false]], "equal_dicts() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.equal_dicts", false]], "error() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.error", false]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.estimator_session", false]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session", false]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency", false]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[232, "neural_compressor.metric.evaluate_squad.evaluate", false]], "evaluate() (in module neural_compressor.metric.f1)": [[233, "neural_compressor.metric.f1.evaluate", false]], "evaluationfuncwrapper (class in neural_compressor.common.base_tuning)": [[153, "neural_compressor.common.base_tuning.EvaluationFuncWrapper", false]], "evaluator (class in neural_compressor.common.base_tuning)": [[153, "neural_compressor.common.base_tuning.Evaluator", false]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[232, "neural_compressor.metric.evaluate_squad.exact_match_score", false]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[282, "neural_compressor.template.api_doc_example.ExampleClass", false]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[269, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy", false]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[45, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer", false]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[318, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer", false]], "export() (in module neural_compressor.torch.export.pt2e_export)": [[439, "neural_compressor.torch.export.pt2e_export.export", false]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[467, "neural_compressor.utils.load_huggingface.export_compressed_model", false]], "export_model_for_pt2e_quant() (in module neural_compressor.torch.export.pt2e_export)": [[439, "neural_compressor.torch.export.pt2e_export.export_model_for_pt2e_quant", false]], "exportconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.ExportConfig", false]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[231, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco", false]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[231, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco", false]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[231, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco", false]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[281, "neural_compressor.strategy.utils.utility.extract_data_type", false]], "f1 (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.F1", false]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[232, "neural_compressor.metric.evaluate_squad.f1_score", false]], "f1_score() (in module neural_compressor.metric.f1)": [[233, "neural_compressor.metric.f1.f1_score", false]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[142, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction", false]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[433, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction", false]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[98, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize", false]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[98, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase", false]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler", false]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.FashionMNIST", false]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[147, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection", false]], "fatal() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.fatal", false]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.fault_tolerant_file", false]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.fetch_module", false]], "fetch_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.fetch_module", false]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.fetch_module", false]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[204, "neural_compressor.data.dataloaders.fetcher.Fetcher", false]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer", false]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[319, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer", false]], "filter (class in neural_compressor.data.filters.filter)": [[219, "neural_compressor.data.filters.filter.Filter", false]], "filter_fn() (in module neural_compressor.torch.algorithms.weight_only.hqq.quantizer)": [[431, "neural_compressor.torch.algorithms.weight_only.hqq.quantizer.filter_fn", false]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[219, "neural_compressor.data.filters.filter.filter_registry", false]], "filters (class in neural_compressor.data.filters.filter)": [[219, "neural_compressor.data.filters.filter.FILTERS", false]], "finalize_calibration() (in module neural_compressor.torch.quantization.quantize)": [[445, "neural_compressor.torch.quantization.quantize.finalize_calibration", false]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.find_by_name", false]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[195, "neural_compressor.compression.pruner.wanda.utils.find_layers", false]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[424, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers", false]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[424, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name", false]], "find_matching_blocks() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.find_matching_blocks", false]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset", false]], "fit() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.fit", false]], "fit() (in module neural_compressor.mix_precision)": [[236, "neural_compressor.mix_precision.fit", false]], "fit() (in module neural_compressor.quantization)": [[263, "neural_compressor.quantization.fit", false]], "fit() (in module neural_compressor.training)": [[454, "neural_compressor.training.fit", false]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def", false]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph", false]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[5, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator", false]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[8, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator", false]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16", false]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.float_to_float16", false]], "fn (neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.patternpair attribute)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair.fn", false]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer", false]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[320, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer", false]], "footprint (class in neural_compressor.objective)": [[246, "neural_compressor.objective.Footprint", false]], "format_list2str() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.format_list2str", false]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.forward_wrapper", false]], "forward_wrapper() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.forward_wrapper", false]], "forward_wrapper() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.forward_wrapper", false]], "forward_wrapper() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.forward_wrapper", false]], "fp8_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.fp8_entry", false]], "fp8config (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.FP8Config", false]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.framework_datasets", false]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer", false]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[346, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer", false]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer", false]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[347, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer", false]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer", false]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.frozen_pb_session", false]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session", false]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[225, "neural_compressor.data.transforms.tokenization.FullTokenizer", false]], "function1() (in module neural_compressor.template.api_doc_example)": [[282, "neural_compressor.template.api_doc_example.function1", false]], "function2() (in module neural_compressor.template.api_doc_example)": [[282, "neural_compressor.template.api_doc_example.function2", false]], "function3() (in module neural_compressor.template.api_doc_example)": [[282, "neural_compressor.template.api_doc_example.function3", false]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.fuse", false]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer", false]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[322, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer", false]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer", false]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[323, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer", false]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer", false]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[348, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer", false]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer", false]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[349, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer", false]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer", false]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[324, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer", false]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer", false]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[325, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer", false]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer", false]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[326, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer", false]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[18, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator", false]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer", false]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[327, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer", false]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer", false]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[328, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer", false]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer", false]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[350, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer", false]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer", false]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[351, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer", false]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer", false]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[351, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer", false]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer", false]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[351, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer", false]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer", false]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[351, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer", false]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[365, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[375, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[366, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[376, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d", false]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[367, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[364, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[374, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm", false]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[368, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm", false]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[369, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[378, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[370, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[379, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling", false]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer", false]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[329, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer", false]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer", false]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[330, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer", false]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer", false]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[331, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer", false]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[13, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator", false]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[15, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator", false]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.gen_bar_updater", false]], "generaltopk (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.GeneralTopK", false]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer", false]], "generate_activation_observer() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.generate_activation_observer", false]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict", false]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict", false]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config", false]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config", false]], "generate_prefix() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.generate_prefix", false]], "generate_prefix() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.generate_prefix", false]], "generate_xpu_qconfig() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.generate_xpu_qconfig", false]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern", false]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[358, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern", false]], "generator1() (in module neural_compressor.template.api_doc_example)": [[282, "neural_compressor.template.api_doc_example.generator1", false]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers", false]], "get_absorb_layers() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.get_absorb_layers", false]], "get_accelerator() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.get_accelerator", false]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[167, "neural_compressor.compression.distillation.utility.get_activation", false]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[281, "neural_compressor.strategy.utils.utility.get_adaptor_name", false]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[460, "neural_compressor.utils.create_obj_from_config.get_algorithm", false]], "get_all_config_set() (in module neural_compressor.tensorflow.quantization.autotune)": [[303, "neural_compressor.tensorflow.quantization.autotune.get_all_config_set", false]], "get_all_config_set() (in module neural_compressor.torch.quantization.autotune)": [[442, "neural_compressor.torch.quantization.autotune.get_all_config_set", false]], "get_all_config_set_from_config_registry() (in module neural_compressor.common.base_config)": [[152, "neural_compressor.common.base_config.get_all_config_set_from_config_registry", false]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data", false]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.get_all_fp32_data", false]], "get_all_registered_configs() (in module neural_compressor.tensorflow.keras.quantization.config)": [[300, "neural_compressor.tensorflow.keras.quantization.config.get_all_registered_configs", false]], "get_all_registered_configs() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_all_registered_configs", false]], "get_architecture() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.get_architecture", false]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes", false]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size", false]], "get_block_names() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_block_names", false]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_block_prefix", false]], "get_block_prefix() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.get_block_prefix", false]], "get_block_prefix() (in module neural_compressor.torch.utils.block_wise)": [[449, "neural_compressor.torch.utils.block_wise.get_block_prefix", false]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.get_bounded_threads", false]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children", false]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.get_children", false]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module", false]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[325, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[326, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count", false]], "get_core_ids() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.get_core_ids", false]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.get_criterion", false]], "get_dataloader() (in module neural_compressor.torch.algorithms.weight_only.autoround)": [[422, "neural_compressor.torch.algorithms.weight_only.autoround.get_dataloader", false]], "get_default_autoround_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_AutoRound_config", false]], "get_default_awq_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_awq_config", false]], "get_default_double_quant_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_double_quant_config", false]], "get_default_dynamic_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_dynamic_config", false]], "get_default_fp8_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_fp8_config", false]], "get_default_fp8_config_set() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_fp8_config_set", false]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_gptq_config", false]], "get_default_hqq_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_hqq_config", false]], "get_default_mixed_precision_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_mixed_precision_config", false]], "get_default_mixed_precision_config_set() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_mixed_precision_config_set", false]], "get_default_mx_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_mx_config", false]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_rtn_config", false]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[304, "neural_compressor.tensorflow.quantization.config.get_default_sq_config", false]], "get_default_sq_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_sq_config", false]], "get_default_static_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_static_config", false]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.keras.quantization.config)": [[300, "neural_compressor.tensorflow.keras.quantization.config.get_default_static_quant_config", false]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[304, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config", false]], "get_default_teq_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_default_teq_config", false]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_depth", false]], "get_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.get_depth", false]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth", false]], "get_dict_at_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.get_dict_at_depth", false]], "get_double_quant_config_dict() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_double_quant_config_dict", false]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth", false]], "get_element_under_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.get_element_under_depth", false]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous", false]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph", false]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_example_input", false]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_fallback_order", false]], "get_filter_fn() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.get_filter_fn", false]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.get_final_text", false]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name", false]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[460, "neural_compressor.utils.create_obj_from_config.get_func_from_config", false]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.get_graph_def", false]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def", false]], "get_half_precision_node_set() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.get_half_precision_node_set", false]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_hidden_states", false]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape", false]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names", false]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names", false]], "get_ipex_version() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.get_ipex_version", false]], "get_layer_names_in_block() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_layer_names_in_block", false]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.get_layers", false]], "get_linux_numa_info() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.get_linux_numa_info", false]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version", false]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[460, "neural_compressor.utils.create_obj_from_config.get_metrics", false]], "get_mllm_dataloader() (in module neural_compressor.torch.algorithms.weight_only.autoround)": [[422, "neural_compressor.torch.algorithms.weight_only.autoround.get_mllm_dataloader", false]], "get_model_device() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_model_device", false]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[240, "neural_compressor.model.model.get_model_fwk_name", false]], "get_model_info() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_model_info", false]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape", false]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape", false]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.get_model_type", false]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type", false]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module", false]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.get_module", false]], "get_module() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.get_module", false]], "get_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.get_module", false]], "get_module() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_module", false]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_module_input_output", false]], "get_module_input_output() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.get_module_input_output", false]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32", false]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8", false]], "get_multimodal_block_names() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_multimodal_block_names", false]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children", false]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children", false]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[464, "neural_compressor.utils.export.torch2onnx.get_node_mapping", false]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.get_node_original_name", false]], "get_non_persistent_buffers() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_non_persistent_buffers", false]], "get_numa_node() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.get_numa_node", false]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.get_number_of_sockets", false]], "get_op_list() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.get_op_list", false]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name", false]], "get_parent() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.get_parent", false]], "get_parent() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.get_parent", false]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[177, "neural_compressor.compression.pruner.patterns.get_pattern", false]], "get_physical_ids() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.get_physical_ids", false]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[460, "neural_compressor.utils.create_obj_from_config.get_postprocess", false]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[460, "neural_compressor.utils.create_obj_from_config.get_preprocess", false]], "get_processor_type_from_user_config() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_processor_type_from_user_config", false]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[184, "neural_compressor.compression.pruner.pruners.get_pruner", false]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[29, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output", false]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[464, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops", false]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs", false]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_from_cfgs", false]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.get_quantizable_ops_recursively", false]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_recursively", false]], "get_quantizer() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.get_quantizer", false]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[190, "neural_compressor.compression.pruner.regs.get_reg", false]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[190, "neural_compressor.compression.pruner.regs.get_reg_type", false]], "get_reversed_numa_info() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.get_reversed_numa_info", false]], "get_rtn_double_quant_config_set() (in module neural_compressor.torch.quantization.autotune)": [[442, "neural_compressor.torch.quantization.autotune.get_rtn_double_quant_config_set", false]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[191, "neural_compressor.compression.pruner.schedulers.get_scheduler", false]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema", false]], "get_size() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.get_size", false]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.get_sparsity_ratio", false]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf", false]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx", false]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name", false]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name", false]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name", false]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name", false]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram", false]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.get_tensor_histogram", false]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node", false]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr", false]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr", false]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data", false]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape", false]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.get_tensors_info", false]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[192, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion", false]], "get_tf_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.get_tf_model_type", false]], "get_threads() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.get_threads", false]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.get_threads_per_core", false]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.get_torch_version", false]], "get_torch_version() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.get_torch_version", false]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.get_torchvision_map", false]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.get_tuning_history", false]], "get_unquantized_node_set() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.get_unquantized_node_set", false]], "get_used_cpu_mem_mb() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.get_used_cpu_mem_MB", false]], "get_used_hpu_mem_mb() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.get_used_hpu_mem_MB", false]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor", false]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale", false]], "get_weights_details() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.get_weights_details", false]], "get_windows_numa_info() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.get_windows_numa_info", false]], "get_woq_tuning_config() (in module neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.get_woq_tuning_config", false]], "get_workspace() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.get_workspace", false]], "global_state (class in neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.GLOBAL_STATE", false]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step", false]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step", false]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step", false]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[14, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator", false]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[424, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ", false]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.gptq", false]], "gptq_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.gptq_entry", false]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize", false]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.GPTQConfig", false]], "gptqconfig (class in neural_compressor.transformers.utils.quantization_config)": [[457, "neural_compressor.transformers.utils.quantization_config.GPTQConfig", false]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[424, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer", false]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.GradientCriterion", false]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.graph_def_session", false]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session", false]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.graph_session", false]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.graph_session", false]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[95, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer", false]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[361, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer", false]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[33, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter", false]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[307, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter", false]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[34, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib", false]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer", false]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[332, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer", false]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer", false]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[321, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer", false]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase", false]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[344, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase", false]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[95, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper", false]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[361, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper", false]], "graphtrace (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.GraphTrace", false]], "graphtrace (class in neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.GraphTrace", false]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[129, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase", false]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[382, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase", false]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer", false]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[333, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer", false]], "group_size (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[430, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.group_size", false]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[190, "neural_compressor.compression.pruner.regs.GroupLasso", false]], "halfprecisionconverter (class in neural_compressor.torch.algorithms.mixed_precision.half_precision_convert)": [[403, "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert.HalfPrecisionConverter", false]], "halfprecisionmodulewrapper (class in neural_compressor.torch.algorithms.mixed_precision.module_wrappers)": [[405, "neural_compressor.torch.algorithms.mixed_precision.module_wrappers.HalfPrecisionModuleWrapper", false]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[135, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top", false]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[270, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy", false]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks", false]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[135, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace", false]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[3, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector", false]], "hpoconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.HPOConfig", false]], "hpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[447, "neural_compressor.torch.utils.auto_accelerator.HPU_Accelerator", false]], "hpuweightonlylinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[433, "neural_compressor.torch.algorithms.weight_only.modules.HPUWeightOnlyLinear", false]], "hqq_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.hqq_entry", false]], "hqqconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.HQQConfig", false]], "hqqlinear (class in neural_compressor.torch.algorithms.weight_only.hqq.core)": [[427, "neural_compressor.torch.algorithms.weight_only.hqq.core.HQQLinear", false]], "hqqmoduleconfig (class in neural_compressor.torch.algorithms.weight_only.hqq.config)": [[426, "neural_compressor.torch.algorithms.weight_only.hqq.config.HQQModuleConfig", false]], "hqqtensorhandle (class in neural_compressor.torch.algorithms.weight_only.hqq.core)": [[427, "neural_compressor.torch.algorithms.weight_only.hqq.core.HQQTensorHandle", false]], "hqquantizer (class in neural_compressor.torch.algorithms.weight_only.hqq.quantizer)": [[431, "neural_compressor.torch.algorithms.weight_only.hqq.quantizer.HQQuantizer", false]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.ImageFolder", false]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[215, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw", false]], "incquantizationconfigmixin (class in neural_compressor.transformers.utils.quantization_config)": [[457, "neural_compressor.transformers.utils.quantization_config.INCQuantizationConfigMixin", false]], "incweightonlylinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[433, "neural_compressor.torch.algorithms.weight_only.modules.INCWeightOnlyLinear", false]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[204, "neural_compressor.data.dataloaders.fetcher.IndexFetcher", false]], "indexfetcher (class in neural_compressor.tensorflow.utils.data)": [[388, "neural_compressor.tensorflow.utils.data.IndexFetcher", false]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype", false]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.infer_shapes", false]], "info() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.info", false]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[101, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config", false]], "init_tuning() (in module neural_compressor.common.base_tuning)": [[153, "neural_compressor.common.base_tuning.init_tuning", false]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[279, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode", false]], "initialize_int8_avgpool() (in module neural_compressor.tensorflow.keras.layers.pool2d)": [[298, "neural_compressor.tensorflow.keras.layers.pool2d.initialize_int8_avgpool", false]], "initialize_int8_conv2d() (in module neural_compressor.tensorflow.keras.layers.conv2d)": [[293, "neural_compressor.tensorflow.keras.layers.conv2d.initialize_int8_conv2d", false]], "initialize_int8_dense() (in module neural_compressor.tensorflow.keras.layers.dense)": [[294, "neural_compressor.tensorflow.keras.layers.dense.initialize_int8_dense", false]], "initialize_int8_depthwise_conv2d() (in module neural_compressor.tensorflow.keras.layers.depthwise_conv2d)": [[295, "neural_compressor.tensorflow.keras.layers.depthwise_conv2d.initialize_int8_depthwise_conv2d", false]], "initialize_int8_maxpool() (in module neural_compressor.tensorflow.keras.layers.pool2d)": [[298, "neural_compressor.tensorflow.keras.layers.pool2d.initialize_int8_maxpool", false]], "initialize_int8_separable_conv2d() (in module neural_compressor.tensorflow.keras.layers.separable_conv2d)": [[299, "neural_compressor.tensorflow.keras.layers.separable_conv2d.initialize_int8_separable_conv2d", false]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter", false]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer", false]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[317, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer", false]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.input2tuple", false]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[210, "neural_compressor.data.datasets.bert_dataset.InputFeatures", false]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.InputFeatures", false]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[131, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging", false]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[384, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging", false]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode", false]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[335, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode", false]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse", false]], "int8staticquantconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.INT8StaticQuantConfig", false]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss", false]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers", false]], "ipexmodel (class in neural_compressor.model.torch_model)": [[245, "neural_compressor.model.torch_model.IPEXModel", false]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.is_B_transposed", false]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format", false]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format", false]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.is_fused_module", false]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global", false]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global", false]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global", false]], "is_hpex_available() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.is_hpex_available", false]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[470, "neural_compressor.utils.pytorch.is_int8_model", false]], "is_ipex_available() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.is_ipex_available", false]], "is_ipex_imported() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.is_ipex_imported", false]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[424, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf", false]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple", false]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized", false]], "is_numba_available() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.is_numba_available", false]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain", false]], "is_optimum_available() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.is_optimum_available", false]], "is_optimum_habana_available() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.is_optimum_habana_available", false]], "is_package_available() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.is_package_available", false]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format", false]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format", false]], "is_tbb_available() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.is_tbb_available", false]], "is_transformers_imported() (in module neural_compressor.torch.utils.environ)": [[451, "neural_compressor.torch.utils.environ.is_transformers_imported", false]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.isiterable", false]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.IterableDataset", false]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[204, "neural_compressor.data.dataloaders.fetcher.IterableFetcher", false]], "iterablefetcher (class in neural_compressor.tensorflow.utils.data)": [[388, "neural_compressor.tensorflow.utils.data.IterableFetcher", false]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[208, "neural_compressor.data.dataloaders.sampler.IterableSampler", false]], "iterablesampler (class in neural_compressor.tensorflow.utils.data)": [[388, "neural_compressor.tensorflow.utils.data.IterableSampler", false]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[191, "neural_compressor.compression.pruner.schedulers.IterativeScheduler", false]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run", false]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run", false]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.itex_installed", false]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher", false]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[235, "neural_compressor.metric.metric.GeneralTopK.k", false]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[235, "neural_compressor.metric.metric.TensorflowTopK.k", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers", false]], "keras (class in neural_compressor.config)": [[196, "neural_compressor.config.Keras", false]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.keras_session", false]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.keras_session", false]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[289, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor", false]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern", false]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner", false]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner", false]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[289, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter", false]], "kerasmodel (class in neural_compressor.model.keras_model)": [[239, "neural_compressor.model.keras_model.KerasModel", false]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel", false]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[180, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM", false]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[289, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery", false]], "kerassurgery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[289, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasSurgery", false]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[466, "neural_compressor.utils.kl_divergence.KL_Divergence", false]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[3, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator", false]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework", false]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss", false]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.KnowledgeDistillationLossConfig", false]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[235, "neural_compressor.metric.metric.Accuracy.label_list", false]], "label_list (neural_compressor.metric.metric.mae attribute)": [[235, "neural_compressor.metric.metric.MAE.label_list", false]], "label_list (neural_compressor.metric.metric.mse attribute)": [[235, "neural_compressor.metric.metric.MSE.label_list", false]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[218, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter", false]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[218, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter", false]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[228, "neural_compressor.metric.bleu.BLEU.labels", false]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.LabelShift", false]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1", false]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2", false]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[458, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector", false]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant", false]], "lazyimport (class in neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.LazyImport", false]], "lazyimport (class in neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.LazyImport", false]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher", false]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers", false]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns", false]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression", false]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator", false]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[140, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load", false]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[400, "neural_compressor.torch.algorithms.layer_wise.load.load", false]], "load() (in module neural_compressor.torch.algorithms.pt2e_quant.save_load)": [[412, "neural_compressor.torch.algorithms.pt2e_quant.save_load.load", false]], "load() (in module neural_compressor.torch.algorithms.static_quant.save_load)": [[419, "neural_compressor.torch.algorithms.static_quant.save_load.load", false]], "load() (in module neural_compressor.torch.algorithms.weight_only.save_load)": [[435, "neural_compressor.torch.algorithms.weight_only.save_load.load", false]], "load() (in module neural_compressor.torch.quantization.save_load_entry)": [[446, "neural_compressor.torch.quantization.save_load_entry.load", false]], "load() (in module neural_compressor.utils.pytorch)": [[470, "neural_compressor.utils.pytorch.load", false]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[210, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples", false]], "load_config_mapping() (in module neural_compressor.common.utils.save_load)": [[160, "neural_compressor.common.utils.save_load.load_config_mapping", false]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.load_data_from_pkl", false]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model", false]], "load_empty_model() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.load_empty_model", false]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model", false]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model", false]], "load_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.load_module", false]], "load_non_persistent_buffers() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.load_non_persistent_buffers", false]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.load_saved_model", false]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model", false]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor", false]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor", false]], "load_tensor_from_safetensors() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_safetensors", false]], "load_tensor_from_safetensors_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_safetensors_shard", false]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard", false]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard", false]], "load_value() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.load_value", false]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[225, "neural_compressor.data.transforms.tokenization.load_vocab", false]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[470, "neural_compressor.utils.pytorch.load_weight_only", false]], "log() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.log", false]], "log_process() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.log_process", false]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[424, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer", false]], "logger (class in neural_compressor.common.utils.logger)": [[159, "neural_compressor.common.utils.logger.Logger", false]], "logger (class in neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.Logger", false]], "loss (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.Loss", false]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler", false]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[17, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator", false]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[178, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M", false]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[179, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M", false]], "mae (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.MAE", false]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion", false]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[192, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion", false]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.make_dquant_node", false]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node", false]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.make_module", false]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model", false]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs", false]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape", false]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.make_quant_node", false]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[29, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph", false]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block", false]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype", false]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type", false]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype", false]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks", false]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks", false]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks", false]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern", false]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[18, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op", false]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[19, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator", false]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer", false]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[359, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer", false]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer", false]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[353, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer", false]], "metric (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.Metric", false]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[232, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[233, "neural_compressor.metric.f1.metric_max_over_ground_truths", false]], "metric_registry() (in module neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.metric_registry", false]], "metrics (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.METRICS", false]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[235, "neural_compressor.metric.metric.METRICS.metrics", false]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[235, "neural_compressor.metric.metric.MXNetMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[235, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[235, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[235, "neural_compressor.metric.metric.PyTorchMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[235, "neural_compressor.metric.metric.TensorflowMetrics.metrics", false]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions", false]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op", false]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[3, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator", false]], "miou (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.mIOU", false]], "mixed_precision_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.mixed_precision_entry", false]], "mixedprecisionconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.MixedPrecisionConfig", false]], "mixedprecisionconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.MixedPrecisionConfig", false]], "mnist (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.MNIST", false]], "mode (class in neural_compressor.common.utils.constants)": [[157, "neural_compressor.common.utils.constants.Mode", false]], "mode (class in neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.MODE", false]], "model (class in neural_compressor.model.model)": [[240, "neural_compressor.model.model.Model", false]], "model (class in neural_compressor.tensorflow.utils.model)": [[390, "neural_compressor.tensorflow.utils.model.Model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model", false]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.BasePruning.model", false]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.BasicPruning.model", false]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model", false]], "model_forward() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.model_forward", false]], "model_forward() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.model_forward", false]], "model_forward_per_sample() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.model_forward_per_sample", false]], "model_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[156, "neural_compressor.common.tuning_param.ParamLevel.MODEL_LEVEL", false]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim", false]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2", false]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha", false]], "modelsize (class in neural_compressor.objective)": [[246, "neural_compressor.objective.ModelSize", false]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler", false]], "module": [[0, "module-neural_compressor.adaptor.mxnet_utils", false], [1, "module-neural_compressor.adaptor.mxnet_utils.util", false], [2, "module-neural_compressor.adaptor.ox_utils.calibration", false], [3, "module-neural_compressor.adaptor.ox_utils.calibrator", false], [4, "module-neural_compressor.adaptor.ox_utils", false], [5, "module-neural_compressor.adaptor.ox_utils.operators.activation", false], [6, "module-neural_compressor.adaptor.ox_utils.operators.argmax", false], [7, "module-neural_compressor.adaptor.ox_utils.operators.attention", false], [8, "module-neural_compressor.adaptor.ox_utils.operators.binary_op", false], [9, "module-neural_compressor.adaptor.ox_utils.operators.concat", false], [10, "module-neural_compressor.adaptor.ox_utils.operators.conv", false], [11, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8", false], [12, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm", false], [13, "module-neural_compressor.adaptor.ox_utils.operators.gather", false], [14, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool", false], [15, "module-neural_compressor.adaptor.ox_utils.operators.gemm", false], [16, "module-neural_compressor.adaptor.ox_utils.operators", false], [17, "module-neural_compressor.adaptor.ox_utils.operators.lstm", false], [18, "module-neural_compressor.adaptor.ox_utils.operators.matmul", false], [19, "module-neural_compressor.adaptor.ox_utils.operators.maxpool", false], [20, "module-neural_compressor.adaptor.ox_utils.operators.norm", false], [21, "module-neural_compressor.adaptor.ox_utils.operators.ops", false], [22, "module-neural_compressor.adaptor.ox_utils.operators.pad", false], [23, "module-neural_compressor.adaptor.ox_utils.operators.pooling", false], [24, "module-neural_compressor.adaptor.ox_utils.operators.reduce", false], [25, "module-neural_compressor.adaptor.ox_utils.operators.resize", false], [26, "module-neural_compressor.adaptor.ox_utils.operators.split", false], [27, "module-neural_compressor.adaptor.ox_utils.operators.unary_op", false], [28, "module-neural_compressor.adaptor.ox_utils.quantizer", false], [29, "module-neural_compressor.adaptor.ox_utils.smooth_quant", false], [30, "module-neural_compressor.adaptor.ox_utils.util", false], [31, "module-neural_compressor.adaptor.ox_utils.weight_only", false], [32, "module-neural_compressor.adaptor.tensorflow", false], [33, "module-neural_compressor.adaptor.tf_utils.graph_converter", false], [34, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib", false], [35, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", false], [36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", false], [37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", false], [38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", false], [39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", false], [40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", false], [41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", false], [42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", false], [43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", false], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", false], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", false], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", false], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", false], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", false], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", false], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", false], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", false], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", false], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", false], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", false], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", false], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", false], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", false], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", false], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", false], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic", false], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", false], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", false], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", false], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", false], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", false], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", false], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", false], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", false], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", false], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", false], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter", false], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", false], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", false], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", false], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", false], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", false], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8", false], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", false], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", false], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", false], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", false], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", false], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", false], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", false], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", false], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", false], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", false], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", false], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", false], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", false], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", false], [95, "module-neural_compressor.adaptor.tf_utils.graph_util", false], [96, "module-neural_compressor.adaptor.tf_utils", false], [97, "module-neural_compressor.adaptor.tf_utils.quantize_graph", false], [98, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", false], [99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat", false], [100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", false], [101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", false], [102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", false], [103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", false], [104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false], [105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", false], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", false], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", false], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", false], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", false], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", false], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", false], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", false], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq", false], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", false], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", false], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", false], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", false], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", false], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", false], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", false], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", false], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common", false], [125, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration", false], [126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler", false], [127, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter", false], [128, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", false], [129, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", false], [130, "module-neural_compressor.adaptor.tf_utils.transform_graph", false], [131, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", false], [132, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", false], [133, "module-neural_compressor.adaptor.tf_utils.util", false], [134, "module-neural_compressor.adaptor.torch_utils.bf16_convert", false], [135, "module-neural_compressor.adaptor.torch_utils.hawq_metric", false], [136, "module-neural_compressor.adaptor.torch_utils", false], [137, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant", false], [138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", false], [139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", false], [140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", false], [141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", false], [142, "module-neural_compressor.adaptor.torch_utils.model_wrapper", false], [143, "module-neural_compressor.adaptor.torch_utils.pattern_detector", false], [144, "module-neural_compressor.adaptor.torch_utils.symbolic_trace", false], [145, "module-neural_compressor.adaptor.torch_utils.util", false], [146, "module-neural_compressor.algorithm.algorithm", false], [147, "module-neural_compressor.algorithm.fast_bias_correction", false], [148, "module-neural_compressor.algorithm", false], [149, "module-neural_compressor.algorithm.smooth_quant", false], [150, "module-neural_compressor.algorithm.weight_correction", false], [151, "module-neural_compressor.benchmark", false], [152, "module-neural_compressor.common.base_config", false], [153, "module-neural_compressor.common.base_tuning", false], [154, "module-neural_compressor.common.benchmark", false], [155, "module-neural_compressor.common", false], [156, "module-neural_compressor.common.tuning_param", false], [157, "module-neural_compressor.common.utils.constants", false], [158, "module-neural_compressor.common.utils", false], [159, "module-neural_compressor.common.utils.logger", false], [160, "module-neural_compressor.common.utils.save_load", false], [161, "module-neural_compressor.common.utils.utility", false], [162, "module-neural_compressor.common.version", false], [163, "module-neural_compressor.compression.callbacks", false], [164, "module-neural_compressor.compression.distillation.criterions", false], [165, "module-neural_compressor.compression.distillation", false], [166, "module-neural_compressor.compression.distillation.optimizers", false], [167, "module-neural_compressor.compression.distillation.utility", false], [168, "module-neural_compressor.compression.hpo", false], [169, "module-neural_compressor.compression.hpo.sa_optimizer", false], [170, "module-neural_compressor.compression.pruner.criteria", false], [171, "module-neural_compressor.compression.pruner", false], [172, "module-neural_compressor.compression.pruner.model_slim.auto_slim", false], [173, "module-neural_compressor.compression.pruner.model_slim", false], [174, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer", false], [175, "module-neural_compressor.compression.pruner.model_slim.weight_slim", false], [176, "module-neural_compressor.compression.pruner.patterns.base", false], [177, "module-neural_compressor.compression.pruner.patterns", false], [178, "module-neural_compressor.compression.pruner.patterns.mha", false], [179, "module-neural_compressor.compression.pruner.patterns.ninm", false], [180, "module-neural_compressor.compression.pruner.patterns.nxm", false], [181, "module-neural_compressor.compression.pruner.pruners.base", false], [182, "module-neural_compressor.compression.pruner.pruners.basic", false], [183, "module-neural_compressor.compression.pruner.pruners.block_mask", false], [184, "module-neural_compressor.compression.pruner.pruners", false], [185, "module-neural_compressor.compression.pruner.pruners.mha", false], [186, "module-neural_compressor.compression.pruner.pruners.pattern_lock", false], [187, "module-neural_compressor.compression.pruner.pruners.progressive", false], [188, "module-neural_compressor.compression.pruner.pruners.retrain_free", false], [189, "module-neural_compressor.compression.pruner.pruning", false], [190, "module-neural_compressor.compression.pruner.regs", false], [191, "module-neural_compressor.compression.pruner.schedulers", false], [192, "module-neural_compressor.compression.pruner.tf_criteria", false], [193, "module-neural_compressor.compression.pruner.utils", false], [194, "module-neural_compressor.compression.pruner.wanda", false], [195, "module-neural_compressor.compression.pruner.wanda.utils", false], [196, "module-neural_compressor.config", false], [197, "module-neural_compressor.contrib", false], [198, "module-neural_compressor.contrib.strategy", false], [199, "module-neural_compressor.contrib.strategy.sigopt", false], [200, "module-neural_compressor.contrib.strategy.tpe", false], [201, "module-neural_compressor.data.dataloaders.base_dataloader", false], [202, "module-neural_compressor.data.dataloaders.dataloader", false], [203, "module-neural_compressor.data.dataloaders.default_dataloader", false], [204, "module-neural_compressor.data.dataloaders.fetcher", false], [205, "module-neural_compressor.data.dataloaders.mxnet_dataloader", false], [206, "module-neural_compressor.data.dataloaders.onnxrt_dataloader", false], [207, "module-neural_compressor.data.dataloaders.pytorch_dataloader", false], [208, "module-neural_compressor.data.dataloaders.sampler", false], [209, "module-neural_compressor.data.dataloaders.tensorflow_dataloader", false], [210, "module-neural_compressor.data.datasets.bert_dataset", false], [211, "module-neural_compressor.data.datasets.coco_dataset", false], [212, "module-neural_compressor.data.datasets.dataset", false], [213, "module-neural_compressor.data.datasets.dummy_dataset", false], [214, "module-neural_compressor.data.datasets.dummy_dataset_v2", false], [215, "module-neural_compressor.data.datasets.imagenet_dataset", false], [216, "module-neural_compressor.data.datasets", false], [217, "module-neural_compressor.data.datasets.style_transfer_dataset", false], [218, "module-neural_compressor.data.filters.coco_filter", false], [219, "module-neural_compressor.data.filters.filter", false], [220, "module-neural_compressor.data.filters", false], [221, "module-neural_compressor.data", false], [222, "module-neural_compressor.data.transforms.imagenet_transform", false], [223, "module-neural_compressor.data.transforms", false], [224, "module-neural_compressor.data.transforms.postprocess", false], [225, "module-neural_compressor.data.transforms.tokenization", false], [226, "module-neural_compressor.data.transforms.transform", false], [227, "module-neural_compressor", false], [228, "module-neural_compressor.metric.bleu", false], [229, "module-neural_compressor.metric.bleu_util", false], [230, "module-neural_compressor.metric.coco_label_map", false], [231, "module-neural_compressor.metric.coco_tools", false], [232, "module-neural_compressor.metric.evaluate_squad", false], [233, "module-neural_compressor.metric.f1", false], [234, "module-neural_compressor.metric", false], [235, "module-neural_compressor.metric.metric", false], [236, "module-neural_compressor.mix_precision", false], [237, "module-neural_compressor.model.base_model", false], [238, "module-neural_compressor.model", false], [239, "module-neural_compressor.model.keras_model", false], [240, "module-neural_compressor.model.model", false], [241, "module-neural_compressor.model.mxnet_model", false], [242, "module-neural_compressor.model.nets_factory", false], [243, "module-neural_compressor.model.onnx_model", false], [244, "module-neural_compressor.model.tensorflow_model", false], [245, "module-neural_compressor.model.torch_model", false], [246, "module-neural_compressor.objective", false], [247, "module-neural_compressor.profiling", false], [248, "module-neural_compressor.profiling.parser.factory", false], [249, "module-neural_compressor.profiling.parser.onnx_parser.factory", false], [250, "module-neural_compressor.profiling.parser.onnx_parser.parser", false], [251, "module-neural_compressor.profiling.parser.parser", false], [252, "module-neural_compressor.profiling.parser.result", false], [253, "module-neural_compressor.profiling.parser.tensorflow_parser.factory", false], [254, "module-neural_compressor.profiling.parser.tensorflow_parser.parser", false], [255, "module-neural_compressor.profiling.profiler.factory", false], [256, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory", false], [257, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler", false], [258, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils", false], [259, "module-neural_compressor.profiling.profiler.profiler", false], [260, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory", false], [261, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler", false], [262, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils", false], [263, "module-neural_compressor.quantization", false], [264, "module-neural_compressor.strategy.auto", false], [265, "module-neural_compressor.strategy.auto_mixed_precision", false], [266, "module-neural_compressor.strategy.basic", false], [267, "module-neural_compressor.strategy.bayesian", false], [268, "module-neural_compressor.strategy.conservative", false], [269, "module-neural_compressor.strategy.exhaustive", false], [270, "module-neural_compressor.strategy.hawq_v2", false], [271, "module-neural_compressor.strategy", false], [272, "module-neural_compressor.strategy.mse", false], [273, "module-neural_compressor.strategy.mse_v2", false], [274, "module-neural_compressor.strategy.random", false], [275, "module-neural_compressor.strategy.strategy", false], [276, "module-neural_compressor.strategy.utils.constant", false], [277, "module-neural_compressor.strategy.utils", false], [278, "module-neural_compressor.strategy.utils.tuning_sampler", false], [279, "module-neural_compressor.strategy.utils.tuning_space", false], [280, "module-neural_compressor.strategy.utils.tuning_structs", false], [281, "module-neural_compressor.strategy.utils.utility", false], [282, "module-neural_compressor.template.api_doc_example", false], [283, "module-neural_compressor.tensorflow.algorithms", false], [284, "module-neural_compressor.tensorflow.algorithms.smoother.calibration", false], [285, "module-neural_compressor.tensorflow.algorithms.smoother.core", false], [286, "module-neural_compressor.tensorflow.algorithms.smoother", false], [287, "module-neural_compressor.tensorflow.algorithms.smoother.scaler", false], [288, "module-neural_compressor.tensorflow.algorithms.static_quant", false], [289, "module-neural_compressor.tensorflow.algorithms.static_quant.keras", false], [290, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow", false], [291, "module-neural_compressor.tensorflow", false], [292, "module-neural_compressor.tensorflow.keras", false], [293, "module-neural_compressor.tensorflow.keras.layers.conv2d", false], [294, "module-neural_compressor.tensorflow.keras.layers.dense", false], [295, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d", false], [296, "module-neural_compressor.tensorflow.keras.layers", false], [297, "module-neural_compressor.tensorflow.keras.layers.layer_initializer", false], [298, "module-neural_compressor.tensorflow.keras.layers.pool2d", false], [299, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d", false], [300, "module-neural_compressor.tensorflow.keras.quantization.config", false], [301, "module-neural_compressor.tensorflow.keras.quantization", false], [302, "module-neural_compressor.tensorflow.quantization.algorithm_entry", false], [303, "module-neural_compressor.tensorflow.quantization.autotune", false], [304, "module-neural_compressor.tensorflow.quantization.config", false], [305, "module-neural_compressor.tensorflow.quantization", false], [306, "module-neural_compressor.tensorflow.quantization.quantize", false], [307, "module-neural_compressor.tensorflow.quantization.utils.graph_converter", false], [308, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", false], [309, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", false], [310, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", false], [311, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", false], [312, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", false], [313, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", false], [314, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", false], [315, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", false], [316, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", false], [317, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", false], [318, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", false], [319, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", false], [320, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", false], [321, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", false], [322, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", false], [323, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", false], [324, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", false], [325, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", false], [326, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", false], [327, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", false], [328, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", false], [329, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", false], [330, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false], [331, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", false], [332, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", false], [333, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", false], [334, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", false], [335, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", false], [336, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", false], [337, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", false], [338, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", false], [339, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", false], [340, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", false], [341, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", false], [342, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", false], [343, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", false], [344, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", false], [345, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter", false], [346, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", false], [347, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", false], [348, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false], [349, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", false], [350, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false], [351, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", false], [352, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", false], [353, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", false], [354, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", false], [355, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", false], [356, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", false], [357, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", false], [358, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", false], [359, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", false], [360, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", false], [361, "module-neural_compressor.tensorflow.quantization.utils.graph_util", false], [362, "module-neural_compressor.tensorflow.quantization.utils", false], [363, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph", false], [364, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", false], [365, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", false], [366, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", false], [367, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", false], [368, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", false], [369, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", false], [370, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", false], [371, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", false], [372, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", false], [373, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", false], [374, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", false], [375, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", false], [376, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", false], [377, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", false], [378, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", false], [379, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", false], [380, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common", false], [381, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", false], [382, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", false], [383, "module-neural_compressor.tensorflow.quantization.utils.transform_graph", false], [384, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", false], [385, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", false], [386, "module-neural_compressor.tensorflow.quantization.utils.utility", false], [387, "module-neural_compressor.tensorflow.utils.constants", false], [388, "module-neural_compressor.tensorflow.utils.data", false], [389, "module-neural_compressor.tensorflow.utils", false], [390, "module-neural_compressor.tensorflow.utils.model", false], [391, "module-neural_compressor.tensorflow.utils.model_wrappers", false], [392, "module-neural_compressor.tensorflow.utils.utility", false], [393, "module-neural_compressor.torch.algorithms.base_algorithm", false], [394, "module-neural_compressor.torch.algorithms.fp8_quant.observer", false], [395, "module-neural_compressor.torch.algorithms.fp8_quant.patched_module_base", false], [396, "module-neural_compressor.torch.algorithms.fp8_quant.scaling_method_base", false], [397, "module-neural_compressor.torch.algorithms.fp8_quant.utils.logger", false], [398, "module-neural_compressor.torch.algorithms", false], [399, "module-neural_compressor.torch.algorithms.layer_wise", false], [400, "module-neural_compressor.torch.algorithms.layer_wise.load", false], [401, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle", false], [402, "module-neural_compressor.torch.algorithms.layer_wise.utils", false], [403, "module-neural_compressor.torch.algorithms.mixed_precision.half_precision_convert", false], [404, "module-neural_compressor.torch.algorithms.mixed_precision", false], [405, "module-neural_compressor.torch.algorithms.mixed_precision.module_wrappers", false], [406, "module-neural_compressor.torch.algorithms.mx_quant", false], [407, "module-neural_compressor.torch.algorithms.mx_quant.mx", false], [408, "module-neural_compressor.torch.algorithms.mx_quant.utils", false], [409, "module-neural_compressor.torch.algorithms.pt2e_quant.core", false], [410, "module-neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter", false], [411, "module-neural_compressor.torch.algorithms.pt2e_quant", false], [412, "module-neural_compressor.torch.algorithms.pt2e_quant.save_load", false], [413, "module-neural_compressor.torch.algorithms.pt2e_quant.utility", false], [414, "module-neural_compressor.torch.algorithms.smooth_quant", false], [415, "module-neural_compressor.torch.algorithms.smooth_quant.save_load", false], [416, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant", false], [417, "module-neural_compressor.torch.algorithms.smooth_quant.utility", false], [418, "module-neural_compressor.torch.algorithms.static_quant", false], [419, "module-neural_compressor.torch.algorithms.static_quant.save_load", false], [420, "module-neural_compressor.torch.algorithms.static_quant.static_quant", false], [421, "module-neural_compressor.torch.algorithms.static_quant.utility", false], [422, "module-neural_compressor.torch.algorithms.weight_only.autoround", false], [423, "module-neural_compressor.torch.algorithms.weight_only.awq", false], [424, "module-neural_compressor.torch.algorithms.weight_only.gptq", false], [425, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack", false], [426, "module-neural_compressor.torch.algorithms.weight_only.hqq.config", false], [427, "module-neural_compressor.torch.algorithms.weight_only.hqq.core", false], [428, "module-neural_compressor.torch.algorithms.weight_only.hqq", false], [429, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer", false], [430, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor", false], [431, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer", false], [432, "module-neural_compressor.torch.algorithms.weight_only", false], [433, "module-neural_compressor.torch.algorithms.weight_only.modules", false], [434, "module-neural_compressor.torch.algorithms.weight_only.rtn", false], [435, "module-neural_compressor.torch.algorithms.weight_only.save_load", false], [436, "module-neural_compressor.torch.algorithms.weight_only.teq", false], [437, "module-neural_compressor.torch.algorithms.weight_only.utility", false], [438, "module-neural_compressor.torch.export", false], [439, "module-neural_compressor.torch.export.pt2e_export", false], [440, "module-neural_compressor.torch", false], [441, "module-neural_compressor.torch.quantization.algorithm_entry", false], [442, "module-neural_compressor.torch.quantization.autotune", false], [443, "module-neural_compressor.torch.quantization.config", false], [444, "module-neural_compressor.torch.quantization", false], [445, "module-neural_compressor.torch.quantization.quantize", false], [446, "module-neural_compressor.torch.quantization.save_load_entry", false], [447, "module-neural_compressor.torch.utils.auto_accelerator", false], [448, "module-neural_compressor.torch.utils.bit_packer", false], [449, "module-neural_compressor.torch.utils.block_wise", false], [450, "module-neural_compressor.torch.utils.constants", false], [451, "module-neural_compressor.torch.utils.environ", false], [452, "module-neural_compressor.torch.utils", false], [453, "module-neural_compressor.torch.utils.utility", false], [454, "module-neural_compressor.training", false], [455, "module-neural_compressor.transformers.quantization.utils", false], [456, "module-neural_compressor.transformers.utils", false], [457, "module-neural_compressor.transformers.utils.quantization_config", false], [458, "module-neural_compressor.utils.collect_layer_histogram", false], [459, "module-neural_compressor.utils.constant", false], [460, "module-neural_compressor.utils.create_obj_from_config", false], [461, "module-neural_compressor.utils.export", false], [462, "module-neural_compressor.utils.export.qlinear2qdq", false], [463, "module-neural_compressor.utils.export.tf2onnx", false], [464, "module-neural_compressor.utils.export.torch2onnx", false], [465, "module-neural_compressor.utils", false], [466, "module-neural_compressor.utils.kl_divergence", false], [467, "module-neural_compressor.utils.load_huggingface", false], [468, "module-neural_compressor.utils.logger", false], [469, "module-neural_compressor.utils.options", false], [470, "module-neural_compressor.utils.pytorch", false], [471, "module-neural_compressor.utils.utility", false], [472, "module-neural_compressor.utils.weights_details", false], [473, "module-neural_compressor.version", false]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[282, "neural_compressor.template.api_doc_example.module_debug_level1", false]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules", false]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules", false]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules", false]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.move_input_device", false]], "move_input_device() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.move_input_device", false]], "move_input_to_device() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.move_input_to_device", false]], "move_input_to_device() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.move_input_to_device", false]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer", false]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[336, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer", false]], "mse (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.MSE", false]], "mse (neural_compressor.metric.metric.rmse attribute)": [[235, "neural_compressor.metric.metric.RMSE.mse", false]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.mse_metric_gap", false]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[273, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy", false]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[272, "neural_compressor.strategy.mse.MSETuneStrategy", false]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[142, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear", false]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[433, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear", false]], "multiobjective (class in neural_compressor.objective)": [[246, "neural_compressor.objective.MultiObjective", false]], "mx_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.mx_quant_entry", false]], "mxlinear (class in neural_compressor.torch.algorithms.mx_quant.mx)": [[407, "neural_compressor.torch.algorithms.mx_quant.mx.MXLinear", false]], "mxnet (class in neural_compressor.config)": [[196, "neural_compressor.config.MXNet", false]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.MXNetCIFAR10", false]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.MXNetCIFAR100", false]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform", false]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox", false]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[205, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader", false]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.MXNetDatasets", false]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST", false]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[219, "neural_compressor.data.filters.filter.MXNetFilters", false]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.MXNetImageFolder", false]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[215, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw", false]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.MXNetMetrics", false]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.MXNetMNIST", false]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[241, "neural_compressor.model.mxnet_model.MXNetModel", false]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform", false]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.MXNetTransforms", false]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.MXNetTranspose", false]], "mxquantconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.MXQuantConfig", false]], "mxquantizer (class in neural_compressor.torch.algorithms.mx_quant.mx)": [[407, "neural_compressor.torch.algorithms.mx_quant.mx.MXQuantizer", false]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[178, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N", false]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[179, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N", false]], "name (neural_compressor.common.base_config.baseconfig attribute)": [[152, "neural_compressor.common.base_config.BaseConfig.name", false]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.NameCollector", false]], "nasconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.NASConfig", false]], "nbits (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[430, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.nbits", false]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device", false]], "need_apply() (in module neural_compressor.tensorflow.quantization.quantize)": [[306, "neural_compressor.tensorflow.quantization.quantize.need_apply", false]], "need_apply() (in module neural_compressor.torch.quantization.quantize)": [[445, "neural_compressor.torch.quantization.quantize.need_apply", false]], "neural_compressor": [[227, "module-neural_compressor", false]], "neural_compressor.adaptor.mxnet_utils": [[0, "module-neural_compressor.adaptor.mxnet_utils", false]], "neural_compressor.adaptor.mxnet_utils.util": [[1, "module-neural_compressor.adaptor.mxnet_utils.util", false]], "neural_compressor.adaptor.ox_utils": [[4, "module-neural_compressor.adaptor.ox_utils", false]], "neural_compressor.adaptor.ox_utils.calibration": [[2, "module-neural_compressor.adaptor.ox_utils.calibration", false]], "neural_compressor.adaptor.ox_utils.calibrator": [[3, "module-neural_compressor.adaptor.ox_utils.calibrator", false]], "neural_compressor.adaptor.ox_utils.operators": [[16, "module-neural_compressor.adaptor.ox_utils.operators", false]], "neural_compressor.adaptor.ox_utils.operators.activation": [[5, "module-neural_compressor.adaptor.ox_utils.operators.activation", false]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[6, "module-neural_compressor.adaptor.ox_utils.operators.argmax", false]], "neural_compressor.adaptor.ox_utils.operators.attention": [[7, "module-neural_compressor.adaptor.ox_utils.operators.attention", false]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[8, "module-neural_compressor.adaptor.ox_utils.operators.binary_op", false]], "neural_compressor.adaptor.ox_utils.operators.concat": [[9, "module-neural_compressor.adaptor.ox_utils.operators.concat", false]], "neural_compressor.adaptor.ox_utils.operators.conv": [[10, "module-neural_compressor.adaptor.ox_utils.operators.conv", false]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[11, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8", false]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[12, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm", false]], "neural_compressor.adaptor.ox_utils.operators.gather": [[13, "module-neural_compressor.adaptor.ox_utils.operators.gather", false]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool", false]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gemm", false]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[17, "module-neural_compressor.adaptor.ox_utils.operators.lstm", false]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[18, "module-neural_compressor.adaptor.ox_utils.operators.matmul", false]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[19, "module-neural_compressor.adaptor.ox_utils.operators.maxpool", false]], "neural_compressor.adaptor.ox_utils.operators.norm": [[20, "module-neural_compressor.adaptor.ox_utils.operators.norm", false]], "neural_compressor.adaptor.ox_utils.operators.ops": [[21, "module-neural_compressor.adaptor.ox_utils.operators.ops", false]], "neural_compressor.adaptor.ox_utils.operators.pad": [[22, "module-neural_compressor.adaptor.ox_utils.operators.pad", false]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pooling", false]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[24, "module-neural_compressor.adaptor.ox_utils.operators.reduce", false]], "neural_compressor.adaptor.ox_utils.operators.resize": [[25, "module-neural_compressor.adaptor.ox_utils.operators.resize", false]], "neural_compressor.adaptor.ox_utils.operators.split": [[26, "module-neural_compressor.adaptor.ox_utils.operators.split", false]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[27, "module-neural_compressor.adaptor.ox_utils.operators.unary_op", false]], "neural_compressor.adaptor.ox_utils.quantizer": [[28, "module-neural_compressor.adaptor.ox_utils.quantizer", false]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[29, "module-neural_compressor.adaptor.ox_utils.smooth_quant", false]], "neural_compressor.adaptor.ox_utils.util": [[30, "module-neural_compressor.adaptor.ox_utils.util", false]], "neural_compressor.adaptor.ox_utils.weight_only": [[31, "module-neural_compressor.adaptor.ox_utils.weight_only", false]], "neural_compressor.adaptor.tensorflow": [[32, "module-neural_compressor.adaptor.tensorflow", false]], "neural_compressor.adaptor.tf_utils": [[96, "module-neural_compressor.adaptor.tf_utils", false]], "neural_compressor.adaptor.tf_utils.graph_converter": [[33, "module-neural_compressor.adaptor.tf_utils.graph_converter", false]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[35, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", false]], "neural_compressor.adaptor.tf_utils.graph_util": [[95, "module-neural_compressor.adaptor.tf_utils.graph_util", false]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[97, "module-neural_compressor.adaptor.tf_utils.quantize_graph", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", false]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common", false]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[125, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration", false]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler", false]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[127, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter", false]], "neural_compressor.adaptor.tf_utils.transform_graph": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph", false]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[128, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", false]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", false]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", false]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", false]], "neural_compressor.adaptor.tf_utils.util": [[133, "module-neural_compressor.adaptor.tf_utils.util", false]], "neural_compressor.adaptor.torch_utils": [[136, "module-neural_compressor.adaptor.torch_utils", false]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[134, "module-neural_compressor.adaptor.torch_utils.bf16_convert", false]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[135, "module-neural_compressor.adaptor.torch_utils.hawq_metric", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[137, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", false]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[142, "module-neural_compressor.adaptor.torch_utils.model_wrapper", false]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[143, "module-neural_compressor.adaptor.torch_utils.pattern_detector", false]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[144, "module-neural_compressor.adaptor.torch_utils.symbolic_trace", false]], "neural_compressor.adaptor.torch_utils.util": [[145, "module-neural_compressor.adaptor.torch_utils.util", false]], "neural_compressor.algorithm": [[148, "module-neural_compressor.algorithm", false]], "neural_compressor.algorithm.algorithm": [[146, "module-neural_compressor.algorithm.algorithm", false]], "neural_compressor.algorithm.fast_bias_correction": [[147, "module-neural_compressor.algorithm.fast_bias_correction", false]], "neural_compressor.algorithm.smooth_quant": [[149, "module-neural_compressor.algorithm.smooth_quant", false]], "neural_compressor.algorithm.weight_correction": [[150, "module-neural_compressor.algorithm.weight_correction", false]], "neural_compressor.benchmark": [[151, "module-neural_compressor.benchmark", false]], "neural_compressor.common": [[155, "module-neural_compressor.common", false]], "neural_compressor.common.base_config": [[152, "module-neural_compressor.common.base_config", false]], "neural_compressor.common.base_tuning": [[153, "module-neural_compressor.common.base_tuning", false]], "neural_compressor.common.benchmark": [[154, "module-neural_compressor.common.benchmark", false]], "neural_compressor.common.tuning_param": [[156, "module-neural_compressor.common.tuning_param", false]], "neural_compressor.common.utils": [[158, "module-neural_compressor.common.utils", false]], "neural_compressor.common.utils.constants": [[157, "module-neural_compressor.common.utils.constants", false]], "neural_compressor.common.utils.logger": [[159, "module-neural_compressor.common.utils.logger", false]], "neural_compressor.common.utils.save_load": [[160, "module-neural_compressor.common.utils.save_load", false]], "neural_compressor.common.utils.utility": [[161, "module-neural_compressor.common.utils.utility", false]], "neural_compressor.common.version": [[162, "module-neural_compressor.common.version", false]], "neural_compressor.compression.callbacks": [[163, "module-neural_compressor.compression.callbacks", false]], "neural_compressor.compression.distillation": [[165, "module-neural_compressor.compression.distillation", false]], "neural_compressor.compression.distillation.criterions": [[164, "module-neural_compressor.compression.distillation.criterions", false]], "neural_compressor.compression.distillation.optimizers": [[166, "module-neural_compressor.compression.distillation.optimizers", false]], "neural_compressor.compression.distillation.utility": [[167, "module-neural_compressor.compression.distillation.utility", false]], "neural_compressor.compression.hpo": [[168, "module-neural_compressor.compression.hpo", false]], "neural_compressor.compression.hpo.sa_optimizer": [[169, "module-neural_compressor.compression.hpo.sa_optimizer", false]], "neural_compressor.compression.pruner": [[171, "module-neural_compressor.compression.pruner", false]], "neural_compressor.compression.pruner.criteria": [[170, "module-neural_compressor.compression.pruner.criteria", false]], "neural_compressor.compression.pruner.model_slim": [[173, "module-neural_compressor.compression.pruner.model_slim", false]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[172, "module-neural_compressor.compression.pruner.model_slim.auto_slim", false]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[174, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer", false]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[175, "module-neural_compressor.compression.pruner.model_slim.weight_slim", false]], "neural_compressor.compression.pruner.patterns": [[177, "module-neural_compressor.compression.pruner.patterns", false]], "neural_compressor.compression.pruner.patterns.base": [[176, "module-neural_compressor.compression.pruner.patterns.base", false]], "neural_compressor.compression.pruner.patterns.mha": [[178, "module-neural_compressor.compression.pruner.patterns.mha", false]], "neural_compressor.compression.pruner.patterns.ninm": [[179, "module-neural_compressor.compression.pruner.patterns.ninm", false]], "neural_compressor.compression.pruner.patterns.nxm": [[180, "module-neural_compressor.compression.pruner.patterns.nxm", false]], "neural_compressor.compression.pruner.pruners": [[184, "module-neural_compressor.compression.pruner.pruners", false]], "neural_compressor.compression.pruner.pruners.base": [[181, "module-neural_compressor.compression.pruner.pruners.base", false]], "neural_compressor.compression.pruner.pruners.basic": [[182, "module-neural_compressor.compression.pruner.pruners.basic", false]], "neural_compressor.compression.pruner.pruners.block_mask": [[183, "module-neural_compressor.compression.pruner.pruners.block_mask", false]], "neural_compressor.compression.pruner.pruners.mha": [[185, "module-neural_compressor.compression.pruner.pruners.mha", false]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[186, "module-neural_compressor.compression.pruner.pruners.pattern_lock", false]], "neural_compressor.compression.pruner.pruners.progressive": [[187, "module-neural_compressor.compression.pruner.pruners.progressive", false]], "neural_compressor.compression.pruner.pruners.retrain_free": [[188, "module-neural_compressor.compression.pruner.pruners.retrain_free", false]], "neural_compressor.compression.pruner.pruning": [[189, "module-neural_compressor.compression.pruner.pruning", false]], "neural_compressor.compression.pruner.regs": [[190, "module-neural_compressor.compression.pruner.regs", false]], "neural_compressor.compression.pruner.schedulers": [[191, "module-neural_compressor.compression.pruner.schedulers", false]], "neural_compressor.compression.pruner.tf_criteria": [[192, "module-neural_compressor.compression.pruner.tf_criteria", false]], "neural_compressor.compression.pruner.utils": [[193, "module-neural_compressor.compression.pruner.utils", false]], "neural_compressor.compression.pruner.wanda": [[194, "module-neural_compressor.compression.pruner.wanda", false]], "neural_compressor.compression.pruner.wanda.utils": [[195, "module-neural_compressor.compression.pruner.wanda.utils", false]], "neural_compressor.config": [[196, "module-neural_compressor.config", false]], "neural_compressor.contrib": [[197, "module-neural_compressor.contrib", false]], "neural_compressor.contrib.strategy": [[198, "module-neural_compressor.contrib.strategy", false]], "neural_compressor.contrib.strategy.sigopt": [[199, "module-neural_compressor.contrib.strategy.sigopt", false]], "neural_compressor.contrib.strategy.tpe": [[200, "module-neural_compressor.contrib.strategy.tpe", false]], "neural_compressor.data": [[221, "module-neural_compressor.data", false]], "neural_compressor.data.dataloaders.base_dataloader": [[201, "module-neural_compressor.data.dataloaders.base_dataloader", false]], "neural_compressor.data.dataloaders.dataloader": [[202, "module-neural_compressor.data.dataloaders.dataloader", false]], "neural_compressor.data.dataloaders.default_dataloader": [[203, "module-neural_compressor.data.dataloaders.default_dataloader", false]], "neural_compressor.data.dataloaders.fetcher": [[204, "module-neural_compressor.data.dataloaders.fetcher", false]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[205, "module-neural_compressor.data.dataloaders.mxnet_dataloader", false]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[206, "module-neural_compressor.data.dataloaders.onnxrt_dataloader", false]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[207, "module-neural_compressor.data.dataloaders.pytorch_dataloader", false]], "neural_compressor.data.dataloaders.sampler": [[208, "module-neural_compressor.data.dataloaders.sampler", false]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[209, "module-neural_compressor.data.dataloaders.tensorflow_dataloader", false]], "neural_compressor.data.datasets": [[216, "module-neural_compressor.data.datasets", false]], "neural_compressor.data.datasets.bert_dataset": [[210, "module-neural_compressor.data.datasets.bert_dataset", false]], "neural_compressor.data.datasets.coco_dataset": [[211, "module-neural_compressor.data.datasets.coco_dataset", false]], "neural_compressor.data.datasets.dataset": [[212, "module-neural_compressor.data.datasets.dataset", false]], "neural_compressor.data.datasets.dummy_dataset": [[213, "module-neural_compressor.data.datasets.dummy_dataset", false]], "neural_compressor.data.datasets.dummy_dataset_v2": [[214, "module-neural_compressor.data.datasets.dummy_dataset_v2", false]], "neural_compressor.data.datasets.imagenet_dataset": [[215, "module-neural_compressor.data.datasets.imagenet_dataset", false]], "neural_compressor.data.datasets.style_transfer_dataset": [[217, "module-neural_compressor.data.datasets.style_transfer_dataset", false]], "neural_compressor.data.filters": [[220, "module-neural_compressor.data.filters", false]], "neural_compressor.data.filters.coco_filter": [[218, "module-neural_compressor.data.filters.coco_filter", false]], "neural_compressor.data.filters.filter": [[219, "module-neural_compressor.data.filters.filter", false]], "neural_compressor.data.transforms": [[223, "module-neural_compressor.data.transforms", false]], "neural_compressor.data.transforms.imagenet_transform": [[222, "module-neural_compressor.data.transforms.imagenet_transform", false]], "neural_compressor.data.transforms.postprocess": [[224, "module-neural_compressor.data.transforms.postprocess", false]], "neural_compressor.data.transforms.tokenization": [[225, "module-neural_compressor.data.transforms.tokenization", false]], "neural_compressor.data.transforms.transform": [[226, "module-neural_compressor.data.transforms.transform", false]], "neural_compressor.metric": [[234, "module-neural_compressor.metric", false]], "neural_compressor.metric.bleu": [[228, "module-neural_compressor.metric.bleu", false]], "neural_compressor.metric.bleu_util": [[229, "module-neural_compressor.metric.bleu_util", false]], "neural_compressor.metric.coco_label_map": [[230, "module-neural_compressor.metric.coco_label_map", false]], "neural_compressor.metric.coco_tools": [[231, "module-neural_compressor.metric.coco_tools", false]], "neural_compressor.metric.evaluate_squad": [[232, "module-neural_compressor.metric.evaluate_squad", false]], "neural_compressor.metric.f1": [[233, "module-neural_compressor.metric.f1", false]], "neural_compressor.metric.metric": [[235, "module-neural_compressor.metric.metric", false]], "neural_compressor.mix_precision": [[236, "module-neural_compressor.mix_precision", false]], "neural_compressor.model": [[238, "module-neural_compressor.model", false]], "neural_compressor.model.base_model": [[237, "module-neural_compressor.model.base_model", false]], "neural_compressor.model.keras_model": [[239, "module-neural_compressor.model.keras_model", false]], "neural_compressor.model.model": [[240, "module-neural_compressor.model.model", false]], "neural_compressor.model.mxnet_model": [[241, "module-neural_compressor.model.mxnet_model", false]], "neural_compressor.model.nets_factory": [[242, "module-neural_compressor.model.nets_factory", false]], "neural_compressor.model.onnx_model": [[243, "module-neural_compressor.model.onnx_model", false]], "neural_compressor.model.tensorflow_model": [[244, "module-neural_compressor.model.tensorflow_model", false]], "neural_compressor.model.torch_model": [[245, "module-neural_compressor.model.torch_model", false]], "neural_compressor.objective": [[246, "module-neural_compressor.objective", false]], "neural_compressor.profiling": [[247, "module-neural_compressor.profiling", false]], "neural_compressor.profiling.parser.factory": [[248, "module-neural_compressor.profiling.parser.factory", false]], "neural_compressor.profiling.parser.onnx_parser.factory": [[249, "module-neural_compressor.profiling.parser.onnx_parser.factory", false]], "neural_compressor.profiling.parser.onnx_parser.parser": [[250, "module-neural_compressor.profiling.parser.onnx_parser.parser", false]], "neural_compressor.profiling.parser.parser": [[251, "module-neural_compressor.profiling.parser.parser", false]], "neural_compressor.profiling.parser.result": [[252, "module-neural_compressor.profiling.parser.result", false]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[253, "module-neural_compressor.profiling.parser.tensorflow_parser.factory", false]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[254, "module-neural_compressor.profiling.parser.tensorflow_parser.parser", false]], "neural_compressor.profiling.profiler.factory": [[255, "module-neural_compressor.profiling.profiler.factory", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[256, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[257, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[258, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils", false]], "neural_compressor.profiling.profiler.profiler": [[259, "module-neural_compressor.profiling.profiler.profiler", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[260, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[261, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[262, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils", false]], "neural_compressor.quantization": [[263, "module-neural_compressor.quantization", false]], "neural_compressor.strategy": [[271, "module-neural_compressor.strategy", false]], "neural_compressor.strategy.auto": [[264, "module-neural_compressor.strategy.auto", false]], "neural_compressor.strategy.auto_mixed_precision": [[265, "module-neural_compressor.strategy.auto_mixed_precision", false]], "neural_compressor.strategy.basic": [[266, "module-neural_compressor.strategy.basic", false]], "neural_compressor.strategy.bayesian": [[267, "module-neural_compressor.strategy.bayesian", false]], "neural_compressor.strategy.conservative": [[268, "module-neural_compressor.strategy.conservative", false]], "neural_compressor.strategy.exhaustive": [[269, "module-neural_compressor.strategy.exhaustive", false]], "neural_compressor.strategy.hawq_v2": [[270, "module-neural_compressor.strategy.hawq_v2", false]], "neural_compressor.strategy.mse": [[272, "module-neural_compressor.strategy.mse", false]], "neural_compressor.strategy.mse_v2": [[273, "module-neural_compressor.strategy.mse_v2", false]], "neural_compressor.strategy.random": [[274, "module-neural_compressor.strategy.random", false]], "neural_compressor.strategy.strategy": [[275, "module-neural_compressor.strategy.strategy", false]], "neural_compressor.strategy.utils": [[277, "module-neural_compressor.strategy.utils", false]], "neural_compressor.strategy.utils.constant": [[276, "module-neural_compressor.strategy.utils.constant", false]], "neural_compressor.strategy.utils.tuning_sampler": [[278, "module-neural_compressor.strategy.utils.tuning_sampler", false]], "neural_compressor.strategy.utils.tuning_space": [[279, "module-neural_compressor.strategy.utils.tuning_space", false]], "neural_compressor.strategy.utils.tuning_structs": [[280, "module-neural_compressor.strategy.utils.tuning_structs", false]], "neural_compressor.strategy.utils.utility": [[281, "module-neural_compressor.strategy.utils.utility", false]], "neural_compressor.template.api_doc_example": [[282, "module-neural_compressor.template.api_doc_example", false]], "neural_compressor.tensorflow": [[291, "module-neural_compressor.tensorflow", false]], "neural_compressor.tensorflow.algorithms": [[283, "module-neural_compressor.tensorflow.algorithms", false]], "neural_compressor.tensorflow.algorithms.smoother": [[286, "module-neural_compressor.tensorflow.algorithms.smoother", false]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[284, "module-neural_compressor.tensorflow.algorithms.smoother.calibration", false]], "neural_compressor.tensorflow.algorithms.smoother.core": [[285, "module-neural_compressor.tensorflow.algorithms.smoother.core", false]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[287, "module-neural_compressor.tensorflow.algorithms.smoother.scaler", false]], "neural_compressor.tensorflow.algorithms.static_quant": [[288, "module-neural_compressor.tensorflow.algorithms.static_quant", false]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[289, "module-neural_compressor.tensorflow.algorithms.static_quant.keras", false]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[290, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow", false]], "neural_compressor.tensorflow.keras": [[292, "module-neural_compressor.tensorflow.keras", false]], "neural_compressor.tensorflow.keras.layers": [[296, "module-neural_compressor.tensorflow.keras.layers", false]], "neural_compressor.tensorflow.keras.layers.conv2d": [[293, "module-neural_compressor.tensorflow.keras.layers.conv2d", false]], "neural_compressor.tensorflow.keras.layers.dense": [[294, "module-neural_compressor.tensorflow.keras.layers.dense", false]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[295, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d", false]], "neural_compressor.tensorflow.keras.layers.layer_initializer": [[297, "module-neural_compressor.tensorflow.keras.layers.layer_initializer", false]], "neural_compressor.tensorflow.keras.layers.pool2d": [[298, "module-neural_compressor.tensorflow.keras.layers.pool2d", false]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[299, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d", false]], "neural_compressor.tensorflow.keras.quantization": [[301, "module-neural_compressor.tensorflow.keras.quantization", false]], "neural_compressor.tensorflow.keras.quantization.config": [[300, "module-neural_compressor.tensorflow.keras.quantization.config", false]], "neural_compressor.tensorflow.quantization": [[305, "module-neural_compressor.tensorflow.quantization", false]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[302, "module-neural_compressor.tensorflow.quantization.algorithm_entry", false]], "neural_compressor.tensorflow.quantization.autotune": [[303, "module-neural_compressor.tensorflow.quantization.autotune", false]], "neural_compressor.tensorflow.quantization.config": [[304, "module-neural_compressor.tensorflow.quantization.config", false]], "neural_compressor.tensorflow.quantization.quantize": [[306, "module-neural_compressor.tensorflow.quantization.quantize", false]], "neural_compressor.tensorflow.quantization.utils": [[362, "module-neural_compressor.tensorflow.quantization.utils", false]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[307, "module-neural_compressor.tensorflow.quantization.utils.graph_converter", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[345, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[310, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[308, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[309, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[334, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[311, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[312, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[313, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[314, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[315, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[316, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[317, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[318, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[319, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[320, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[321, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[322, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[323, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[324, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[325, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[326, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[327, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[328, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[329, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[330, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[331, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[332, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[333, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[335, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[336, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[337, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[338, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[339, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[340, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[341, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[342, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[343, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[344, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[352, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[346, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[347, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[348, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[349, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[350, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[351, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[353, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[354, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[355, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[356, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[357, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[358, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[359, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[360, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", false]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[361, "module-neural_compressor.tensorflow.quantization.utils.graph_util", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[363, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[371, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[364, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[365, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[366, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[367, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[368, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[369, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[370, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[372, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[373, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[374, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[375, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[376, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[377, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[378, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[379, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[380, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[383, "module-neural_compressor.tensorflow.quantization.utils.transform_graph", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[381, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[382, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[384, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[385, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", false]], "neural_compressor.tensorflow.quantization.utils.utility": [[386, "module-neural_compressor.tensorflow.quantization.utils.utility", false]], "neural_compressor.tensorflow.utils": [[389, "module-neural_compressor.tensorflow.utils", false]], "neural_compressor.tensorflow.utils.constants": [[387, "module-neural_compressor.tensorflow.utils.constants", false]], "neural_compressor.tensorflow.utils.data": [[388, "module-neural_compressor.tensorflow.utils.data", false]], "neural_compressor.tensorflow.utils.model": [[390, "module-neural_compressor.tensorflow.utils.model", false]], "neural_compressor.tensorflow.utils.model_wrappers": [[391, "module-neural_compressor.tensorflow.utils.model_wrappers", false]], "neural_compressor.tensorflow.utils.utility": [[392, "module-neural_compressor.tensorflow.utils.utility", false]], "neural_compressor.torch": [[440, "module-neural_compressor.torch", false]], "neural_compressor.torch.algorithms": [[398, "module-neural_compressor.torch.algorithms", false]], "neural_compressor.torch.algorithms.base_algorithm": [[393, "module-neural_compressor.torch.algorithms.base_algorithm", false]], "neural_compressor.torch.algorithms.fp8_quant.observer": [[394, "module-neural_compressor.torch.algorithms.fp8_quant.observer", false]], "neural_compressor.torch.algorithms.fp8_quant.patched_module_base": [[395, "module-neural_compressor.torch.algorithms.fp8_quant.patched_module_base", false]], "neural_compressor.torch.algorithms.fp8_quant.scaling_method_base": [[396, "module-neural_compressor.torch.algorithms.fp8_quant.scaling_method_base", false]], "neural_compressor.torch.algorithms.fp8_quant.utils.logger": [[397, "module-neural_compressor.torch.algorithms.fp8_quant.utils.logger", false]], "neural_compressor.torch.algorithms.layer_wise": [[399, "module-neural_compressor.torch.algorithms.layer_wise", false]], "neural_compressor.torch.algorithms.layer_wise.load": [[400, "module-neural_compressor.torch.algorithms.layer_wise.load", false]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[401, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle", false]], "neural_compressor.torch.algorithms.layer_wise.utils": [[402, "module-neural_compressor.torch.algorithms.layer_wise.utils", false]], "neural_compressor.torch.algorithms.mixed_precision": [[404, "module-neural_compressor.torch.algorithms.mixed_precision", false]], "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert": [[403, "module-neural_compressor.torch.algorithms.mixed_precision.half_precision_convert", false]], "neural_compressor.torch.algorithms.mixed_precision.module_wrappers": [[405, "module-neural_compressor.torch.algorithms.mixed_precision.module_wrappers", false]], "neural_compressor.torch.algorithms.mx_quant": [[406, "module-neural_compressor.torch.algorithms.mx_quant", false]], "neural_compressor.torch.algorithms.mx_quant.mx": [[407, "module-neural_compressor.torch.algorithms.mx_quant.mx", false]], "neural_compressor.torch.algorithms.mx_quant.utils": [[408, "module-neural_compressor.torch.algorithms.mx_quant.utils", false]], "neural_compressor.torch.algorithms.pt2e_quant": [[411, "module-neural_compressor.torch.algorithms.pt2e_quant", false]], "neural_compressor.torch.algorithms.pt2e_quant.core": [[409, "module-neural_compressor.torch.algorithms.pt2e_quant.core", false]], "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter": [[410, "module-neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter", false]], "neural_compressor.torch.algorithms.pt2e_quant.save_load": [[412, "module-neural_compressor.torch.algorithms.pt2e_quant.save_load", false]], "neural_compressor.torch.algorithms.pt2e_quant.utility": [[413, "module-neural_compressor.torch.algorithms.pt2e_quant.utility", false]], "neural_compressor.torch.algorithms.smooth_quant": [[414, "module-neural_compressor.torch.algorithms.smooth_quant", false]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[415, "module-neural_compressor.torch.algorithms.smooth_quant.save_load", false]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[416, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant", false]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[417, "module-neural_compressor.torch.algorithms.smooth_quant.utility", false]], "neural_compressor.torch.algorithms.static_quant": [[418, "module-neural_compressor.torch.algorithms.static_quant", false]], "neural_compressor.torch.algorithms.static_quant.save_load": [[419, "module-neural_compressor.torch.algorithms.static_quant.save_load", false]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[420, "module-neural_compressor.torch.algorithms.static_quant.static_quant", false]], "neural_compressor.torch.algorithms.static_quant.utility": [[421, "module-neural_compressor.torch.algorithms.static_quant.utility", false]], "neural_compressor.torch.algorithms.weight_only": [[432, "module-neural_compressor.torch.algorithms.weight_only", false]], "neural_compressor.torch.algorithms.weight_only.autoround": [[422, "module-neural_compressor.torch.algorithms.weight_only.autoround", false]], "neural_compressor.torch.algorithms.weight_only.awq": [[423, "module-neural_compressor.torch.algorithms.weight_only.awq", false]], "neural_compressor.torch.algorithms.weight_only.gptq": [[424, "module-neural_compressor.torch.algorithms.weight_only.gptq", false]], "neural_compressor.torch.algorithms.weight_only.hqq": [[428, "module-neural_compressor.torch.algorithms.weight_only.hqq", false]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[425, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack", false]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[426, "module-neural_compressor.torch.algorithms.weight_only.hqq.config", false]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[427, "module-neural_compressor.torch.algorithms.weight_only.hqq.core", false]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[429, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer", false]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[430, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor", false]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[431, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer", false]], "neural_compressor.torch.algorithms.weight_only.modules": [[433, "module-neural_compressor.torch.algorithms.weight_only.modules", false]], "neural_compressor.torch.algorithms.weight_only.rtn": [[434, "module-neural_compressor.torch.algorithms.weight_only.rtn", false]], "neural_compressor.torch.algorithms.weight_only.save_load": [[435, "module-neural_compressor.torch.algorithms.weight_only.save_load", false]], "neural_compressor.torch.algorithms.weight_only.teq": [[436, "module-neural_compressor.torch.algorithms.weight_only.teq", false]], "neural_compressor.torch.algorithms.weight_only.utility": [[437, "module-neural_compressor.torch.algorithms.weight_only.utility", false]], "neural_compressor.torch.export": [[438, "module-neural_compressor.torch.export", false]], "neural_compressor.torch.export.pt2e_export": [[439, "module-neural_compressor.torch.export.pt2e_export", false]], "neural_compressor.torch.quantization": [[444, "module-neural_compressor.torch.quantization", false]], "neural_compressor.torch.quantization.algorithm_entry": [[441, "module-neural_compressor.torch.quantization.algorithm_entry", false]], "neural_compressor.torch.quantization.autotune": [[442, "module-neural_compressor.torch.quantization.autotune", false]], "neural_compressor.torch.quantization.config": [[443, "module-neural_compressor.torch.quantization.config", false]], "neural_compressor.torch.quantization.quantize": [[445, "module-neural_compressor.torch.quantization.quantize", false]], "neural_compressor.torch.quantization.save_load_entry": [[446, "module-neural_compressor.torch.quantization.save_load_entry", false]], "neural_compressor.torch.utils": [[452, "module-neural_compressor.torch.utils", false]], "neural_compressor.torch.utils.auto_accelerator": [[447, "module-neural_compressor.torch.utils.auto_accelerator", false]], "neural_compressor.torch.utils.bit_packer": [[448, "module-neural_compressor.torch.utils.bit_packer", false]], "neural_compressor.torch.utils.block_wise": [[449, "module-neural_compressor.torch.utils.block_wise", false]], "neural_compressor.torch.utils.constants": [[450, "module-neural_compressor.torch.utils.constants", false]], "neural_compressor.torch.utils.environ": [[451, "module-neural_compressor.torch.utils.environ", false]], "neural_compressor.torch.utils.utility": [[453, "module-neural_compressor.torch.utils.utility", false]], "neural_compressor.training": [[454, "module-neural_compressor.training", false]], "neural_compressor.transformers.quantization.utils": [[455, "module-neural_compressor.transformers.quantization.utils", false]], "neural_compressor.transformers.utils": [[456, "module-neural_compressor.transformers.utils", false]], "neural_compressor.transformers.utils.quantization_config": [[457, "module-neural_compressor.transformers.utils.quantization_config", false]], "neural_compressor.utils": [[465, "module-neural_compressor.utils", false]], "neural_compressor.utils.collect_layer_histogram": [[458, "module-neural_compressor.utils.collect_layer_histogram", false]], "neural_compressor.utils.constant": [[459, "module-neural_compressor.utils.constant", false]], "neural_compressor.utils.create_obj_from_config": [[460, "module-neural_compressor.utils.create_obj_from_config", false]], "neural_compressor.utils.export": [[461, "module-neural_compressor.utils.export", false]], "neural_compressor.utils.export.qlinear2qdq": [[462, "module-neural_compressor.utils.export.qlinear2qdq", false]], "neural_compressor.utils.export.tf2onnx": [[463, "module-neural_compressor.utils.export.tf2onnx", false]], "neural_compressor.utils.export.torch2onnx": [[464, "module-neural_compressor.utils.export.torch2onnx", false]], "neural_compressor.utils.kl_divergence": [[466, "module-neural_compressor.utils.kl_divergence", false]], "neural_compressor.utils.load_huggingface": [[467, "module-neural_compressor.utils.load_huggingface", false]], "neural_compressor.utils.logger": [[468, "module-neural_compressor.utils.logger", false]], "neural_compressor.utils.options": [[469, "module-neural_compressor.utils.options", false]], "neural_compressor.utils.pytorch": [[470, "module-neural_compressor.utils.pytorch", false]], "neural_compressor.utils.utility": [[471, "module-neural_compressor.utils.utility", false]], "neural_compressor.utils.weights_details": [[472, "module-neural_compressor.utils.weights_details", false]], "neural_compressor.version": [[473, "module-neural_compressor.version", false]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[135, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map", false]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[325, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map", false]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[326, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map", false]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[328, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[325, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[326, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[328, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input", false]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[228, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re", false]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[20, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator", false]], "normalize_answer() (in module neural_compressor.metric.f1)": [[233, "neural_compressor.metric.f1.normalize_answer", false]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.NormalizeTFTransform", false]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.NormalizeTransform", false]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[235, "neural_compressor.metric.metric.GeneralTopK.num_correct", false]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[235, "neural_compressor.metric.metric.TensorflowTopK.num_correct", false]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[235, "neural_compressor.metric.metric.GeneralTopK.num_sample", false]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[235, "neural_compressor.metric.metric.TensorflowTopK.num_sample", false]], "objective (class in neural_compressor.objective)": [[246, "neural_compressor.objective.Objective", false]], "objective_custom_registry() (in module neural_compressor.objective)": [[246, "neural_compressor.objective.objective_custom_registry", false]], "objective_registry() (in module neural_compressor.objective)": [[246, "neural_compressor.objective.objective_registry", false]], "observerbase (class in neural_compressor.torch.algorithms.fp8_quant.observer)": [[394, "neural_compressor.torch.algorithms.fp8_quant.observer.ObserverBase", false]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[191, "neural_compressor.compression.pruner.schedulers.OneshotScheduler", false]], "onnx (class in neural_compressor.config)": [[196, "neural_compressor.config.ONNX", false]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[462, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq", false]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform", false]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph", false]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[243, "neural_compressor.model.onnx_model.ONNXModel", false]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode", false]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema", false]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[250, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser", false]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.ONNXQlinear2QDQConfig", false]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform", false]], "onnxrt (class in neural_compressor.utils.options)": [[469, "neural_compressor.utils.options.onnxrt", false]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[2, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment", false]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[206, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader", false]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[210, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset", false]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox", false]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[206, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader", false]], "onnxrtglue (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.ONNXRTGLUE", false]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[215, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset", false]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets", false]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[219, "neural_compressor.data.filters.filter.ONNXRTITFilters", false]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.ONNXRTITMetrics", false]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ONNXRTITTransforms", false]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[249, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory", false]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets", false]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[219, "neural_compressor.data.filters.filter.ONNXRTQLFilters", false]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.ONNXRTQLMetrics", false]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms", false]], "op_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[156, "neural_compressor.common.tuning_param.ParamLevel.OP_LEVEL", false]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[21, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry", false]], "op_type_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[156, "neural_compressor.common.tuning_param.ParamLevel.OP_TYPE_LEVEL", false]], "opentry (class in neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.OpEntry", false]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[21, "neural_compressor.adaptor.ox_utils.operators.ops.Operator", false]], "operatorconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[300, "neural_compressor.tensorflow.keras.quantization.config.OperatorConfig", false]], "operatorconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.OperatorConfig", false]], "optimize_weights_proximal_legacy() (in module neural_compressor.torch.algorithms.weight_only.hqq.optimizer)": [[429, "neural_compressor.torch.algorithms.weight_only.hqq.optimizer.optimize_weights_proximal_legacy", false]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[467, "neural_compressor.utils.load_huggingface.OptimizedModel", false]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph", false]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[372, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph", false]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[166, "neural_compressor.compression.distillation.optimizers.optimizer_registry", false]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[166, "neural_compressor.compression.distillation.optimizers.Optimizers", false]], "options (class in neural_compressor.config)": [[196, "neural_compressor.config.Options", false]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[280, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig", false]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.OpType", false]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler", false]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler", false]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[281, "neural_compressor.strategy.utils.utility.OrderedDefaultDict", false]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[29, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant", false]], "pack_array_with_numba_b2_c16() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b2_c16", false]], "pack_array_with_numba_b2_c32() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b2_c32", false]], "pack_array_with_numba_b2_c64() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b2_c64", false]], "pack_array_with_numba_b2_c8() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b2_c8", false]], "pack_array_with_numba_b4_c16() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b4_c16", false]], "pack_array_with_numba_b4_c32() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b4_c32", false]], "pack_array_with_numba_b4_c64() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b4_c64", false]], "pack_array_with_numba_b4_c8() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b4_c8", false]], "pack_array_with_numba_b8_c16() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b8_c16", false]], "pack_array_with_numba_b8_c32() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b8_c32", false]], "pack_array_with_numba_b8_c64() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b8_c64", false]], "pack_array_with_numba_b8_c8() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.pack_array_with_numba_b8_c8", false]], "packer (class in neural_compressor.torch.algorithms.weight_only.hqq.bitpack)": [[425, "neural_compressor.torch.algorithms.weight_only.hqq.bitpack.Packer", false]], "packing (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[430, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.packing", false]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor", false]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform", false]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[22, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator", false]], "paramlevel (class in neural_compressor.common.tuning_param)": [[156, "neural_compressor.common.tuning_param.ParamLevel", false]], "params_list (neural_compressor.common.base_config.baseconfig attribute)": [[152, "neural_compressor.common.base_config.BaseConfig.params_list", false]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config", false]], "parse_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.parse_cfgs", false]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.parse_last_linear", false]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.parse_last_linear_tf", false]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.parse_saved_model", false]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model", false]], "parse_str2list() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.parse_str2list", false]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.parse_to_prune", false]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.parse_to_prune_tf", false]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config", false]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[184, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types", false]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[210, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert", false]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[211, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco", false]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet", false]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform", false]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform", false]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[248, "neural_compressor.profiling.parser.factory.ParserFactory", false]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.paser_cfgs", false]], "patch_hqq_moduile() (in module neural_compressor.torch.algorithms.weight_only.hqq.quantizer)": [[431, "neural_compressor.torch.algorithms.weight_only.hqq.quantizer.patch_hqq_moduile", false]], "patchedmodulebase (class in neural_compressor.torch.algorithms.fp8_quant.patched_module_base)": [[395, "neural_compressor.torch.algorithms.fp8_quant.patched_module_base.PatchedModuleBase", false]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern", false]], "pattern_factory() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.pattern_factory", false]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[279, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal", false]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[279, "neural_compressor.strategy.utils.tuning_space.pattern_to_path", false]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[178, "neural_compressor.compression.pruner.patterns.mha.PatternMHA", false]], "patternpair (class in neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair", false]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[3, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator", false]], "performance (class in neural_compressor.objective)": [[246, "neural_compressor.objective.Performance", false]], "pickleerror": [[138, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError", false], [401, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError", false]], "picklingerror": [[138, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError", false], [401, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError", false]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[23, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator", false]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils", false]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer", false]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[355, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer", false]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter", false]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[354, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter", false]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[224, "neural_compressor.data.transforms.postprocess.Postprocess", false]], "postprocess_model() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.postprocess_model", false]], "posttrainingquantconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.PostTrainingQuantConfig", false]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[235, "neural_compressor.metric.metric.Accuracy.pred_list", false]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[235, "neural_compressor.metric.metric.MAE.pred_list", false]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[235, "neural_compressor.metric.metric.MSE.pred_list", false]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[228, "neural_compressor.metric.bleu.BLEU.predictions", false]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization", false]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[337, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization", false]], "prepare() (in module neural_compressor.torch.quantization.quantize)": [[445, "neural_compressor.torch.quantization.quantize.prepare", false]], "prepare_compression() (in module neural_compressor.training)": [[454, "neural_compressor.training.prepare_compression", false]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader", false]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs", false]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.prepare_model", false]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data", false]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[171, "neural_compressor.compression.pruner.prepare_pruning", false]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[281, "neural_compressor.strategy.utils.utility.preprocess_user_cfg", false]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables", false]], "print_op_list() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.print_op_list", false]], "print_table() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.print_table", false]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.process_and_check_config", false]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.process_config", false]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.process_weight_config", false]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.process_yaml_config", false]], "processortype (class in neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.ProcessorType", false]], "profile() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.profile", false]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[257, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler", false]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[259, "neural_compressor.profiling.profiler.profiler.Profiler", false]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[261, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler", false]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[255, "neural_compressor.profiling.profiler.factory.ProfilerFactory", false]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[256, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory", false]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[260, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory", false]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[251, "neural_compressor.profiling.parser.parser.ProfilingParser", false]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[252, "neural_compressor.profiling.parser.result.ProfilingResult", false]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info", false]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info", false]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info", false]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.BasePruning.pruners", false]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners", false]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[189, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency", false]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[163, "neural_compressor.compression.callbacks.PruningCallbacks", false]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.PruningCriterion", false]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[192, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion", false]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[191, "neural_compressor.compression.pruner.schedulers.PruningScheduler", false]], "pt2e_dynamic_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.pt2e_dynamic_quant_entry", false]], "pt2e_static_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.pt2e_static_quant_entry", false]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[228, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re", false]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner", false]], "pytorch (class in neural_compressor.config)": [[196, "neural_compressor.config.PyTorch", false]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel", false]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[245, "neural_compressor.model.torch_model.PyTorchBaseModel", false]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern", false]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner", false]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner", false]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[210, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset", false]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner", false]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.PytorchCIFAR10", false]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.PytorchCIFAR100", false]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchCriterions", false]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform", false]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss", false]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[207, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader", false]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.PyTorchDatasets", false]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST", false]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[219, "neural_compressor.data.filters.filter.PyTorchFilters", false]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[245, "neural_compressor.model.torch_model.PyTorchFXModel", false]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[215, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw", false]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss", false]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper", false]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss", false]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper", false]], "pytorchloss (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.PyTorchLoss", false]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.PyTorchMetrics", false]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.PytorchMNIST", false]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[245, "neural_compressor.model.torch_model.PyTorchModel", false]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.PytorchMxnetTransform", false]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset", false]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction", false]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform", false]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[166, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers", false]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[186, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner", false]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[179, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM", false]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[180, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM", false]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[187, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner", false]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner", false]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss", false]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper", false]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[166, "neural_compressor.compression.distillation.optimizers.PyTorchSGD", false]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.PyTorchTransforms", false]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.PyTorchTranspose", false]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[5, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator", false]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[6, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator", false]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[101, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function", false]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[7, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator", false]], "qavgpool2d (class in neural_compressor.tensorflow.keras.layers.pool2d)": [[298, "neural_compressor.tensorflow.keras.layers.pool2d.QAvgPool2D", false]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[8, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator", false]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[9, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator", false]], "qconv2d (class in neural_compressor.tensorflow.keras.layers.conv2d)": [[293, "neural_compressor.tensorflow.keras.layers.conv2d.QConv2D", false]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[10, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator", false]], "qdense (class in neural_compressor.tensorflow.keras.layers.dense)": [[294, "neural_compressor.tensorflow.keras.layers.dense.QDense", false]], "qdepthwiseconv2d (class in neural_compressor.tensorflow.keras.layers.depthwise_conv2d)": [[295, "neural_compressor.tensorflow.keras.layers.depthwise_conv2d.QDepthwiseConv2D", false]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[11, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator", false]], "qdq_quantize() (in module neural_compressor.torch.algorithms.smooth_quant.smooth_quant)": [[416, "neural_compressor.torch.algorithms.smooth_quant.smooth_quant.qdq_quantize", false]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor", false]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_actor", false]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_asym", false]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_sym", false]], "qdqlayer (class in neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.QDQLayer", false]], "qdqlayer (class in neural_compressor.torch.algorithms.weight_only.modules)": [[433, "neural_compressor.torch.algorithms.weight_only.modules.QDQLayer", false]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[12, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator", false]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[13, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator", false]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[15, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator", false]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[14, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator", false]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[18, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator", false]], "qmaxpool2d (class in neural_compressor.tensorflow.keras.layers.pool2d)": [[298, "neural_compressor.tensorflow.keras.layers.pool2d.QMaxPool2D", false]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[19, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator", false]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[21, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry", false]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[21, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator", false]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[22, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator", false]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[23, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator", false]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[25, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator", false]], "qseparableconv2d (class in neural_compressor.tensorflow.keras.layers.separable_conv2d)": [[299, "neural_compressor.tensorflow.keras.layers.separable_conv2d.QSeparableConv2D", false]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[26, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator", false]], "qtensor (class in neural_compressor.torch.algorithms.weight_only.hqq.qtensor)": [[430, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensor", false]], "qtensorconfig (class in neural_compressor.torch.algorithms.weight_only.hqq.config)": [[426, "neural_compressor.torch.algorithms.weight_only.hqq.config.QTensorConfig", false]], "qtensormetainfo (class in neural_compressor.torch.algorithms.weight_only.hqq.qtensor)": [[430, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo", false]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[29, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data", false]], "quant_dequant_w_v1() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.quant_dequant_w_v1", false]], "quant_dequant_x_v1() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.quant_dequant_x_v1", false]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[279, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern", false]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor", false]], "quant_tensor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.quant_tensor", false]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.quant_weight_w_scale", false]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.QuantFormat", false]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[163, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks", false]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.QuantizationAwareTrainingConfig", false]], "quantizationmethod (class in neural_compressor.transformers.utils.quantization_config)": [[457, "neural_compressor.transformers.utils.quantization_config.QuantizationMethod", false]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.QuantizationMode", false]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[445, "neural_compressor.torch.quantization.quantize.quantize", false]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.quantize_4bit", false]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.quantize_data", false]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel", false]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero", false]], "quantize_elemwise_op() (in module neural_compressor.torch.algorithms.mx_quant.utils)": [[408, "neural_compressor.torch.algorithms.mx_quant.utils.quantize_elemwise_op", false]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[306, "neural_compressor.tensorflow.quantization.quantize.quantize_model", false]], "quantize_model_with_single_config() (in module neural_compressor.tensorflow.quantization.quantize)": [[306, "neural_compressor.tensorflow.quantization.quantize.quantize_model_with_single_config", false]], "quantize_mx_op() (in module neural_compressor.torch.algorithms.mx_quant.utils)": [[408, "neural_compressor.torch.algorithms.mx_quant.utils.quantize_mx_op", false]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.quantize_nparray", false]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model", false]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[100, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig", false]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer", false]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput", false]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter", false]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.QuantizedValue", false]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType", false]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase", false]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[373, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase", false]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel", false]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[377, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel", false]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper", false]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[380, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper", false]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd", false]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase", false]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[106, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization", false]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase", false]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[373, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase", false]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[28, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer", false]], "quantizer (class in neural_compressor.torch.algorithms.base_algorithm)": [[393, "neural_compressor.torch.algorithms.base_algorithm.Quantizer", false]], "quantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[424, "neural_compressor.torch.algorithms.weight_only.gptq.Quantizer", false]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper", false]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase", false]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[281, "neural_compressor.strategy.utils.utility.QuantOptions", false]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.QuantType", false]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[281, "neural_compressor.strategy.utils.utility.QuantType", false]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes", false]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RandomCropTFTransform", false]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RandomCropTransform", false]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RandomHorizontalFlip", false]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform", false]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform", false]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform", false]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RandomResizedCropTransform", false]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[274, "neural_compressor.strategy.random.RandomTuneStrategy", false]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RandomVerticalFlip", false]], "rawgptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[424, "neural_compressor.torch.algorithms.weight_only.gptq.RAWGPTQuantizer", false]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.read_graph", false]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.read_graph", false]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.read_squad_examples", false]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs", false]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe", false]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher", false]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model", false]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model", false]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[167, "neural_compressor.compression.distillation.utility.record_output", false]], "recover() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.recover", false]], "recover_forward() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.recover_forward", false]], "recover_forward() (in module neural_compressor.torch.utils.block_wise)": [[449, "neural_compressor.torch.utils.block_wise.recover_forward", false]], "recover_model_from_json() (in module neural_compressor.torch.algorithms.smooth_quant.save_load)": [[415, "neural_compressor.torch.algorithms.smooth_quant.save_load.recover_model_from_json", false]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[470, "neural_compressor.utils.pytorch.recover_model_from_json", false]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[24, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator", false]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[24, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator", false]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg", false]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[190, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms", false]], "register_accelerator() (in module neural_compressor.torch.utils.auto_accelerator)": [[447, "neural_compressor.torch.utils.auto_accelerator.register_accelerator", false]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.register_algo", false]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.register_algo", false]], "register_autotune() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.register_autotune", false]], "register_config() (in module neural_compressor.common.base_config)": [[152, "neural_compressor.common.base_config.register_config", false]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.register_criterion", false]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[192, "neural_compressor.compression.pruner.tf_criteria.register_criterion", false]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.register_customer_metric", false]], "register_observer() (in module neural_compressor.torch.algorithms.fp8_quant.observer)": [[394, "neural_compressor.torch.algorithms.fp8_quant.observer.register_observer", false]], "register_pack_func() (in module neural_compressor.torch.utils.bit_packer)": [[448, "neural_compressor.torch.utils.bit_packer.register_pack_func", false]], "register_patched_module() (in module neural_compressor.torch.algorithms.fp8_quant.patched_module_base)": [[395, "neural_compressor.torch.algorithms.fp8_quant.patched_module_base.register_patched_module", false]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[176, "neural_compressor.compression.pruner.patterns.base.register_pattern", false]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[181, "neural_compressor.compression.pruner.pruners.base.register_pruner", false]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[189, "neural_compressor.compression.pruner.pruning.register_pruning", false]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[190, "neural_compressor.compression.pruner.regs.register_reg", false]], "register_scaling_methods() (in module neural_compressor.torch.algorithms.fp8_quant.scaling_method_base)": [[396, "neural_compressor.torch.algorithms.fp8_quant.scaling_method_base.register_scaling_methods", false]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[191, "neural_compressor.compression.pruner.schedulers.register_scheduler", false]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[152, "neural_compressor.common.base_config.register_supported_configs_for_fwk", false]], "register_weight_hooks() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.register_weight_hooks", false]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[5, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator", false]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input", false]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer", false]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[338, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer", false]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer", false]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[339, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer", false]], "replace_forward() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.replace_forward", false]], "replace_forward() (in module neural_compressor.torch.utils.block_wise)": [[449, "neural_compressor.torch.utils.block_wise.replace_forward", false]], "replace_pattern (neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.patternpair attribute)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair.replace_pattern", false]], "replacement_fn() (in module neural_compressor.torch.algorithms.weight_only.hqq.quantizer)": [[431, "neural_compressor.torch.algorithms.weight_only.hqq.quantizer.replacement_fn", false]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[132, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat", false]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[385, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat", false]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform", false]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RescaleTFTransform", false]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.RescaleTransform", false]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.reset_none_to_default", false]], "reshape_in_channel_to_last() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_in_channel_to_last", false]], "reshape_scale_as_input() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_scale_as_input", false]], "reshape_scale_as_weight() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_scale_as_weight", false]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ResizeMXNetTransform", false]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[25, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator", false]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ResizePytorchTransform", false]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ResizeTFTransform", false]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ResizeTransform", false]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio", false]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ResizeWithRatio", false]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion", false]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[189, "neural_compressor.compression.pruner.pruning.RetrainFreePruning", false]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[281, "neural_compressor.strategy.utils.utility.reverted_data_type", false]], "rmse (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.RMSE", false]], "roc (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.ROC", false]], "roundingmode (class in neural_compressor.torch.algorithms.mx_quant.utils)": [[408, "neural_compressor.torch.algorithms.mx_quant.utils.RoundingMode", false]], "rtn_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.rtn_entry", false]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[31, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize", false]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.RTNConfig", false]], "rtnconfig (class in neural_compressor.transformers.utils.quantization_config)": [[457, "neural_compressor.transformers.utils.quantization_config.RtnConfig", false]], "rtnquantizer (class in neural_compressor.torch.algorithms.weight_only.rtn)": [[434, "neural_compressor.torch.algorithms.weight_only.rtn.RTNQuantizer", false]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.run_forward", false]], "run_instance() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.run_instance", false]], "run_multi_instance_command() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.run_multi_instance_command", false]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[235, "neural_compressor.metric.metric.Accuracy.sample", false]], "sample (neural_compressor.metric.metric.loss attribute)": [[235, "neural_compressor.metric.metric.Loss.sample", false]], "sampler (class in neural_compressor.common.base_tuning)": [[153, "neural_compressor.common.base_tuning.Sampler", false]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[208, "neural_compressor.data.dataloaders.sampler.Sampler", false]], "save() (in module neural_compressor.compression.pruner)": [[171, "neural_compressor.compression.pruner.save", false]], "save() (in module neural_compressor.torch.algorithms.pt2e_quant.save_load)": [[412, "neural_compressor.torch.algorithms.pt2e_quant.save_load.save", false]], "save() (in module neural_compressor.torch.algorithms.static_quant.save_load)": [[419, "neural_compressor.torch.algorithms.static_quant.save_load.save", false]], "save() (in module neural_compressor.torch.algorithms.weight_only.save_load)": [[435, "neural_compressor.torch.algorithms.weight_only.save_load.save", false]], "save() (in module neural_compressor.torch.quantization.save_load_entry)": [[446, "neural_compressor.torch.quantization.save_load_entry.save", false]], "save_config_mapping() (in module neural_compressor.common.utils.save_load)": [[160, "neural_compressor.common.utils.save_load.save_config_mapping", false]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[467, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream", false]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf", false]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.saved_model_session", false]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session", false]], "saveloadformat (class in neural_compressor.torch.utils.constants)": [[450, "neural_compressor.torch.utils.constants.SaveLoadFormat", false]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer", false]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[356, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer", false]], "scalingmethodbase (class in neural_compressor.torch.algorithms.fp8_quant.scaling_method_base)": [[396, "neural_compressor.torch.algorithms.fp8_quant.scaling_method_base.ScalingMethodBase", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler", false]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores", false]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[192, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[192, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores", false]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.search_clip", false]], "search_pattern (neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.patternpair attribute)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair.search_pattern", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results", false]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss", false]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.SelfKnowledgeDistillationLossConfig", false]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher", false]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType", false]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[153, "neural_compressor.common.base_tuning.SequentialSampler", false]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[208, "neural_compressor.data.dataloaders.sampler.SequentialSampler", false]], "sequentialsampler (class in neural_compressor.tensorflow.utils.data)": [[388, "neural_compressor.tensorflow.utils.data.SequentialSampler", false]], "set_all_env_var() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.set_all_env_var", false]], "set_cores_for_instance() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.set_cores_for_instance", false]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[262, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution", false]], "set_env_var() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.set_env_var", false]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.set_module", false]], "set_module() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.set_module", false]], "set_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[437, "neural_compressor.torch.algorithms.weight_only.utility.set_module", false]], "set_module() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.set_module", false]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name", false]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.set_random_seed", false]], "set_random_seed() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.set_random_seed", false]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.set_resume_from", false]], "set_resume_from() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.set_resume_from", false]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.set_tensorboard", false]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.set_tensorboard", false]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.set_workspace", false]], "set_workspace() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.set_workspace", false]], "shape (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[430, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.shape", false]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer", false]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[360, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer", false]], "show_memory_info() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.show_memory_info", false]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[199, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy", false]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.simple_inference", false]], "simple_inference() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.simple_inference", false]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar", false]], "singleton() (in module neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.singleton", false]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.singleton", false]], "singleton() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.singleton", false]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.slim_session", false]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.slim_session", false]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[3, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution", false]], "smooth_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[302, "neural_compressor.tensorflow.quantization.algorithm_entry.smooth_quant_entry", false]], "smooth_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.smooth_quant_entry", false]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[149, "neural_compressor.algorithm.smooth_quant.SmoothQuant", false]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[285, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant", false]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[125, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration", false]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[284, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration", false]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[125, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM", false]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[284, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM", false]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[304, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig", false]], "smoothquantconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.SmoothQuantConfig", false]], "smoothquantquantizer (class in neural_compressor.torch.algorithms.smooth_quant.smooth_quant)": [[416, "neural_compressor.torch.algorithms.smooth_quant.smooth_quant.SmoothQuantQuantizer", false]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler", false]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler", false]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[287, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler", false]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM", false]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[287, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM", false]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.SnipCriterion", false]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion", false]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[214, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset", false]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[189, "neural_compressor.compression.pruner.pruning.SparseGPTPruning", false]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.split_shared_bias", false]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[26, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator", false]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer", false]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[340, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer", false]], "sqlinearwrapper (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.SQLinearWrapper", false]], "squadexample (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.SquadExample", false]], "squadf1 (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.SquadF1", false]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step", false]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step", false]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph", false]], "static_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[302, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quant_entry", false]], "static_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.static_quant_entry", false]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[464, "neural_compressor.utils.export.torch2onnx.static_quant_export", false]], "staticquantconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[300, "neural_compressor.tensorflow.keras.quantization.config.StaticQuantConfig", false]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[304, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig", false]], "staticquantconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.StaticQuantConfig", false]], "staticquantquantizer (class in neural_compressor.torch.algorithms.static_quant.static_quant)": [[420, "neural_compressor.torch.algorithms.static_quant.static_quant.StaticQuantQuantizer", false]], "statistics (class in neural_compressor.common.utils.utility)": [[161, "neural_compressor.common.utils.utility.Statistics", false]], "statistics (class in neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.Statistics", false]], "str2array() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.str2array", false]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[275, "neural_compressor.strategy.strategy.strategy_registry", false]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes", false]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes", false]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes", false]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes", false]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer", false]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[341, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer", false]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer", false]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[342, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer", false]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[217, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset", false]], "sum (neural_compressor.metric.metric.loss attribute)": [[235, "neural_compressor.metric.metric.Loss.sum", false]], "summary_benchmark() (in module neural_compressor.benchmark)": [[151, "neural_compressor.benchmark.summary_benchmark", false]], "summary_latency_throughput() (in module neural_compressor.common.benchmark)": [[154, "neural_compressor.common.benchmark.summary_latency_throughput", false]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer", false]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[343, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer", false]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[228, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re", false]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[144, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace", false]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers", false]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers", false]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio", false]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets", false]], "targetspace (class in neural_compressor.strategy.bayesian)": [[267, "neural_compressor.strategy.bayesian.TargetSpace", false]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[1, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector", false]], "tensorflow (class in neural_compressor.config)": [[196, "neural_compressor.config.TensorFlow", false]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.Tensorflow", false]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[32, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor", false]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[290, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor", false]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[166, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam", false]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[166, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW", false]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[32, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor", false]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[290, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor", false]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.TensorflowBaseModel", false]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel", false]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[209, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader", false]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[210, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset", false]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel", false]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel", false]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10", false]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100", false]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.TensorflowCOCOMAP", false]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[290, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig", false]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[290, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter", false]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorflowCriterions", false]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox", false]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss", false]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[209, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader", false]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.TensorflowDatasets", false]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST", false]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[219, "neural_compressor.data.filters.filter.TensorflowFilters", false]], "tensorflowglobalconfig (class in neural_compressor.tensorflow.utils.model)": [[390, "neural_compressor.tensorflow.utils.model.TensorflowGlobalConfig", false]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[215, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset", false]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[215, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw", false]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.TensorflowImageRecord", false]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss", false]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal", false]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper", false]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.TensorflowLLMModel", false]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel", false]], "tensorflowmap (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.TensorflowMAP", false]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.TensorflowMetrics", false]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.TensorflowMNIST", false]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.TensorflowModel", false]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel", false]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[209, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader", false]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[210, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset", false]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[166, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers", false]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[253, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory", false]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[254, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser", false]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.TensorflowQATModel", false]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[127, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter", false]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[32, "neural_compressor.adaptor.tensorflow.TensorflowQuery", false]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[290, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery", false]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip", false]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip", false]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform", false]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio", false]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel", false]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel", false]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[166, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD", false]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale", false]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy", false]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset", false]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.TensorflowTopK", false]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TensorflowTransform", false]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TensorflowTransforms", false]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TensorflowTranspose", false]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[222, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel", false]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.TensorflowVOCMAP", false]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[212, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord", false]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TensorflowWrapFunction", false]], "teq_quantize_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[441, "neural_compressor.torch.quantization.algorithm_entry.teq_quantize_entry", false]], "teqconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.TEQConfig", false]], "teqconfig (class in neural_compressor.transformers.utils.quantization_config)": [[457, "neural_compressor.transformers.utils.quantization_config.TeqConfig", false]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[142, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant", false]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[433, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant", false]], "tequantizer (class in neural_compressor.torch.algorithms.weight_only.teq)": [[436, "neural_compressor.torch.algorithms.weight_only.teq.TEQuantizer", false]], "tf2onnxconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.TF2ONNXConfig", false]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[463, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx", false]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[463, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx", false]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[209, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader", false]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform", false]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[242, "neural_compressor.model.nets_factory.TFSlimNetsFactory", false]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.TFSlimNetsFactory", false]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform", false]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform", false]], "time_limit() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.time_limit", false]], "to_device() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.to_device", false]], "to_dtype() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.to_dtype", false]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.to_numpy", false]], "toarray (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ToArray", false]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.ToNDArrayTransform", false]], "torch2onnxconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.Torch2ONNXConfig", false]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[464, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx", false]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[464, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx", false]], "torchbaseconfig (class in neural_compressor.torch.quantization.config)": [[443, "neural_compressor.torch.quantization.config.TorchBaseConfig", false]], "torchsmoothquant (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.TorchSmoothQuant", false]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[200, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy", false]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[144, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph", false]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[424, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks", false]], "trainableequivalenttransformation (class in neural_compressor.torch.algorithms.weight_only.teq)": [[436, "neural_compressor.torch.algorithms.weight_only.teq.TrainableEquivalentTransformation", false]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.transform_registry", false]], "transformation() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[410, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.transformation", false]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[143, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector", false]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.torch.algorithms.static_quant.utility)": [[421, "neural_compressor.torch.algorithms.static_quant.utility.TransformerBasedModelBlockPatternDetector", false]], "transforms (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.TRANSFORMS", false], [226, "neural_compressor.data.transforms.transform.Transforms", false]], "transpose (class in neural_compressor.data.transforms.transform)": [[226, "neural_compressor.data.transforms.transform.Transpose", false]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.trt_env_setup", false]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.try_loading_keras", false]], "try_loading_keras() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.try_loading_keras", false]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[275, "neural_compressor.strategy.strategy.TuneStrategy", false]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[275, "neural_compressor.strategy.strategy.TuneStrategyMeta", false]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[153, "neural_compressor.common.base_tuning.TuningConfig", false]], "tuningcriterion (class in neural_compressor.config)": [[196, "neural_compressor.config.TuningCriterion", false]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[279, "neural_compressor.strategy.utils.tuning_space.TuningItem", false]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[159, "neural_compressor.common.utils.logger.TuningLogger", false]], "tuningmonitor (class in neural_compressor.common.base_tuning)": [[153, "neural_compressor.common.base_tuning.TuningMonitor", false]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder", false]], "tuningparam (class in neural_compressor.common.tuning_param)": [[156, "neural_compressor.common.tuning_param.TuningParam", false]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler", false]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[279, "neural_compressor.strategy.utils.tuning_space.TuningSpace", false]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[27, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator", false]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[27, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator", false]], "unicoderegex (class in neural_compressor.metric.bleu)": [[228, "neural_compressor.metric.bleu.UnicodeRegex", false]], "unpackedweightonlylinearparams (class in neural_compressor.torch.algorithms.weight_only.modules)": [[433, "neural_compressor.torch.algorithms.weight_only.modules.UnpackedWeightOnlyLinearParams", false]], "unpicklingerror": [[138, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError", false], [401, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError", false]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module", false]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[402, "neural_compressor.torch.algorithms.layer_wise.utils.update_module", false]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[193, "neural_compressor.compression.pruner.utils.update_params", false]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[145, "neural_compressor.adaptor.torch_utils.util.update_sq_scale", false]], "update_sq_scale() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.update_sq_scale", false]], "valid_keras_format() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.valid_keras_format", false]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[325, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[326, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs", false]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output", false]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output", false]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[244, "neural_compressor.model.tensorflow_model.validate_graph_node", false]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[391, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node", false]], "validate_modules() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.validate_modules", false]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[30, "neural_compressor.adaptor.ox_utils.util.ValueInfo", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const", false]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[325, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const", false]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[326, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const", false]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[328, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const", false]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2", false]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.version1_eq_version2", false]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.version1_eq_version2", false]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2", false]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.version1_gt_version2", false]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.version1_gt_version2", false]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2", false]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.version1_gte_version2", false]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.version1_gte_version2", false]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2", false]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.version1_lt_version2", false]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.version1_lt_version2", false]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2", false]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[392, "neural_compressor.tensorflow.utils.utility.version1_lte_version2", false]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[471, "neural_compressor.utils.utility.version1_lte_version2", false]], "w8a8pt2equantizer (class in neural_compressor.torch.algorithms.pt2e_quant.core)": [[409, "neural_compressor.torch.algorithms.pt2e_quant.core.W8A8PT2EQuantizer", false]], "warn() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.warn", false]], "warning() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.warning", false]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[150, "neural_compressor.algorithm.weight_correction.WeightCorrection", false]], "weightonlylinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[433, "neural_compressor.torch.algorithms.weight_only.modules.WeightOnlyLinear", false]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[278, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler", false]], "weightpruningconfig (class in neural_compressor.config)": [[196, "neural_compressor.config.WeightPruningConfig", false]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[472, "neural_compressor.utils.weights_details.WeightsDetails", false]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[472, "neural_compressor.utils.weights_details.WeightsStatistics", false]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[225, "neural_compressor.data.transforms.tokenization.whitespace_tokenize", false]], "woqmodelloader (class in neural_compressor.torch.algorithms.weight_only.save_load)": [[435, "neural_compressor.torch.algorithms.weight_only.save_load.WOQModelLoader", false]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[225, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer", false]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.WrapMXNetMetric", false]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.WrapONNXRTMetric", false]], "wrapperlayer (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[417, "neural_compressor.torch.algorithms.smooth_quant.utility.WrapperLayer", false]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[235, "neural_compressor.metric.metric.WrapPyTorchMetric", false]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[133, "neural_compressor.adaptor.tf_utils.util.write_graph", false]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[386, "neural_compressor.tensorflow.quantization.utils.utility.write_graph", false]], "xpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[447, "neural_compressor.torch.utils.auto_accelerator.XPU_Accelerator", false]]}, "objects": {"": [[227, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[148, 0, 0, "-", "algorithm"], [151, 0, 0, "-", "benchmark"], [155, 0, 0, "-", "common"], [196, 0, 0, "-", "config"], [197, 0, 0, "-", "contrib"], [221, 0, 0, "-", "data"], [234, 0, 0, "-", "metric"], [236, 0, 0, "-", "mix_precision"], [238, 0, 0, "-", "model"], [246, 0, 0, "-", "objective"], [247, 0, 0, "-", "profiling"], [263, 0, 0, "-", "quantization"], [271, 0, 0, "-", "strategy"], [291, 0, 0, "-", "tensorflow"], [440, 0, 0, "-", "torch"], [454, 0, 0, "-", "training"], [465, 0, 0, "-", "utils"], [473, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[0, 0, 0, "-", "mxnet_utils"], [4, 0, 0, "-", "ox_utils"], [32, 0, 0, "-", "tensorflow"], [96, 0, 0, "-", "tf_utils"], [136, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.mxnet_utils": [[1, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[1, 1, 1, "", "CalibCollector"], [1, 1, 1, "", "CalibData"], [1, 1, 1, "", "CollectorBase"], [1, 1, 1, "", "DataIterLoader"], [1, 1, 1, "", "DataLoaderWrap"], [1, 1, 1, "", "NameCollector"], [1, 1, 1, "", "OpType"], [1, 1, 1, "", "TensorCollector"], [1, 2, 1, "", "amp_convert"], [1, 2, 1, "", "calib_model"], [1, 2, 1, "", "check_mx_version"], [1, 2, 1, "", "combine_capabilities"], [1, 2, 1, "", "create_data_example"], [1, 2, 1, "", "distribute_calib_tensors"], [1, 2, 1, "", "ensure_list"], [1, 2, 1, "", "fuse"], [1, 2, 1, "", "get_framework_name"], [1, 2, 1, "", "is_model_quantized"], [1, 2, 1, "", "isiterable"], [1, 2, 1, "", "make_module"], [1, 2, 1, "", "make_nc_model"], [1, 2, 1, "", "make_symbol_block"], [1, 2, 1, "", "ndarray_to_device"], [1, 2, 1, "", "parse_tune_config"], [1, 2, 1, "", "prepare_dataloader"], [1, 2, 1, "", "prepare_model"], [1, 2, 1, "", "prepare_model_data"], [1, 2, 1, "", "quantize_sym_model"], [1, 2, 1, "", "query_quantizable_nodes"], [1, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.ox_utils": [[2, 0, 0, "-", "calibration"], [3, 0, 0, "-", "calibrator"], [16, 0, 0, "-", "operators"], [28, 0, 0, "-", "quantizer"], [29, 0, 0, "-", "smooth_quant"], [30, 0, 0, "-", "util"], [31, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[2, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[3, 1, 1, "", "CalibratorBase"], [3, 1, 1, "", "HistogramCollector"], [3, 1, 1, "", "KLCalibrator"], [3, 1, 1, "", "MinMaxCalibrator"], [3, 1, 1, "", "PercentileCalibrator"], [3, 2, 1, "", "calib_registry"], [3, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[5, 0, 0, "-", "activation"], [6, 0, 0, "-", "argmax"], [7, 0, 0, "-", "attention"], [8, 0, 0, "-", "binary_op"], [9, 0, 0, "-", "concat"], [10, 0, 0, "-", "conv"], [11, 0, 0, "-", "direct_q8"], [12, 0, 0, "-", "embed_layernorm"], [13, 0, 0, "-", "gather"], [14, 0, 0, "-", "gavgpool"], [15, 0, 0, "-", "gemm"], [17, 0, 0, "-", "lstm"], [18, 0, 0, "-", "matmul"], [19, 0, 0, "-", "maxpool"], [20, 0, 0, "-", "norm"], [21, 0, 0, "-", "ops"], [22, 0, 0, "-", "pad"], [23, 0, 0, "-", "pooling"], [24, 0, 0, "-", "reduce"], [25, 0, 0, "-", "resize"], [26, 0, 0, "-", "split"], [27, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[5, 1, 1, "", "ActivationOperator"], [5, 1, 1, "", "Float16ActivationOperator"], [5, 1, 1, "", "QActivationOperator"], [5, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[6, 1, 1, "", "ArgMaxOperator"], [6, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[7, 1, 1, "", "AttentionOperator"], [7, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[8, 1, 1, "", "BinaryDirect8BitOperator"], [8, 1, 1, "", "BinaryOperator"], [8, 1, 1, "", "Float16BinaryOperator"], [8, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[9, 1, 1, "", "ConcatOperator"], [9, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[10, 1, 1, "", "ConvOperator"], [10, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[11, 1, 1, "", "Direct8BitOperator"], [11, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[12, 1, 1, "", "EmbedLayerNormalizationOperator"], [12, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[13, 1, 1, "", "GatherOperator"], [13, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[14, 1, 1, "", "GlobalAveragePoolOperator"], [14, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[15, 1, 1, "", "GemmOperator"], [15, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[17, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[18, 1, 1, "", "FusedMatMulOperator"], [18, 1, 1, "", "MatMulOperator"], [18, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[19, 1, 1, "", "MaxPoolOperator"], [19, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[20, 1, 1, "", "BatchNormalizationOperator"], [20, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[21, 1, 1, "", "Operator"], [21, 1, 1, "", "QOperator"], [21, 2, 1, "", "op_registry"], [21, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[22, 1, 1, "", "PadOperator"], [22, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[23, 1, 1, "", "PoolOperator"], [23, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[24, 1, 1, "", "ReduceMinMaxOperator"], [24, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[25, 1, 1, "", "QResizeOperator"], [25, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[26, 1, 1, "", "QSplitOperator"], [26, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[27, 1, 1, "", "UnaryDirect8BitOperator"], [27, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[28, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[29, 1, 1, "", "ORTSmoothQuant"], [29, 2, 1, "", "get_quant_dequant_output"], [29, 2, 1, "", "make_sub_graph"], [29, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[30, 1, 1, "", "QuantFormat"], [30, 1, 1, "", "QuantType"], [30, 1, 1, "", "QuantizationMode"], [30, 1, 1, "", "QuantizedInitializer"], [30, 1, 1, "", "QuantizedValue"], [30, 1, 1, "", "QuantizedValueType"], [30, 1, 1, "", "ValueInfo"], [30, 2, 1, "", "attribute_to_kwarg"], [30, 2, 1, "", "calculate_scale_zp"], [30, 2, 1, "", "cast_tensor"], [30, 2, 1, "", "collate_preds"], [30, 2, 1, "", "dequantize_data"], [30, 2, 1, "", "dequantize_data_with_scale_zero"], [30, 2, 1, "", "dtype_to_name"], [30, 2, 1, "", "find_by_name"], [30, 2, 1, "", "float_to_bfloat16"], [30, 2, 1, "", "float_to_float16"], [30, 2, 1, "", "get_node_original_name"], [30, 2, 1, "", "infer_shapes"], [30, 2, 1, "", "is_B_transposed"], [30, 2, 1, "", "make_dquant_node"], [30, 2, 1, "", "make_quant_node"], [30, 2, 1, "", "quantize_data"], [30, 2, 1, "", "quantize_data_per_channel"], [30, 2, 1, "", "quantize_data_with_scale_zero"], [30, 2, 1, "", "quantize_nparray"], [30, 2, 1, "", "remove_init_from_model_input"], [30, 2, 1, "", "simple_progress_bar"], [30, 2, 1, "", "split_shared_bias"], [30, 2, 1, "", "to_numpy"], [30, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[31, 2, 1, "", "apply_awq_clip"], [31, 2, 1, "", "apply_awq_scale"], [31, 2, 1, "", "awq_quantize"], [31, 2, 1, "", "get_blob_size"], [31, 2, 1, "", "get_weight_scale"], [31, 2, 1, "", "gptq"], [31, 2, 1, "", "gptq_quantize"], [31, 2, 1, "", "make_matmul_weight_only_node"], [31, 2, 1, "", "pad_tensor"], [31, 2, 1, "", "prepare_inputs"], [31, 2, 1, "", "qdq_tensor"], [31, 2, 1, "", "quant_tensor"], [31, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.tensorflow": [[32, 1, 1, "", "TensorFlowAdaptor"], [32, 1, 1, "", "TensorflowQuery"], [32, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[33, 0, 0, "-", "graph_converter"], [34, 0, 0, "-", "graph_converter_without_calib"], [72, 0, 0, "-", "graph_rewriter"], [95, 0, 0, "-", "graph_util"], [97, 0, 0, "-", "quantize_graph"], [124, 0, 0, "-", "quantize_graph_common"], [125, 0, 0, "-", "smooth_quant_calibration"], [126, 0, 0, "-", "smooth_quant_scaler"], [127, 0, 0, "-", "tf2onnx_converter"], [130, 0, 0, "-", "transform_graph"], [133, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[33, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[34, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[37, 0, 0, "-", "bf16"], [61, 0, 0, "-", "generic"], [71, 0, 0, "-", "graph_base"], [80, 0, 0, "-", "int8"], [86, 0, 0, "-", "onnx"], [91, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[35, 0, 0, "-", "bf16_convert"], [36, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[35, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[36, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[38, 0, 0, "-", "convert_add_to_biasadd"], [39, 0, 0, "-", "convert_layout"], [40, 0, 0, "-", "convert_leakyrelu"], [41, 0, 0, "-", "convert_nan_to_random"], [42, 0, 0, "-", "convert_placeholder_to_const"], [43, 0, 0, "-", "dilated_contraction"], [44, 0, 0, "-", "dummy_biasadd"], [45, 0, 0, "-", "expanddims_optimizer"], [46, 0, 0, "-", "fetch_weight_from_reshape"], [47, 0, 0, "-", "fold_batch_norm"], [48, 0, 0, "-", "fold_constant"], [49, 0, 0, "-", "fuse_biasadd_add"], [50, 0, 0, "-", "fuse_column_wise_mul"], [51, 0, 0, "-", "fuse_conv_with_math"], [52, 0, 0, "-", "fuse_decomposed_bn"], [53, 0, 0, "-", "fuse_decomposed_in"], [54, 0, 0, "-", "fuse_gelu"], [55, 0, 0, "-", "fuse_layer_norm"], [56, 0, 0, "-", "fuse_pad_with_conv"], [57, 0, 0, "-", "fuse_pad_with_fp32_conv"], [58, 0, 0, "-", "fuse_reshape_transpose"], [59, 0, 0, "-", "graph_cse_optimizer"], [60, 0, 0, "-", "grappler_pass"], [62, 0, 0, "-", "insert_print_node"], [63, 0, 0, "-", "move_squeeze_after_relu"], [64, 0, 0, "-", "pre_optimize"], [65, 0, 0, "-", "remove_training_nodes"], [66, 0, 0, "-", "rename_batch_norm"], [67, 0, 0, "-", "split_shared_input"], [68, 0, 0, "-", "strip_equivalent_nodes"], [69, 0, 0, "-", "strip_unused_nodes"], [70, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[38, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[39, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[40, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[41, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[42, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[43, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[44, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[45, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[46, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[47, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[48, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[49, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[50, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[51, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[52, 1, 1, "", "FuseDecomposedBNOptimizer"], [52, 2, 1, "", "bypass_reshape"], [52, 2, 1, "", "get_const_dim_count"], [52, 2, 1, "", "node_from_map"], [52, 2, 1, "", "node_name_from_input"], [52, 2, 1, "", "valid_reshape_inputs"], [52, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[53, 1, 1, "", "FuseDecomposedINOptimizer"], [53, 2, 1, "", "bypass_reshape"], [53, 2, 1, "", "get_const_dim_count"], [53, 2, 1, "", "node_from_map"], [53, 2, 1, "", "node_name_from_input"], [53, 2, 1, "", "valid_reshape_inputs"], [53, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[54, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[55, 1, 1, "", "FuseLayerNormOptimizer"], [55, 2, 1, "", "node_from_map"], [55, 2, 1, "", "node_name_from_input"], [55, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[56, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[57, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[58, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[59, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[60, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[62, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[63, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[64, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[65, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[66, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[67, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[68, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[69, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[70, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[71, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[73, 0, 0, "-", "freeze_fake_quant"], [74, 0, 0, "-", "freeze_value"], [75, 0, 0, "-", "freeze_value_without_calib"], [76, 0, 0, "-", "fuse_conv_redundant_dequantize"], [77, 0, 0, "-", "fuse_conv_requantize"], [78, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [79, 0, 0, "-", "fuse_matmul_requantize"], [81, 0, 0, "-", "meta_op_optimizer"], [82, 0, 0, "-", "post_hostconst_converter"], [83, 0, 0, "-", "post_quantized_op_cse"], [84, 0, 0, "-", "rnn_convert"], [85, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[73, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[74, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[75, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[76, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[77, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[78, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[79, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [79, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [79, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [79, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[81, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[82, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[83, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[84, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[85, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[87, 0, 0, "-", "onnx_graph"], [88, 0, 0, "-", "onnx_node"], [89, 0, 0, "-", "onnx_schema"], [90, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[87, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[88, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[89, 1, 1, "", "OnnxOpSchema"], [89, 2, 1, "", "get_max_supported_opset_version"], [89, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[90, 1, 1, "", "SeqType"], [90, 2, 1, "", "add_port_to_name"], [90, 2, 1, "", "are_shapes_equal"], [90, 2, 1, "", "assert_error"], [90, 2, 1, "", "compute_const_folding_using_tf"], [90, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [90, 2, 1, "", "find_opset"], [90, 2, 1, "", "get_index_from_strided_slice_of_shape"], [90, 2, 1, "", "get_subgraphs_from_onnx"], [90, 2, 1, "", "get_tensorflow_node_attr"], [90, 2, 1, "", "get_tensorflow_node_shape_attr"], [90, 2, 1, "", "get_tensorflow_tensor_data"], [90, 2, 1, "", "get_tensorflow_tensor_shape"], [90, 2, 1, "", "infer_onnx_shape_dtype"], [90, 2, 1, "", "initialize_name_counter"], [90, 2, 1, "", "is_list_or_tuple"], [90, 2, 1, "", "is_onnx_domain"], [90, 2, 1, "", "make_onnx_inputs_outputs"], [90, 2, 1, "", "make_onnx_shape"], [90, 2, 1, "", "map_numpy_to_onnx_dtype"], [90, 2, 1, "", "map_onnx_to_numpy_type"], [90, 2, 1, "", "map_tensorflow_dtype"], [90, 2, 1, "", "read_tensorflow_node_attrs"], [90, 2, 1, "", "save_protobuf"], [90, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, 0, 0, "-", "insert_qdq_pattern"], [93, 0, 0, "-", "merge_duplicated_qdq"], [94, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[92, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[93, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[94, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[95, 1, 1, "", "GraphAnalyzer"], [95, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[99, 0, 0, "-", "qat"], [115, 0, 0, "-", "qdq"], [117, 0, 0, "-", "quantize_graph_base"], [118, 0, 0, "-", "quantize_graph_bn"], [119, 0, 0, "-", "quantize_graph_concatv2"], [120, 0, 0, "-", "quantize_graph_conv"], [121, 0, 0, "-", "quantize_graph_for_intel_cpu"], [122, 0, 0, "-", "quantize_graph_matmul"], [123, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[98, 0, 0, "-", "fake_quantize"], [100, 0, 0, "-", "quantize_config"], [101, 0, 0, "-", "quantize_helper"], [102, 0, 0, "-", "quantize_layers"], [107, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[98, 1, 1, "", "FakeQuantize"], [98, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[100, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[101, 2, 1, "", "init_quantize_config"], [101, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[103, 0, 0, "-", "optimize_layer"], [104, 0, 0, "-", "quantize_layer_add"], [105, 0, 0, "-", "quantize_layer_base"], [106, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[103, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[104, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[105, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[106, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[107, 1, 1, "", "QuantizeWrapper"], [107, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[108, 0, 0, "-", "fuse_qdq_bn"], [109, 0, 0, "-", "fuse_qdq_concatv2"], [110, 0, 0, "-", "fuse_qdq_conv"], [111, 0, 0, "-", "fuse_qdq_deconv"], [112, 0, 0, "-", "fuse_qdq_in"], [113, 0, 0, "-", "fuse_qdq_matmul"], [114, 0, 0, "-", "fuse_qdq_pooling"], [116, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[108, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[109, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[110, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[111, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[112, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[113, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[114, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[116, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[117, 1, 1, "", "QuantizeGraphBase"], [117, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[118, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[119, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[120, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[121, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[122, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[123, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[124, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[125, 1, 1, "", "SmoothQuantCalibration"], [125, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[126, 1, 1, "", "SmoothQuantScaler"], [126, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[127, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[128, 0, 0, "-", "bias_correction"], [129, 0, 0, "-", "graph_transform_base"], [131, 0, 0, "-", "insert_logging"], [132, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[128, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[129, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[131, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[132, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[133, 2, 1, "", "apply_inlining"], [133, 2, 1, "", "collate_tf_preds"], [133, 2, 1, "", "construct_function_from_graph_def"], [133, 2, 1, "", "disable_random"], [133, 2, 1, "", "fix_ref_type_of_graph_def"], [133, 2, 1, "", "generate_feed_dict"], [133, 2, 1, "", "get_estimator_graph"], [133, 2, 1, "", "get_graph_def"], [133, 2, 1, "", "get_input_output_node_names"], [133, 2, 1, "", "get_model_input_shape"], [133, 2, 1, "", "get_tensor_by_name"], [133, 2, 1, "", "get_tensor_val_from_graph_node"], [133, 2, 1, "", "get_weight_from_input_tensor"], [133, 2, 1, "", "int8_node_name_reverse"], [133, 2, 1, "", "is_ckpt_format"], [133, 2, 1, "", "is_saved_model_format"], [133, 2, 1, "", "iterator_sess_run"], [133, 2, 1, "", "parse_saved_model"], [133, 2, 1, "", "read_graph"], [133, 2, 1, "", "reconstruct_saved_model"], [133, 2, 1, "", "strip_equivalent_nodes"], [133, 2, 1, "", "strip_unused_nodes"], [133, 2, 1, "", "version1_eq_version2"], [133, 2, 1, "", "version1_gt_version2"], [133, 2, 1, "", "version1_gte_version2"], [133, 2, 1, "", "version1_lt_version2"], [133, 2, 1, "", "version1_lte_version2"], [133, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[134, 0, 0, "-", "bf16_convert"], [135, 0, 0, "-", "hawq_metric"], [137, 0, 0, "-", "layer_wise_quant"], [142, 0, 0, "-", "model_wrapper"], [143, 0, 0, "-", "pattern_detector"], [144, 0, 0, "-", "symbolic_trace"], [145, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[134, 1, 1, "", "BF16ModuleWrapper"], [134, 2, 1, "", "Convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[135, 1, 1, "", "HessianTrace"], [135, 1, 1, "", "Node_collector"], [135, 2, 1, "", "compare_weights"], [135, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[138, 0, 0, "-", "modified_pickle"], [139, 0, 0, "-", "quantize"], [140, 0, 0, "-", "torch_load"], [141, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[138, 3, 1, "", "PickleError"], [138, 3, 1, "", "PicklingError"], [138, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[139, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[140, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[141, 2, 1, "", "dowload_hf_model"], [141, 2, 1, "", "get_children"], [141, 2, 1, "", "get_module"], [141, 2, 1, "", "get_named_children"], [141, 2, 1, "", "get_super_module_by_name"], [141, 2, 1, "", "load_empty_model"], [141, 2, 1, "", "load_layer_wise_quantized_model"], [141, 2, 1, "", "load_tensor"], [141, 2, 1, "", "load_tensor_from_shard"], [141, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[142, 1, 1, "", "FakeAffineTensorQuantFunction"], [142, 1, 1, "", "MulLinear"], [142, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[143, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[144, 2, 1, "", "symbolic_trace"], [144, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[145, 2, 1, "", "append_attr"], [145, 2, 1, "", "auto_copy"], [145, 2, 1, "", "calculate_quant_min_max"], [145, 2, 1, "", "calibration"], [145, 2, 1, "", "check_cfg_and_qconfig"], [145, 2, 1, "", "collate_torch_preds"], [145, 2, 1, "", "collect_weight_info"], [145, 2, 1, "", "fetch_module"], [145, 2, 1, "", "forward_wrapper"], [145, 2, 1, "", "generate_activation_observer"], [145, 2, 1, "", "get_absorb_layers"], [145, 2, 1, "", "get_block_prefix"], [145, 2, 1, "", "get_depth"], [145, 2, 1, "", "get_dict_at_depth"], [145, 2, 1, "", "get_element_under_depth"], [145, 2, 1, "", "get_embedding_contiguous"], [145, 2, 1, "", "get_example_input"], [145, 2, 1, "", "get_fallback_order"], [145, 2, 1, "", "get_hidden_states"], [145, 2, 1, "", "get_module_input_output"], [145, 2, 1, "", "get_mse_order_per_fp32"], [145, 2, 1, "", "get_mse_order_per_int8"], [145, 2, 1, "", "get_op_type_by_name"], [145, 2, 1, "", "get_quantizable_ops_from_cfgs"], [145, 2, 1, "", "get_torch_version"], [145, 2, 1, "", "input2tuple"], [145, 2, 1, "", "is_fused_module"], [145, 2, 1, "", "match_datatype_pattern"], [145, 2, 1, "", "move_input_device"], [145, 2, 1, "", "paser_cfgs"], [145, 2, 1, "", "set_module"], [145, 2, 1, "", "simple_inference"], [145, 2, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[146, 0, 0, "-", "algorithm"], [147, 0, 0, "-", "fast_bias_correction"], [149, 0, 0, "-", "smooth_quant"], [150, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[146, 1, 1, "", "ALGORITHMS"], [146, 1, 1, "", "Algorithm"], [146, 1, 1, "", "AlgorithmScheduler"], [146, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[147, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[149, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[150, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[151, 2, 1, "", "benchmark_with_raw_cmd"], [151, 2, 1, "", "call_one"], [151, 2, 1, "", "config_instance"], [151, 2, 1, "", "fit"], [151, 2, 1, "", "generate_prefix"], [151, 2, 1, "", "get_architecture"], [151, 2, 1, "", "get_bounded_threads"], [151, 2, 1, "", "get_core_ids"], [151, 2, 1, "", "get_physical_ids"], [151, 2, 1, "", "get_threads"], [151, 2, 1, "", "get_threads_per_core"], [151, 2, 1, "", "profile"], [151, 2, 1, "", "run_instance"], [151, 2, 1, "", "set_all_env_var"], [151, 2, 1, "", "set_env_var"], [151, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[152, 0, 0, "-", "base_config"], [153, 0, 0, "-", "base_tuning"], [154, 0, 0, "-", "benchmark"], [156, 0, 0, "-", "tuning_param"], [158, 0, 0, "-", "utils"], [162, 0, 0, "-", "version"]], "neural_compressor.common.base_config": [[152, 1, 1, "", "BaseConfig"], [152, 1, 1, "", "ComposableConfig"], [152, 1, 1, "", "ConfigRegistry"], [152, 2, 1, "", "get_all_config_set_from_config_registry"], [152, 2, 1, "", "register_config"], [152, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_config.BaseConfig": [[152, 4, 1, "", "name"], [152, 4, 1, "", "params_list"]], "neural_compressor.common.base_config.ComposableConfig": [[152, 4, 1, "", "config_list"]], "neural_compressor.common.base_tuning": [[153, 1, 1, "", "ConfigLoader"], [153, 1, 1, "", "ConfigSet"], [153, 1, 1, "", "EvaluationFuncWrapper"], [153, 1, 1, "", "Evaluator"], [153, 1, 1, "", "Sampler"], [153, 1, 1, "", "SequentialSampler"], [153, 1, 1, "", "TuningConfig"], [153, 1, 1, "", "TuningMonitor"], [153, 2, 1, "", "init_tuning"]], "neural_compressor.common.base_tuning.ConfigSet": [[153, 4, 1, "", "config_list"]], "neural_compressor.common.benchmark": [[154, 2, 1, "", "benchmark"], [154, 2, 1, "", "dump_numa_info"], [154, 2, 1, "", "format_list2str"], [154, 2, 1, "", "generate_prefix"], [154, 2, 1, "", "get_linux_numa_info"], [154, 2, 1, "", "get_numa_node"], [154, 2, 1, "", "get_reversed_numa_info"], [154, 2, 1, "", "get_windows_numa_info"], [154, 2, 1, "", "parse_str2list"], [154, 2, 1, "", "run_multi_instance_command"], [154, 2, 1, "", "set_cores_for_instance"], [154, 2, 1, "", "summary_latency_throughput"]], "neural_compressor.common.tuning_param": [[156, 1, 1, "", "ParamLevel"], [156, 1, 1, "", "TuningParam"]], "neural_compressor.common.tuning_param.ParamLevel": [[156, 4, 1, "", "MODEL_LEVEL"], [156, 4, 1, "", "OP_LEVEL"], [156, 4, 1, "", "OP_TYPE_LEVEL"]], "neural_compressor.common.utils": [[157, 0, 0, "-", "constants"], [159, 0, 0, "-", "logger"], [160, 0, 0, "-", "save_load"], [161, 0, 0, "-", "utility"]], "neural_compressor.common.utils.constants": [[157, 1, 1, "", "Mode"]], "neural_compressor.common.utils.logger": [[159, 1, 1, "", "Logger"], [159, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.save_load": [[160, 2, 1, "", "load_config_mapping"], [160, 2, 1, "", "save_config_mapping"]], "neural_compressor.common.utils.utility": [[161, 1, 1, "", "CpuInfo"], [161, 1, 1, "", "LazyImport"], [161, 1, 1, "", "ProcessorType"], [161, 1, 1, "", "Statistics"], [161, 2, 1, "", "call_counter"], [161, 2, 1, "", "detect_processor_type_based_on_hw"], [161, 2, 1, "", "dump_elapsed_time"], [161, 2, 1, "", "get_workspace"], [161, 2, 1, "", "log_process"], [161, 2, 1, "", "set_random_seed"], [161, 2, 1, "", "set_resume_from"], [161, 2, 1, "", "set_tensorboard"], [161, 2, 1, "", "set_workspace"], [161, 2, 1, "", "singleton"]], "neural_compressor.compression": [[163, 0, 0, "-", "callbacks"], [165, 0, 0, "-", "distillation"], [168, 0, 0, "-", "hpo"], [171, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[163, 1, 1, "", "BaseCallbacks"], [163, 1, 1, "", "DistillationCallbacks"], [163, 1, 1, "", "PruningCallbacks"], [163, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[163, 4, 1, "", "_epoch_ran"], [163, 4, 1, "", "best_model"], [163, 4, 1, "", "best_score"], [163, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[164, 0, 0, "-", "criterions"], [166, 0, 0, "-", "optimizers"], [167, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[164, 1, 1, "", "Criterions"], [164, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [164, 1, 1, "", "KnowledgeDistillationFramework"], [164, 1, 1, "", "KnowledgeDistillationLoss"], [164, 1, 1, "", "PyTorchCriterions"], [164, 1, 1, "", "PyTorchCrossEntropyLoss"], [164, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [164, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [164, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [164, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [164, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [164, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [164, 1, 1, "", "SelfKnowledgeDistillationLoss"], [164, 1, 1, "", "TensorFlowCrossEntropyLoss"], [164, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [164, 1, 1, "", "TensorflowCriterions"], [164, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [164, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [164, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [164, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[166, 1, 1, "", "Optimizers"], [166, 1, 1, "", "PyTorchOptimizers"], [166, 1, 1, "", "PyTorchSGD"], [166, 1, 1, "", "TensorFlowAdam"], [166, 1, 1, "", "TensorFlowAdamW"], [166, 1, 1, "", "TensorFlowSGD"], [166, 1, 1, "", "TensorflowOptimizers"], [166, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[167, 2, 1, "", "get_activation"], [167, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[169, 0, 0, "-", "sa_optimizer"]], "neural_compressor.compression.pruner": [[170, 0, 0, "-", "criteria"], [173, 0, 0, "-", "model_slim"], [177, 0, 0, "-", "patterns"], [171, 2, 1, "", "prepare_pruning"], [184, 0, 0, "-", "pruners"], [189, 0, 0, "-", "pruning"], [190, 0, 0, "-", "regs"], [171, 2, 1, "", "save"], [191, 0, 0, "-", "schedulers"], [192, 0, 0, "-", "tf_criteria"], [193, 0, 0, "-", "utils"], [194, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[170, 1, 1, "", "BlockMaskCriterion"], [170, 1, 1, "", "GradientCriterion"], [170, 1, 1, "", "MagnitudeCriterion"], [170, 1, 1, "", "PruningCriterion"], [170, 1, 1, "", "RetrainFreeCriterion"], [170, 1, 1, "", "SnipCriterion"], [170, 1, 1, "", "SnipMomentumCriterion"], [170, 2, 1, "", "get_criterion"], [170, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[170, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[170, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[170, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[170, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[170, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[170, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[170, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[172, 0, 0, "-", "auto_slim"], [174, 0, 0, "-", "pattern_analyzer"], [175, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[172, 2, 1, "", "generate_ffn2_pruning_config"], [172, 2, 1, "", "generate_mha_pruning_config"], [172, 2, 1, "", "model_slim"], [172, 2, 1, "", "model_slim_ffn2"], [172, 2, 1, "", "model_slim_mha"], [172, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[174, 1, 1, "", "ClassifierHeadSearcher"], [174, 1, 1, "", "ClassifierHeadSearcherTF"], [174, 1, 1, "", "JitBasicSearcher"], [174, 1, 1, "", "Linear2LinearSearcher"], [174, 1, 1, "", "RecipeSearcher"], [174, 1, 1, "", "SelfMHASearcher"], [174, 2, 1, "", "get_attributes"], [174, 2, 1, "", "get_common_module"], [174, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[174, 4, 1, "", "device"], [174, 4, 1, "", "flatten_static_graph"], [174, 4, 1, "", "model"], [174, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[174, 4, 1, "", "device"], [174, 4, 1, "", "flatten_static_graph"], [174, 4, 1, "", "model"], [174, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[174, 4, 1, "", "device"], [174, 4, 1, "", "flatten_static_graph"], [174, 4, 1, "", "model"], [174, 4, 1, "", "searching_results"], [174, 4, 1, "", "static_graph"], [174, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[174, 4, 1, "", "current_pattern"], [174, 4, 1, "", "device"], [174, 4, 1, "", "flatten_static_graph"], [174, 4, 1, "", "model"], [174, 4, 1, "", "searching_results"], [174, 4, 1, "", "static_graph"], [174, 4, 1, "", "target_layers"], [174, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[174, 4, 1, "", "model"], [174, 4, 1, "", "recipe"], [174, 4, 1, "", "searching_results"], [174, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[174, 4, 1, "", "device"], [174, 4, 1, "", "flatten_static_graph"], [174, 4, 1, "", "model"], [174, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[175, 1, 1, "", "LinearCompression"], [175, 1, 1, "", "LinearCompressionIterator"], [175, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[175, 4, 1, "", "device"], [175, 4, 1, "", "layer_1"], [175, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[175, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[176, 0, 0, "-", "base"], [177, 2, 1, "", "get_pattern"], [178, 0, 0, "-", "mha"], [179, 0, 0, "-", "ninm"], [180, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[176, 1, 1, "", "BasePattern"], [176, 1, 1, "", "KerasBasePattern"], [176, 1, 1, "", "PytorchBasePattern"], [176, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[176, 4, 1, "", "config"], [176, 4, 1, "", "invalid_layers"], [176, 4, 1, "", "is_global"], [176, 4, 1, "", "keep_mask_layers"], [176, 4, 1, "", "max_sparsity_ratio_per_op"], [176, 4, 1, "", "min_sparsity_ratio_per_op"], [176, 4, 1, "", "modules"], [176, 4, 1, "", "pattern"], [176, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[176, 4, 1, "", "config"], [176, 4, 1, "", "invalid_layers"], [176, 4, 1, "", "is_global"], [176, 4, 1, "", "keep_mask_layers"], [176, 4, 1, "", "max_sparsity_ratio_per_op"], [176, 4, 1, "", "min_sparsity_ratio_per_op"], [176, 4, 1, "", "modules"], [176, 4, 1, "", "pattern"], [176, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[176, 4, 1, "", "config"], [176, 4, 1, "", "invalid_layers"], [176, 4, 1, "", "is_global"], [176, 4, 1, "", "keep_mask_layers"], [176, 4, 1, "", "max_sparsity_ratio_per_op"], [176, 4, 1, "", "min_sparsity_ratio_per_op"], [176, 4, 1, "", "modules"], [176, 4, 1, "", "pattern"], [176, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[178, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[178, 4, 1, "", "M"], [178, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[179, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[179, 4, 1, "", "M"], [179, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[180, 1, 1, "", "KerasPatternNxM"], [180, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[180, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[180, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[181, 0, 0, "-", "base"], [182, 0, 0, "-", "basic"], [183, 0, 0, "-", "block_mask"], [184, 2, 1, "", "get_pruner"], [185, 0, 0, "-", "mha"], [184, 2, 1, "", "parse_valid_pruner_types"], [186, 0, 0, "-", "pattern_lock"], [187, 0, 0, "-", "progressive"], [188, 0, 0, "-", "retrain_free"]], "neural_compressor.compression.pruner.pruners.base": [[181, 1, 1, "", "BasePruner"], [181, 1, 1, "", "KerasBasePruner"], [181, 1, 1, "", "PytorchBasePruner"], [181, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[181, 4, 1, "", "config"], [181, 4, 1, "", "current_sparsity_ratio"], [181, 4, 1, "", "end_step"], [181, 4, 1, "", "global_step"], [181, 4, 1, "", "masks"], [181, 4, 1, "", "max_sparsity_ratio_per_op"], [181, 4, 1, "", "modules"], [181, 4, 1, "", "pattern"], [181, 4, 1, "", "pruning_frequency"], [181, 4, 1, "", "scheduler"], [181, 4, 1, "", "scores"], [181, 4, 1, "", "start_step"], [181, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[181, 4, 1, "", "config"], [181, 4, 1, "", "current_sparsity_ratio"], [181, 4, 1, "", "end_step"], [181, 4, 1, "", "global_step"], [181, 4, 1, "", "masks"], [181, 4, 1, "", "max_sparsity_ratio_per_op"], [181, 4, 1, "", "modules"], [181, 4, 1, "", "pattern"], [181, 4, 1, "", "pruning_frequency"], [181, 4, 1, "", "scheduler"], [181, 4, 1, "", "scores"], [181, 4, 1, "", "start_step"], [181, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[181, 4, 1, "", "config"], [181, 4, 1, "", "current_sparsity_ratio"], [181, 4, 1, "", "end_step"], [181, 4, 1, "", "global_step"], [181, 4, 1, "", "masks"], [181, 4, 1, "", "max_sparsity_ratio_per_op"], [181, 4, 1, "", "modules"], [181, 4, 1, "", "pattern"], [181, 4, 1, "", "pruning_frequency"], [181, 4, 1, "", "scheduler"], [181, 4, 1, "", "scores"], [181, 4, 1, "", "start_step"], [181, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[182, 1, 1, "", "KerasBasicPruner"], [182, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[182, 4, 1, "", "criterion"], [182, 4, 1, "", "pattern"], [182, 4, 1, "", "reg"], [182, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[182, 4, 1, "", "criterion"], [182, 4, 1, "", "pattern"], [182, 4, 1, "", "reg"], [182, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[183, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[183, 4, 1, "", "criterion"], [183, 4, 1, "", "pattern"], [183, 4, 1, "", "reg"], [183, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[185, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[185, 4, 1, "", "head_masks"], [185, 4, 1, "", "linear_layers"], [185, 4, 1, "", "mha_compressions"], [185, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[186, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[187, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[188, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[188, 4, 1, "", "criterion"], [188, 4, 1, "", "pattern"], [188, 4, 1, "", "reg"], [188, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[189, 1, 1, "", "BasePruning"], [189, 1, 1, "", "BasicPruning"], [189, 1, 1, "", "RetrainFreePruning"], [189, 1, 1, "", "SparseGPTPruning"], [189, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[189, 4, 1, "", "config_file_path"], [189, 4, 1, "", "model"], [189, 4, 1, "", "pruner_info"], [189, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[189, 4, 1, "", "config_file_path"], [189, 4, 1, "", "model"], [189, 4, 1, "", "pruner_info"], [189, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[189, 4, 1, "", "config_file_path"], [189, 4, 1, "", "model"], [189, 4, 1, "", "pruner_info"], [189, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[190, 1, 1, "", "BaseReg"], [190, 1, 1, "", "GroupLasso"], [190, 2, 1, "", "get_reg"], [190, 2, 1, "", "get_reg_type"], [190, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[190, 4, 1, "", "alpha"], [190, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[191, 1, 1, "", "IterativeScheduler"], [191, 1, 1, "", "OneshotScheduler"], [191, 1, 1, "", "PruningScheduler"], [191, 2, 1, "", "get_scheduler"], [191, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[191, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[192, 1, 1, "", "MagnitudeCriterion"], [192, 1, 1, "", "PruningCriterion"], [192, 2, 1, "", "get_tf_criterion"], [192, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[192, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[192, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[193, 2, 1, "", "check_config"], [193, 2, 1, "", "check_key_validity"], [193, 2, 1, "", "collect_layer_inputs"], [193, 2, 1, "", "get_layers"], [193, 2, 1, "", "get_sparsity_ratio"], [193, 2, 1, "", "get_sparsity_ratio_tf"], [193, 2, 1, "", "parse_last_linear"], [193, 2, 1, "", "parse_last_linear_tf"], [193, 2, 1, "", "parse_to_prune"], [193, 2, 1, "", "parse_to_prune_tf"], [193, 2, 1, "", "process_and_check_config"], [193, 2, 1, "", "process_config"], [193, 2, 1, "", "process_weight_config"], [193, 2, 1, "", "process_yaml_config"], [193, 2, 1, "", "reset_none_to_default"], [193, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[195, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.wanda.utils": [[195, 2, 1, "", "find_layers"]], "neural_compressor.config": [[196, 1, 1, "", "AccuracyCriterion"], [196, 1, 1, "", "BenchmarkConfig"], [196, 1, 1, "", "DistillationConfig"], [196, 1, 1, "", "DotDict"], [196, 1, 1, "", "ExportConfig"], [196, 1, 1, "", "HPOConfig"], [196, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [196, 1, 1, "", "Keras"], [196, 1, 1, "", "KnowledgeDistillationLossConfig"], [196, 1, 1, "", "MXNet"], [196, 1, 1, "", "MixedPrecisionConfig"], [196, 1, 1, "", "NASConfig"], [196, 1, 1, "", "ONNX"], [196, 1, 1, "", "ONNXQlinear2QDQConfig"], [196, 1, 1, "", "Options"], [196, 1, 1, "", "PostTrainingQuantConfig"], [196, 1, 1, "", "PyTorch"], [196, 1, 1, "", "QuantizationAwareTrainingConfig"], [196, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [196, 1, 1, "", "TF2ONNXConfig"], [196, 1, 1, "", "TensorFlow"], [196, 1, 1, "", "Torch2ONNXConfig"], [196, 1, 1, "", "TuningCriterion"], [196, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[198, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[199, 0, 0, "-", "sigopt"], [200, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[199, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[200, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[216, 0, 0, "-", "datasets"], [220, 0, 0, "-", "filters"], [223, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[201, 0, 0, "-", "base_dataloader"], [202, 0, 0, "-", "dataloader"], [203, 0, 0, "-", "default_dataloader"], [204, 0, 0, "-", "fetcher"], [205, 0, 0, "-", "mxnet_dataloader"], [206, 0, 0, "-", "onnxrt_dataloader"], [207, 0, 0, "-", "pytorch_dataloader"], [208, 0, 0, "-", "sampler"], [209, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[201, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[202, 1, 1, "", "DataLoader"], [202, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[203, 1, 1, "", "DefaultDataLoader"], [203, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[204, 1, 1, "", "Fetcher"], [204, 1, 1, "", "IndexFetcher"], [204, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[205, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[206, 1, 1, "", "ONNXRTBertDataLoader"], [206, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[207, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[208, 1, 1, "", "BatchSampler"], [208, 1, 1, "", "IterableSampler"], [208, 1, 1, "", "Sampler"], [208, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[209, 1, 1, "", "TFDataDataLoader"], [209, 1, 1, "", "TensorflowBertDataLoader"], [209, 1, 1, "", "TensorflowDataLoader"], [209, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[210, 0, 0, "-", "bert_dataset"], [211, 0, 0, "-", "coco_dataset"], [212, 0, 0, "-", "dataset"], [213, 0, 0, "-", "dummy_dataset"], [214, 0, 0, "-", "dummy_dataset_v2"], [215, 0, 0, "-", "imagenet_dataset"], [217, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[210, 1, 1, "", "InputFeatures"], [210, 1, 1, "", "ONNXRTBertDataset"], [210, 1, 1, "", "ParseDecodeBert"], [210, 1, 1, "", "PytorchBertDataset"], [210, 1, 1, "", "TensorflowBertDataset"], [210, 1, 1, "", "TensorflowModelZooBertDataset"], [210, 2, 1, "", "convert_examples_to_features"], [210, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[211, 1, 1, "", "COCONpy"], [211, 1, 1, "", "COCORaw"], [211, 1, 1, "", "COCORecordDataset"], [211, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[212, 1, 1, "", "CIFAR10"], [212, 1, 1, "", "CIFAR100"], [212, 1, 1, "", "Dataset"], [212, 1, 1, "", "Datasets"], [212, 1, 1, "", "FashionMNIST"], [212, 1, 1, "", "ImageFolder"], [212, 1, 1, "", "IterableDataset"], [212, 1, 1, "", "MNIST"], [212, 1, 1, "", "MXNetCIFAR10"], [212, 1, 1, "", "MXNetCIFAR100"], [212, 1, 1, "", "MXNetDatasets"], [212, 1, 1, "", "MXNetFashionMNIST"], [212, 1, 1, "", "MXNetImageFolder"], [212, 1, 1, "", "MXNetMNIST"], [212, 1, 1, "", "ONNXRTITDatasets"], [212, 1, 1, "", "ONNXRTQLDatasets"], [212, 1, 1, "", "PyTorchDatasets"], [212, 1, 1, "", "PytorchCIFAR10"], [212, 1, 1, "", "PytorchCIFAR100"], [212, 1, 1, "", "PytorchFashionMNIST"], [212, 1, 1, "", "PytorchMNIST"], [212, 1, 1, "", "PytorchMxnetWrapDataset"], [212, 1, 1, "", "PytorchMxnetWrapFunction"], [212, 1, 1, "", "Tensorflow"], [212, 1, 1, "", "TensorflowCIFAR10"], [212, 1, 1, "", "TensorflowCIFAR100"], [212, 1, 1, "", "TensorflowDatasets"], [212, 1, 1, "", "TensorflowFashionMNIST"], [212, 1, 1, "", "TensorflowImageRecord"], [212, 1, 1, "", "TensorflowMNIST"], [212, 1, 1, "", "TensorflowTFRecordDataset"], [212, 1, 1, "", "TensorflowVOCRecord"], [212, 2, 1, "", "calculate_md5"], [212, 2, 1, "", "check_integrity"], [212, 2, 1, "", "dataset_registry"], [212, 2, 1, "", "download_url"], [212, 5, 1, "", "framework_datasets"], [212, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[213, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[214, 1, 1, "", "DummyDataset"], [214, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[215, 1, 1, "", "ImagenetRaw"], [215, 1, 1, "", "MXNetImagenetRaw"], [215, 1, 1, "", "ONNXRTImagenetDataset"], [215, 1, 1, "", "PytorchImagenetRaw"], [215, 1, 1, "", "TensorflowImagenetDataset"], [215, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[217, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[218, 0, 0, "-", "coco_filter"], [219, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[218, 1, 1, "", "LabelBalanceCOCORawFilter"], [218, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[219, 1, 1, "", "FILTERS"], [219, 1, 1, "", "Filter"], [219, 1, 1, "", "MXNetFilters"], [219, 1, 1, "", "ONNXRTITFilters"], [219, 1, 1, "", "ONNXRTQLFilters"], [219, 1, 1, "", "PyTorchFilters"], [219, 1, 1, "", "TensorflowFilters"], [219, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[222, 0, 0, "-", "imagenet_transform"], [224, 0, 0, "-", "postprocess"], [225, 0, 0, "-", "tokenization"], [226, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[222, 1, 1, "", "BilinearImagenetTransform"], [222, 1, 1, "", "LabelShift"], [222, 1, 1, "", "ONNXResizeCropImagenetTransform"], [222, 1, 1, "", "OnnxBilinearImagenetTransform"], [222, 1, 1, "", "ParseDecodeImagenet"], [222, 1, 1, "", "ParseDecodeImagenetTransform"], [222, 1, 1, "", "QuantizedInput"], [222, 1, 1, "", "ResizeWithAspectRatio"], [222, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [222, 1, 1, "", "TensorflowShiftRescale"], [222, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[224, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[225, 1, 1, "", "BasicTokenizer"], [225, 1, 1, "", "FullTokenizer"], [225, 1, 1, "", "WordpieceTokenizer"], [225, 2, 1, "", "convert_by_vocab"], [225, 2, 1, "", "convert_to_unicode"], [225, 2, 1, "", "load_vocab"], [225, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[226, 1, 1, "", "AlignImageChannelTransform"], [226, 1, 1, "", "BaseTransform"], [226, 1, 1, "", "CastONNXTransform"], [226, 1, 1, "", "CastPyTorchTransform"], [226, 1, 1, "", "CastTFTransform"], [226, 1, 1, "", "CenterCropTFTransform"], [226, 1, 1, "", "CenterCropTransform"], [226, 1, 1, "", "CollectTransform"], [226, 1, 1, "", "ComposeTransform"], [226, 1, 1, "", "CropResizeTFTransform"], [226, 1, 1, "", "CropResizeTransform"], [226, 1, 1, "", "CropToBoundingBox"], [226, 1, 1, "", "InputFeatures"], [226, 1, 1, "", "MXNetCropResizeTransform"], [226, 1, 1, "", "MXNetCropToBoundingBox"], [226, 1, 1, "", "MXNetNormalizeTransform"], [226, 1, 1, "", "MXNetTransforms"], [226, 1, 1, "", "MXNetTranspose"], [226, 1, 1, "", "NormalizeTFTransform"], [226, 1, 1, "", "NormalizeTransform"], [226, 1, 1, "", "ONNXRTCropToBoundingBox"], [226, 1, 1, "", "ONNXRTITTransforms"], [226, 1, 1, "", "ONNXRTQLTransforms"], [226, 1, 1, "", "PaddedCenterCropTransform"], [226, 1, 1, "", "ParseDecodeVocTransform"], [226, 1, 1, "", "PyTorchAlignImageChannel"], [226, 1, 1, "", "PyTorchCropResizeTransform"], [226, 1, 1, "", "PyTorchNormalizeTransform"], [226, 1, 1, "", "PyTorchTransforms"], [226, 1, 1, "", "PyTorchTranspose"], [226, 1, 1, "", "PytorchMxnetTransform"], [226, 1, 1, "", "PytorchMxnetWrapFunction"], [226, 1, 1, "", "RandomCropTFTransform"], [226, 1, 1, "", "RandomCropTransform"], [226, 1, 1, "", "RandomHorizontalFlip"], [226, 1, 1, "", "RandomResizedCropMXNetTransform"], [226, 1, 1, "", "RandomResizedCropPytorchTransform"], [226, 1, 1, "", "RandomResizedCropTFTransform"], [226, 1, 1, "", "RandomResizedCropTransform"], [226, 1, 1, "", "RandomVerticalFlip"], [226, 1, 1, "", "RescaleKerasPretrainTransform"], [226, 1, 1, "", "RescaleTFTransform"], [226, 1, 1, "", "RescaleTransform"], [226, 1, 1, "", "ResizeMXNetTransform"], [226, 1, 1, "", "ResizePytorchTransform"], [226, 1, 1, "", "ResizeTFTransform"], [226, 1, 1, "", "ResizeTransform"], [226, 1, 1, "", "ResizeWithRatio"], [226, 1, 1, "", "SquadExample"], [226, 1, 1, "", "TFModelZooCollectTransform"], [226, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [226, 1, 1, "", "TFSquadV1PostTransform"], [226, 1, 1, "", "TRANSFORMS"], [226, 1, 1, "", "TensorflowCropToBoundingBox"], [226, 1, 1, "", "TensorflowRandomHorizontalFlip"], [226, 1, 1, "", "TensorflowRandomVerticalFlip"], [226, 1, 1, "", "TensorflowResizeWithRatio"], [226, 1, 1, "", "TensorflowTransform"], [226, 1, 1, "", "TensorflowTransforms"], [226, 1, 1, "", "TensorflowTranspose"], [226, 1, 1, "", "TensorflowWrapFunction"], [226, 1, 1, "", "ToArray"], [226, 1, 1, "", "ToNDArrayTransform"], [226, 1, 1, "", "Transforms"], [226, 1, 1, "", "Transpose"], [226, 2, 1, "", "convert_examples_to_features"], [226, 2, 1, "", "get_final_text"], [226, 2, 1, "", "get_torchvision_map"], [226, 2, 1, "", "read_squad_examples"], [226, 2, 1, "", "transform_registry"]], "neural_compressor.metric": [[228, 0, 0, "-", "bleu"], [229, 0, 0, "-", "bleu_util"], [230, 0, 0, "-", "coco_label_map"], [231, 0, 0, "-", "coco_tools"], [232, 0, 0, "-", "evaluate_squad"], [233, 0, 0, "-", "f1"], [235, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[228, 1, 1, "", "BLEU"], [228, 1, 1, "", "UnicodeRegex"], [228, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[228, 4, 1, "", "labels"], [228, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[228, 4, 1, "", "nondigit_punct_re"], [228, 4, 1, "", "punct_nondigit_re"], [228, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[229, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[231, 1, 1, "", "COCOEvalWrapper"], [231, 1, 1, "", "COCOWrapper"], [231, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [231, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [231, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[231, 4, 1, "", "dataset"], [231, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[232, 2, 1, "", "evaluate"], [232, 2, 1, "", "exact_match_score"], [232, 2, 1, "", "f1_score"], [232, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[233, 2, 1, "", "evaluate"], [233, 2, 1, "", "f1_score"], [233, 2, 1, "", "metric_max_over_ground_truths"], [233, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[235, 1, 1, "", "Accuracy"], [235, 1, 1, "", "BaseMetric"], [235, 1, 1, "", "COCOmAPv2"], [235, 1, 1, "", "F1"], [235, 1, 1, "", "GeneralTopK"], [235, 1, 1, "", "Loss"], [235, 1, 1, "", "MAE"], [235, 1, 1, "", "METRICS"], [235, 1, 1, "", "MSE"], [235, 1, 1, "", "MXNetMetrics"], [235, 1, 1, "", "Metric"], [235, 1, 1, "", "ONNXRTGLUE"], [235, 1, 1, "", "ONNXRTITMetrics"], [235, 1, 1, "", "ONNXRTQLMetrics"], [235, 1, 1, "", "PyTorchLoss"], [235, 1, 1, "", "PyTorchMetrics"], [235, 1, 1, "", "RMSE"], [235, 1, 1, "", "ROC"], [235, 1, 1, "", "SquadF1"], [235, 1, 1, "", "TensorflowCOCOMAP"], [235, 1, 1, "", "TensorflowMAP"], [235, 1, 1, "", "TensorflowMetrics"], [235, 1, 1, "", "TensorflowTopK"], [235, 1, 1, "", "TensorflowVOCMAP"], [235, 1, 1, "", "WrapMXNetMetric"], [235, 1, 1, "", "WrapONNXRTMetric"], [235, 1, 1, "", "WrapPyTorchMetric"], [235, 1, 1, "", "mIOU"], [235, 2, 1, "", "metric_registry"], [235, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[235, 4, 1, "", "label_list"], [235, 4, 1, "", "pred_list"], [235, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[235, 4, 1, "", "k"], [235, 4, 1, "", "num_correct"], [235, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[235, 4, 1, "", "sample"], [235, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[235, 4, 1, "", "compare_label"], [235, 4, 1, "", "label_list"], [235, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[235, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[235, 4, 1, "", "compare_label"], [235, 4, 1, "", "label_list"], [235, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[235, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[235, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[235, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[235, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[235, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[235, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[235, 4, 1, "", "k"], [235, 4, 1, "", "num_correct"], [235, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[236, 2, 1, "", "fit"]], "neural_compressor.model": [[237, 0, 0, "-", "base_model"], [239, 0, 0, "-", "keras_model"], [240, 0, 0, "-", "model"], [241, 0, 0, "-", "mxnet_model"], [242, 0, 0, "-", "nets_factory"], [243, 0, 0, "-", "onnx_model"], [244, 0, 0, "-", "tensorflow_model"], [245, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[237, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[239, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[240, 1, 1, "", "Model"], [240, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[241, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[242, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[243, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[244, 1, 1, "", "TensorflowBaseModel"], [244, 1, 1, "", "TensorflowCheckpointModel"], [244, 1, 1, "", "TensorflowLLMModel"], [244, 1, 1, "", "TensorflowModel"], [244, 1, 1, "", "TensorflowQATModel"], [244, 1, 1, "", "TensorflowSavedModelModel"], [244, 2, 1, "", "checkpoint_session"], [244, 2, 1, "", "estimator_session"], [244, 2, 1, "", "frozen_pb_session"], [244, 2, 1, "", "get_model_type"], [244, 2, 1, "", "graph_def_session"], [244, 2, 1, "", "graph_session"], [244, 2, 1, "", "keras_session"], [244, 2, 1, "", "load_saved_model"], [244, 2, 1, "", "saved_model_session"], [244, 2, 1, "", "slim_session"], [244, 2, 1, "", "try_loading_keras"], [244, 2, 1, "", "validate_and_inference_input_output"], [244, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[245, 1, 1, "", "IPEXModel"], [245, 1, 1, "", "PyTorchBaseModel"], [245, 1, 1, "", "PyTorchFXModel"], [245, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[246, 1, 1, "", "Accuracy"], [246, 1, 1, "", "Footprint"], [246, 1, 1, "", "ModelSize"], [246, 1, 1, "", "MultiObjective"], [246, 1, 1, "", "Objective"], [246, 1, 1, "", "Performance"], [246, 2, 1, "", "objective_custom_registry"], [246, 2, 1, "", "objective_registry"]], "neural_compressor.profiling.parser": [[248, 0, 0, "-", "factory"], [251, 0, 0, "-", "parser"], [252, 0, 0, "-", "result"]], "neural_compressor.profiling.parser.factory": [[248, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[249, 0, 0, "-", "factory"], [250, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[249, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[250, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[251, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[252, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[253, 0, 0, "-", "factory"], [254, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[253, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[254, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[255, 0, 0, "-", "factory"], [259, 0, 0, "-", "profiler"]], "neural_compressor.profiling.profiler.factory": [[255, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[256, 0, 0, "-", "factory"], [257, 0, 0, "-", "profiler"], [258, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[256, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[257, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[258, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[259, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[260, 0, 0, "-", "factory"], [261, 0, 0, "-", "profiler"], [262, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[260, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[261, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[262, 2, 1, "", "create_tf_config"], [262, 2, 1, "", "delete_assign"], [262, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[263, 2, 1, "", "fit"]], "neural_compressor.strategy": [[264, 0, 0, "-", "auto"], [265, 0, 0, "-", "auto_mixed_precision"], [266, 0, 0, "-", "basic"], [267, 0, 0, "-", "bayesian"], [268, 0, 0, "-", "conservative"], [269, 0, 0, "-", "exhaustive"], [270, 0, 0, "-", "hawq_v2"], [272, 0, 0, "-", "mse"], [273, 0, 0, "-", "mse_v2"], [274, 0, 0, "-", "random"], [275, 0, 0, "-", "strategy"], [277, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[264, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[265, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[266, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[267, 1, 1, "", "BayesianOptimization"], [267, 1, 1, "", "BayesianTuneStrategy"], [267, 1, 1, "", "TargetSpace"], [267, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[268, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[269, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[270, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[272, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[273, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[274, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[275, 1, 1, "", "TuneStrategy"], [275, 1, 1, "", "TuneStrategyMeta"], [275, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[276, 0, 0, "-", "constant"], [278, 0, 0, "-", "tuning_sampler"], [279, 0, 0, "-", "tuning_space"], [280, 0, 0, "-", "tuning_structs"], [281, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[278, 1, 1, "", "BlockFallbackTuningSampler"], [278, 1, 1, "", "FallbackTuningSampler"], [278, 1, 1, "", "LowerBitsSampler"], [278, 1, 1, "", "ModelWiseTuningSampler"], [278, 1, 1, "", "OpTypeWiseTuningSampler"], [278, 1, 1, "", "OpWiseTuningSampler"], [278, 1, 1, "", "SmoothQuantSampler"], [278, 1, 1, "", "TuningOrder"], [278, 1, 1, "", "TuningSampler"], [278, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[279, 1, 1, "", "TuningItem"], [279, 1, 1, "", "TuningSpace"], [279, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [279, 2, 1, "", "pattern_to_internal"], [279, 2, 1, "", "pattern_to_path"], [279, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[280, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[281, 1, 1, "", "ClassRegister"], [281, 1, 1, "", "OrderedDefaultDict"], [281, 1, 1, "", "QuantOptions"], [281, 1, 1, "", "QuantType"], [281, 2, 1, "", "build_slave_faker_model"], [281, 2, 1, "", "extract_data_type"], [281, 2, 1, "", "get_adaptor_name"], [281, 2, 1, "", "preprocess_user_cfg"], [281, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[282, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[282, 1, 1, "", "ExampleClass"], [282, 4, 1, "", "attribute1"], [282, 2, 1, "", "function1"], [282, 2, 1, "", "function2"], [282, 2, 1, "", "function3"], [282, 2, 1, "", "generator1"], [282, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[282, 4, 1, "", "attr1"], [282, 4, 1, "", "attr2"], [282, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[283, 0, 0, "-", "algorithms"], [292, 0, 0, "-", "keras"], [305, 0, 0, "-", "quantization"], [389, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[286, 0, 0, "-", "smoother"], [288, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[284, 0, 0, "-", "calibration"], [285, 0, 0, "-", "core"], [287, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[284, 1, 1, "", "SmoothQuantCalibration"], [284, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[285, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[287, 1, 1, "", "SmoothQuantScaler"], [287, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[289, 0, 0, "-", "keras"], [290, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[289, 1, 1, "", "KerasAdaptor"], [289, 1, 1, "", "KerasConfigConverter"], [289, 1, 1, "", "KerasQuery"], [289, 1, 1, "", "KerasSurgery"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[290, 1, 1, "", "TensorFlowAdaptor"], [290, 1, 1, "", "TensorFlowConfig"], [290, 1, 1, "", "TensorflowConfigConverter"], [290, 1, 1, "", "TensorflowQuery"], [290, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.keras": [[296, 0, 0, "-", "layers"], [301, 0, 0, "-", "quantization"]], "neural_compressor.tensorflow.keras.layers": [[293, 0, 0, "-", "conv2d"], [294, 0, 0, "-", "dense"], [295, 0, 0, "-", "depthwise_conv2d"], [297, 0, 0, "-", "layer_initializer"], [298, 0, 0, "-", "pool2d"], [299, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[293, 1, 1, "", "QConv2D"], [293, 2, 1, "", "initialize_int8_conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[294, 1, 1, "", "QDense"], [294, 2, 1, "", "initialize_int8_dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[295, 1, 1, "", "QDepthwiseConv2D"], [295, 2, 1, "", "initialize_int8_depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[298, 1, 1, "", "QAvgPool2D"], [298, 1, 1, "", "QMaxPool2D"], [298, 2, 1, "", "initialize_int8_avgpool"], [298, 2, 1, "", "initialize_int8_maxpool"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[299, 1, 1, "", "QSeparableConv2D"], [299, 2, 1, "", "initialize_int8_separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization": [[300, 0, 0, "-", "config"]], "neural_compressor.tensorflow.keras.quantization.config": [[300, 1, 1, "", "OperatorConfig"], [300, 1, 1, "", "StaticQuantConfig"], [300, 2, 1, "", "get_all_registered_configs"], [300, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization": [[302, 0, 0, "-", "algorithm_entry"], [303, 0, 0, "-", "autotune"], [304, 0, 0, "-", "config"], [306, 0, 0, "-", "quantize"], [362, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[302, 2, 1, "", "smooth_quant_entry"], [302, 2, 1, "", "static_quant_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[303, 2, 1, "", "autotune"], [303, 2, 1, "", "get_all_config_set"]], "neural_compressor.tensorflow.quantization.config": [[304, 1, 1, "", "SmoothQuantConfig"], [304, 1, 1, "", "StaticQuantConfig"], [304, 2, 1, "", "get_default_sq_config"], [304, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[306, 2, 1, "", "need_apply"], [306, 2, 1, "", "quantize_model"], [306, 2, 1, "", "quantize_model_with_single_config"]], "neural_compressor.tensorflow.quantization.utils": [[307, 0, 0, "-", "graph_converter"], [345, 0, 0, "-", "graph_rewriter"], [361, 0, 0, "-", "graph_util"], [363, 0, 0, "-", "quantize_graph"], [380, 0, 0, "-", "quantize_graph_common"], [383, 0, 0, "-", "transform_graph"], [386, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[307, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[310, 0, 0, "-", "bf16"], [334, 0, 0, "-", "generic"], [344, 0, 0, "-", "graph_base"], [352, 0, 0, "-", "int8"], [357, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[308, 0, 0, "-", "bf16_convert"], [309, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[308, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[309, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[311, 0, 0, "-", "convert_add_to_biasadd"], [312, 0, 0, "-", "convert_layout"], [313, 0, 0, "-", "convert_leakyrelu"], [314, 0, 0, "-", "convert_nan_to_random"], [315, 0, 0, "-", "convert_placeholder_to_const"], [316, 0, 0, "-", "dilated_contraction"], [317, 0, 0, "-", "dummy_biasadd"], [318, 0, 0, "-", "expanddims_optimizer"], [319, 0, 0, "-", "fetch_weight_from_reshape"], [320, 0, 0, "-", "fold_batch_norm"], [321, 0, 0, "-", "fold_constant"], [322, 0, 0, "-", "fuse_biasadd_add"], [323, 0, 0, "-", "fuse_column_wise_mul"], [324, 0, 0, "-", "fuse_conv_with_math"], [325, 0, 0, "-", "fuse_decomposed_bn"], [326, 0, 0, "-", "fuse_decomposed_in"], [327, 0, 0, "-", "fuse_gelu"], [328, 0, 0, "-", "fuse_layer_norm"], [329, 0, 0, "-", "fuse_pad_with_conv"], [330, 0, 0, "-", "fuse_pad_with_fp32_conv"], [331, 0, 0, "-", "fuse_reshape_transpose"], [332, 0, 0, "-", "graph_cse_optimizer"], [333, 0, 0, "-", "grappler_pass"], [335, 0, 0, "-", "insert_print_node"], [336, 0, 0, "-", "move_squeeze_after_relu"], [337, 0, 0, "-", "pre_optimize"], [338, 0, 0, "-", "remove_training_nodes"], [339, 0, 0, "-", "rename_batch_norm"], [340, 0, 0, "-", "split_shared_input"], [341, 0, 0, "-", "strip_equivalent_nodes"], [342, 0, 0, "-", "strip_unused_nodes"], [343, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[311, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[312, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[313, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[314, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[315, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[316, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[317, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[318, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[319, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[320, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[321, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[322, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[323, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[324, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[325, 1, 1, "", "FuseDecomposedBNOptimizer"], [325, 2, 1, "", "bypass_reshape"], [325, 2, 1, "", "get_const_dim_count"], [325, 2, 1, "", "node_from_map"], [325, 2, 1, "", "node_name_from_input"], [325, 2, 1, "", "valid_reshape_inputs"], [325, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[326, 1, 1, "", "FuseDecomposedINOptimizer"], [326, 2, 1, "", "bypass_reshape"], [326, 2, 1, "", "get_const_dim_count"], [326, 2, 1, "", "node_from_map"], [326, 2, 1, "", "node_name_from_input"], [326, 2, 1, "", "valid_reshape_inputs"], [326, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[327, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[328, 1, 1, "", "FuseLayerNormOptimizer"], [328, 2, 1, "", "node_from_map"], [328, 2, 1, "", "node_name_from_input"], [328, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[329, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[330, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[331, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[332, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[333, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[335, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[336, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[337, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[338, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[339, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[340, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[341, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[342, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[343, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[344, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[346, 0, 0, "-", "freeze_fake_quant"], [347, 0, 0, "-", "freeze_value"], [348, 0, 0, "-", "fuse_conv_redundant_dequantize"], [349, 0, 0, "-", "fuse_conv_requantize"], [350, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [351, 0, 0, "-", "fuse_matmul_requantize"], [353, 0, 0, "-", "meta_op_optimizer"], [354, 0, 0, "-", "post_hostconst_converter"], [355, 0, 0, "-", "post_quantized_op_cse"], [356, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[346, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[347, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[348, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[349, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[350, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[351, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [351, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [351, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [351, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[353, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[354, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[355, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[356, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[358, 0, 0, "-", "insert_qdq_pattern"], [359, 0, 0, "-", "merge_duplicated_qdq"], [360, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[358, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[359, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[360, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[361, 1, 1, "", "GraphAnalyzer"], [361, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[371, 0, 0, "-", "qdq"], [373, 0, 0, "-", "quantize_graph_base"], [374, 0, 0, "-", "quantize_graph_bn"], [375, 0, 0, "-", "quantize_graph_concatv2"], [376, 0, 0, "-", "quantize_graph_conv"], [377, 0, 0, "-", "quantize_graph_for_intel_cpu"], [378, 0, 0, "-", "quantize_graph_matmul"], [379, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[364, 0, 0, "-", "fuse_qdq_bn"], [365, 0, 0, "-", "fuse_qdq_concatv2"], [366, 0, 0, "-", "fuse_qdq_conv"], [367, 0, 0, "-", "fuse_qdq_deconv"], [368, 0, 0, "-", "fuse_qdq_in"], [369, 0, 0, "-", "fuse_qdq_matmul"], [370, 0, 0, "-", "fuse_qdq_pooling"], [372, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[364, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[365, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[366, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[367, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[368, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[369, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[370, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[372, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[373, 1, 1, "", "QuantizeGraphBase"], [373, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[374, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[375, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[376, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[377, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[378, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[379, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[380, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[381, 0, 0, "-", "bias_correction"], [382, 0, 0, "-", "graph_transform_base"], [384, 0, 0, "-", "insert_logging"], [385, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[381, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[382, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[384, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[385, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[386, 2, 1, "", "apply_inlining"], [386, 2, 1, "", "collate_tf_preds"], [386, 2, 1, "", "construct_function_from_graph_def"], [386, 2, 1, "", "fix_ref_type_of_graph_def"], [386, 2, 1, "", "generate_feed_dict"], [386, 2, 1, "", "get_graph_def"], [386, 2, 1, "", "get_input_output_node_names"], [386, 2, 1, "", "get_model_input_shape"], [386, 2, 1, "", "get_tensor_by_name"], [386, 2, 1, "", "is_ckpt_format"], [386, 2, 1, "", "is_saved_model_format"], [386, 2, 1, "", "iterator_sess_run"], [386, 2, 1, "", "parse_saved_model"], [386, 2, 1, "", "read_graph"], [386, 2, 1, "", "reconstruct_saved_model"], [386, 2, 1, "", "strip_equivalent_nodes"], [386, 2, 1, "", "strip_unused_nodes"], [386, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[387, 0, 0, "-", "constants"], [388, 0, 0, "-", "data"], [390, 0, 0, "-", "model"], [391, 0, 0, "-", "model_wrappers"], [392, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[388, 1, 1, "", "BaseDataLoader"], [388, 1, 1, "", "BatchSampler"], [388, 1, 1, "", "DummyDataset"], [388, 1, 1, "", "DummyDatasetV2"], [388, 1, 1, "", "IndexFetcher"], [388, 1, 1, "", "IterableFetcher"], [388, 1, 1, "", "IterableSampler"], [388, 1, 1, "", "SequentialSampler"], [388, 2, 1, "", "default_collate"]], "neural_compressor.tensorflow.utils.model": [[390, 1, 1, "", "Model"], [390, 1, 1, "", "TensorflowGlobalConfig"]], "neural_compressor.tensorflow.utils.model_wrappers": [[391, 1, 1, "", "BaseModel"], [391, 1, 1, "", "KerasModel"], [391, 1, 1, "", "TensorflowBaseModel"], [391, 1, 1, "", "TensorflowCheckpointModel"], [391, 1, 1, "", "TensorflowLLMModel"], [391, 1, 1, "", "TensorflowModel"], [391, 1, 1, "", "TensorflowSavedModelModel"], [391, 2, 1, "", "checkpoint_session"], [391, 2, 1, "", "estimator_session"], [391, 2, 1, "", "frozen_pb_session"], [391, 2, 1, "", "get_model_type"], [391, 2, 1, "", "get_tf_model_type"], [391, 2, 1, "", "graph_def_session"], [391, 2, 1, "", "graph_session"], [391, 2, 1, "", "keras_session"], [391, 2, 1, "", "load_saved_model"], [391, 2, 1, "", "saved_model_session"], [391, 2, 1, "", "slim_session"], [391, 2, 1, "", "try_loading_keras"], [391, 2, 1, "", "validate_and_inference_input_output"], [391, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.utility": [[392, 1, 1, "", "CaptureOutputToFile"], [392, 1, 1, "", "CpuInfo"], [392, 1, 1, "", "TFSlimNetsFactory"], [392, 2, 1, "", "combine_histogram"], [392, 2, 1, "", "deep_get"], [392, 2, 1, "", "disable_random"], [392, 2, 1, "", "dump_elapsed_time"], [392, 2, 1, "", "get_all_fp32_data"], [392, 2, 1, "", "get_tensor_histogram"], [392, 2, 1, "", "itex_installed"], [392, 2, 1, "", "register_algo"], [392, 2, 1, "", "singleton"], [392, 2, 1, "", "valid_keras_format"], [392, 2, 1, "", "version1_eq_version2"], [392, 2, 1, "", "version1_gt_version2"], [392, 2, 1, "", "version1_gte_version2"], [392, 2, 1, "", "version1_lt_version2"], [392, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[398, 0, 0, "-", "algorithms"], [438, 0, 0, "-", "export"], [444, 0, 0, "-", "quantization"], [452, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[393, 0, 0, "-", "base_algorithm"], [399, 0, 0, "-", "layer_wise"], [404, 0, 0, "-", "mixed_precision"], [406, 0, 0, "-", "mx_quant"], [411, 0, 0, "-", "pt2e_quant"], [414, 0, 0, "-", "smooth_quant"], [418, 0, 0, "-", "static_quant"], [432, 0, 0, "-", "weight_only"]], "neural_compressor.torch.algorithms.base_algorithm": [[393, 1, 1, "", "Quantizer"]], "neural_compressor.torch.algorithms.fp8_quant": [[394, 0, 0, "-", "observer"], [395, 0, 0, "-", "patched_module_base"], [396, 0, 0, "-", "scaling_method_base"]], "neural_compressor.torch.algorithms.fp8_quant.observer": [[394, 1, 1, "", "ObserverBase"], [394, 2, 1, "", "register_observer"]], "neural_compressor.torch.algorithms.fp8_quant.patched_module_base": [[395, 1, 1, "", "PatchedModuleBase"], [395, 2, 1, "", "register_patched_module"]], "neural_compressor.torch.algorithms.fp8_quant.scaling_method_base": [[396, 1, 1, "", "ScalingMethodBase"], [396, 2, 1, "", "register_scaling_methods"]], "neural_compressor.torch.algorithms.fp8_quant.utils": [[397, 0, 0, "-", "logger"]], "neural_compressor.torch.algorithms.layer_wise": [[400, 0, 0, "-", "load"], [401, 0, 0, "-", "modified_pickle"], [402, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[400, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[401, 3, 1, "", "PickleError"], [401, 3, 1, "", "PicklingError"], [401, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[402, 1, 1, "", "QDQLayer"], [402, 2, 1, "", "clean_module_weight"], [402, 2, 1, "", "get_children"], [402, 2, 1, "", "get_module"], [402, 2, 1, "", "get_named_children"], [402, 2, 1, "", "get_super_module_by_name"], [402, 2, 1, "", "load_layer_wise_quantized_model"], [402, 2, 1, "", "load_module"], [402, 2, 1, "", "load_tensor"], [402, 2, 1, "", "load_tensor_from_safetensors"], [402, 2, 1, "", "load_tensor_from_safetensors_shard"], [402, 2, 1, "", "load_tensor_from_shard"], [402, 2, 1, "", "load_value"], [402, 2, 1, "", "register_weight_hooks"], [402, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.mixed_precision": [[403, 0, 0, "-", "half_precision_convert"], [405, 0, 0, "-", "module_wrappers"]], "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert": [[403, 1, 1, "", "HalfPrecisionConverter"]], "neural_compressor.torch.algorithms.mixed_precision.module_wrappers": [[405, 1, 1, "", "HalfPrecisionModuleWrapper"]], "neural_compressor.torch.algorithms.mx_quant": [[407, 0, 0, "-", "mx"], [408, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.mx_quant.mx": [[407, 1, 1, "", "MXLinear"], [407, 1, 1, "", "MXQuantizer"]], "neural_compressor.torch.algorithms.mx_quant.utils": [[408, 1, 1, "", "ElemFormat"], [408, 1, 1, "", "RoundingMode"], [408, 2, 1, "", "quantize_elemwise_op"], [408, 2, 1, "", "quantize_mx_op"]], "neural_compressor.torch.algorithms.pt2e_quant": [[409, 0, 0, "-", "core"], [410, 0, 0, "-", "half_precision_rewriter"], [412, 0, 0, "-", "save_load"], [413, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.pt2e_quant.core": [[409, 1, 1, "", "W8A8PT2EQuantizer"]], "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter": [[410, 1, 1, "", "PatternPair"], [410, 2, 1, "", "apply_single_pattern_pair"], [410, 2, 1, "", "get_filter_fn"], [410, 2, 1, "", "get_half_precision_node_set"], [410, 2, 1, "", "get_unquantized_node_set"], [410, 2, 1, "", "pattern_factory"], [410, 2, 1, "", "transformation"]], "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair": [[410, 4, 1, "", "fn"], [410, 4, 1, "", "replace_pattern"], [410, 4, 1, "", "search_pattern"]], "neural_compressor.torch.algorithms.pt2e_quant.save_load": [[412, 2, 1, "", "load"], [412, 2, 1, "", "save"]], "neural_compressor.torch.algorithms.pt2e_quant.utility": [[413, 2, 1, "", "create_quant_spec_from_config"], [413, 2, 1, "", "create_xiq_quantizer_from_pt2e_config"]], "neural_compressor.torch.algorithms.smooth_quant": [[415, 0, 0, "-", "save_load"], [416, 0, 0, "-", "smooth_quant"], [417, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[415, 2, 1, "", "recover_model_from_json"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[416, 1, 1, "", "SmoothQuantQuantizer"], [416, 2, 1, "", "qdq_quantize"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[417, 1, 1, "", "AutoAlpha"], [417, 1, 1, "", "Calibration"], [417, 1, 1, "", "GraphTrace"], [417, 1, 1, "", "SQLinearWrapper"], [417, 1, 1, "", "TorchSmoothQuant"], [417, 1, 1, "", "WrapperLayer"], [417, 2, 1, "", "build_captured_dataloader"], [417, 2, 1, "", "cal_scale"], [417, 2, 1, "", "cfg_to_qconfig"], [417, 2, 1, "", "check_cfg_and_qconfig"], [417, 2, 1, "", "dump_model_op_stats"], [417, 2, 1, "", "enough_memo_store_scale"], [417, 2, 1, "", "forward_wrapper"], [417, 2, 1, "", "get_module"], [417, 2, 1, "", "get_parent"], [417, 2, 1, "", "get_quantizable_ops_recursively"], [417, 2, 1, "", "model_forward"], [417, 2, 1, "", "model_forward_per_sample"], [417, 2, 1, "", "move_input_to_device"], [417, 2, 1, "", "quant_dequant_w_v1"], [417, 2, 1, "", "quant_dequant_x_v1"], [417, 2, 1, "", "register_autotune"], [417, 2, 1, "", "reshape_in_channel_to_last"], [417, 2, 1, "", "reshape_scale_as_input"], [417, 2, 1, "", "reshape_scale_as_weight"], [417, 2, 1, "", "set_module"], [417, 2, 1, "", "update_sq_scale"]], "neural_compressor.torch.algorithms.static_quant": [[419, 0, 0, "-", "save_load"], [420, 0, 0, "-", "static_quant"], [421, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.static_quant.save_load": [[419, 2, 1, "", "load"], [419, 2, 1, "", "save"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[420, 1, 1, "", "StaticQuantQuantizer"]], "neural_compressor.torch.algorithms.static_quant.utility": [[421, 1, 1, "", "TransformerBasedModelBlockPatternDetector"], [421, 2, 1, "", "cfg_to_qconfig"], [421, 2, 1, "", "check_cfg_and_qconfig"], [421, 2, 1, "", "dump_model_op_stats"], [421, 2, 1, "", "generate_activation_observer"], [421, 2, 1, "", "generate_xpu_qconfig"], [421, 2, 1, "", "get_depth"], [421, 2, 1, "", "get_dict_at_depth"], [421, 2, 1, "", "get_element_under_depth"], [421, 2, 1, "", "get_quantizable_ops_from_cfgs"], [421, 2, 1, "", "get_quantizable_ops_recursively"], [421, 2, 1, "", "parse_cfgs"], [421, 2, 1, "", "simple_inference"]], "neural_compressor.torch.algorithms.weight_only": [[422, 0, 0, "-", "autoround"], [423, 0, 0, "-", "awq"], [424, 0, 0, "-", "gptq"], [428, 0, 0, "-", "hqq"], [433, 0, 0, "-", "modules"], [434, 0, 0, "-", "rtn"], [435, 0, 0, "-", "save_load"], [436, 0, 0, "-", "teq"], [437, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[422, 1, 1, "", "AutoRoundQuantizer"], [422, 2, 1, "", "get_dataloader"], [422, 2, 1, "", "get_mllm_dataloader"]], "neural_compressor.torch.algorithms.weight_only.awq": [[423, 1, 1, "", "AWQQuantizer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[424, 1, 1, "", "GPTQ"], [424, 1, 1, "", "GPTQuantizer"], [424, 1, 1, "", "Quantizer"], [424, 1, 1, "", "RAWGPTQuantizer"], [424, 2, 1, "", "find_layers"], [424, 2, 1, "", "find_layers_name"], [424, 2, 1, "", "is_leaf"], [424, 2, 1, "", "log_quantizable_layers_per_transformer"], [424, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[425, 0, 0, "-", "bitpack"], [426, 0, 0, "-", "config"], [427, 0, 0, "-", "core"], [429, 0, 0, "-", "optimizer"], [430, 0, 0, "-", "qtensor"], [431, 0, 0, "-", "quantizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[425, 1, 1, "", "Packer"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[426, 1, 1, "", "HQQModuleConfig"], [426, 1, 1, "", "QTensorConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[427, 1, 1, "", "HQQLinear"], [427, 1, 1, "", "HQQTensorHandle"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[429, 2, 1, "", "optimize_weights_proximal_legacy"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[430, 1, 1, "", "QTensor"], [430, 1, 1, "", "QTensorMetaInfo"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo": [[430, 4, 1, "", "axis"], [430, 4, 1, "", "group_size"], [430, 4, 1, "", "nbits"], [430, 4, 1, "", "packing"], [430, 4, 1, "", "shape"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[431, 1, 1, "", "HQQuantizer"], [431, 2, 1, "", "filter_fn"], [431, 2, 1, "", "patch_hqq_moduile"], [431, 2, 1, "", "replacement_fn"]], "neural_compressor.torch.algorithms.weight_only.modules": [[433, 1, 1, "", "FakeAffineTensorQuantFunction"], [433, 1, 1, "", "HPUWeightOnlyLinear"], [433, 1, 1, "", "INCWeightOnlyLinear"], [433, 1, 1, "", "MulLinear"], [433, 1, 1, "", "QDQLayer"], [433, 1, 1, "", "TEQLinearFakeQuant"], [433, 1, 1, "", "UnpackedWeightOnlyLinearParams"], [433, 1, 1, "", "WeightOnlyLinear"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[434, 1, 1, "", "RTNQuantizer"]], "neural_compressor.torch.algorithms.weight_only.save_load": [[435, 1, 1, "", "WOQModelLoader"], [435, 2, 1, "", "load"], [435, 2, 1, "", "save"]], "neural_compressor.torch.algorithms.weight_only.teq": [[436, 1, 1, "", "TEQuantizer"], [436, 1, 1, "", "TrainableEquivalentTransformation"]], "neural_compressor.torch.algorithms.weight_only.utility": [[437, 1, 1, "", "GraphTrace"], [437, 2, 1, "", "fetch_module"], [437, 2, 1, "", "forward_wrapper"], [437, 2, 1, "", "get_absorb_layers"], [437, 2, 1, "", "get_block_prefix"], [437, 2, 1, "", "get_module"], [437, 2, 1, "", "get_module_input_output"], [437, 2, 1, "", "get_parent"], [437, 2, 1, "", "model_forward"], [437, 2, 1, "", "move_input_to_device"], [437, 2, 1, "", "qdq_weight_actor"], [437, 2, 1, "", "qdq_weight_asym"], [437, 2, 1, "", "qdq_weight_sym"], [437, 2, 1, "", "quant_tensor"], [437, 2, 1, "", "quant_weight_w_scale"], [437, 2, 1, "", "quantize_4bit"], [437, 2, 1, "", "recover_forward"], [437, 2, 1, "", "replace_forward"], [437, 2, 1, "", "search_clip"], [437, 2, 1, "", "set_module"]], "neural_compressor.torch.export": [[439, 0, 0, "-", "pt2e_export"]], "neural_compressor.torch.export.pt2e_export": [[439, 2, 1, "", "export"], [439, 2, 1, "", "export_model_for_pt2e_quant"]], "neural_compressor.torch.quantization": [[441, 0, 0, "-", "algorithm_entry"], [442, 0, 0, "-", "autotune"], [443, 0, 0, "-", "config"], [445, 0, 0, "-", "quantize"], [446, 0, 0, "-", "save_load_entry"]], "neural_compressor.torch.quantization.algorithm_entry": [[441, 2, 1, "", "autoround_quantize_entry"], [441, 2, 1, "", "awq_quantize_entry"], [441, 2, 1, "", "fp8_entry"], [441, 2, 1, "", "gptq_entry"], [441, 2, 1, "", "hqq_entry"], [441, 2, 1, "", "mixed_precision_entry"], [441, 2, 1, "", "mx_quant_entry"], [441, 2, 1, "", "pt2e_dynamic_quant_entry"], [441, 2, 1, "", "pt2e_static_quant_entry"], [441, 2, 1, "", "rtn_entry"], [441, 2, 1, "", "smooth_quant_entry"], [441, 2, 1, "", "static_quant_entry"], [441, 2, 1, "", "teq_quantize_entry"]], "neural_compressor.torch.quantization.autotune": [[442, 2, 1, "", "autotune"], [442, 2, 1, "", "get_all_config_set"], [442, 2, 1, "", "get_rtn_double_quant_config_set"]], "neural_compressor.torch.quantization.config": [[443, 1, 1, "", "AWQConfig"], [443, 1, 1, "", "AutoRoundConfig"], [443, 1, 1, "", "DynamicQuantConfig"], [443, 1, 1, "", "FP8Config"], [443, 1, 1, "", "GPTQConfig"], [443, 1, 1, "", "HQQConfig"], [443, 1, 1, "", "INT8StaticQuantConfig"], [443, 1, 1, "", "MXQuantConfig"], [443, 1, 1, "", "MixedPrecisionConfig"], [443, 1, 1, "", "OperatorConfig"], [443, 1, 1, "", "RTNConfig"], [443, 1, 1, "", "SmoothQuantConfig"], [443, 1, 1, "", "StaticQuantConfig"], [443, 1, 1, "", "TEQConfig"], [443, 1, 1, "", "TorchBaseConfig"], [443, 2, 1, "", "get_all_registered_configs"], [443, 2, 1, "", "get_default_AutoRound_config"], [443, 2, 1, "", "get_default_awq_config"], [443, 2, 1, "", "get_default_double_quant_config"], [443, 2, 1, "", "get_default_dynamic_config"], [443, 2, 1, "", "get_default_fp8_config"], [443, 2, 1, "", "get_default_fp8_config_set"], [443, 2, 1, "", "get_default_gptq_config"], [443, 2, 1, "", "get_default_hqq_config"], [443, 2, 1, "", "get_default_mixed_precision_config"], [443, 2, 1, "", "get_default_mixed_precision_config_set"], [443, 2, 1, "", "get_default_mx_config"], [443, 2, 1, "", "get_default_rtn_config"], [443, 2, 1, "", "get_default_sq_config"], [443, 2, 1, "", "get_default_static_config"], [443, 2, 1, "", "get_default_teq_config"], [443, 2, 1, "", "get_woq_tuning_config"]], "neural_compressor.torch.quantization.quantize": [[445, 2, 1, "", "convert"], [445, 2, 1, "", "finalize_calibration"], [445, 2, 1, "", "need_apply"], [445, 2, 1, "", "prepare"], [445, 2, 1, "", "quantize"]], "neural_compressor.torch.quantization.save_load_entry": [[446, 2, 1, "", "load"], [446, 2, 1, "", "save"]], "neural_compressor.torch.utils": [[447, 0, 0, "-", "auto_accelerator"], [448, 0, 0, "-", "bit_packer"], [449, 0, 0, "-", "block_wise"], [450, 0, 0, "-", "constants"], [451, 0, 0, "-", "environ"], [453, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.auto_accelerator": [[447, 1, 1, "", "AcceleratorRegistry"], [447, 1, 1, "", "Auto_Accelerator"], [447, 1, 1, "", "CPU_Accelerator"], [447, 1, 1, "", "CUDA_Accelerator"], [447, 1, 1, "", "HPU_Accelerator"], [447, 1, 1, "", "XPU_Accelerator"], [447, 2, 1, "", "auto_detect_accelerator"], [447, 2, 1, "", "register_accelerator"]], "neural_compressor.torch.utils.bit_packer": [[448, 2, 1, "", "pack_array_with_numba_b2_c16"], [448, 2, 1, "", "pack_array_with_numba_b2_c32"], [448, 2, 1, "", "pack_array_with_numba_b2_c64"], [448, 2, 1, "", "pack_array_with_numba_b2_c8"], [448, 2, 1, "", "pack_array_with_numba_b4_c16"], [448, 2, 1, "", "pack_array_with_numba_b4_c32"], [448, 2, 1, "", "pack_array_with_numba_b4_c64"], [448, 2, 1, "", "pack_array_with_numba_b4_c8"], [448, 2, 1, "", "pack_array_with_numba_b8_c16"], [448, 2, 1, "", "pack_array_with_numba_b8_c32"], [448, 2, 1, "", "pack_array_with_numba_b8_c64"], [448, 2, 1, "", "pack_array_with_numba_b8_c8"], [448, 2, 1, "", "register_pack_func"]], "neural_compressor.torch.utils.block_wise": [[449, 2, 1, "", "block_wise_calibration"], [449, 2, 1, "", "get_block_prefix"], [449, 2, 1, "", "recover_forward"], [449, 2, 1, "", "replace_forward"]], "neural_compressor.torch.utils.constants": [[450, 1, 1, "", "SaveLoadFormat"]], "neural_compressor.torch.utils.environ": [[451, 2, 1, "", "can_pack_with_numba"], [451, 2, 1, "", "device_synchronize"], [451, 2, 1, "", "get_accelerator"], [451, 2, 1, "", "get_ipex_version"], [451, 2, 1, "", "get_torch_version"], [451, 2, 1, "", "get_used_cpu_mem_MB"], [451, 2, 1, "", "get_used_hpu_mem_MB"], [451, 2, 1, "", "is_hpex_available"], [451, 2, 1, "", "is_ipex_available"], [451, 2, 1, "", "is_ipex_imported"], [451, 2, 1, "", "is_numba_available"], [451, 2, 1, "", "is_optimum_available"], [451, 2, 1, "", "is_optimum_habana_available"], [451, 2, 1, "", "is_package_available"], [451, 2, 1, "", "is_tbb_available"], [451, 2, 1, "", "is_transformers_imported"]], "neural_compressor.torch.utils.utility": [[453, 2, 1, "", "detect_device"], [453, 2, 1, "", "dowload_hf_model"], [453, 2, 1, "", "dump_model_op_stats"], [453, 2, 1, "", "fetch_module"], [453, 2, 1, "", "find_matching_blocks"], [453, 2, 1, "", "forward_wrapper"], [453, 2, 1, "", "get_block_names"], [453, 2, 1, "", "get_double_quant_config_dict"], [453, 2, 1, "", "get_layer_names_in_block"], [453, 2, 1, "", "get_model_device"], [453, 2, 1, "", "get_model_info"], [453, 2, 1, "", "get_module"], [453, 2, 1, "", "get_multimodal_block_names"], [453, 2, 1, "", "get_non_persistent_buffers"], [453, 2, 1, "", "get_processor_type_from_user_config"], [453, 2, 1, "", "get_quantizer"], [453, 2, 1, "", "load_empty_model"], [453, 2, 1, "", "load_non_persistent_buffers"], [453, 2, 1, "", "move_input_device"], [453, 2, 1, "", "postprocess_model"], [453, 2, 1, "", "register_algo"], [453, 2, 1, "", "set_module"], [453, 2, 1, "", "to_device"], [453, 2, 1, "", "to_dtype"], [453, 2, 1, "", "validate_modules"]], "neural_compressor.training": [[454, 1, 1, "", "CallBacks"], [454, 1, 1, "", "CompressionManager"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "prepare_compression"]], "neural_compressor.transformers": [[456, 0, 0, "-", "utils"]], "neural_compressor.transformers.quantization": [[455, 0, 0, "-", "utils"]], "neural_compressor.transformers.utils": [[457, 0, 0, "-", "quantization_config"]], "neural_compressor.transformers.utils.quantization_config": [[457, 1, 1, "", "AutoRoundConfig"], [457, 1, 1, "", "AwqConfig"], [457, 1, 1, "", "GPTQConfig"], [457, 1, 1, "", "INCQuantizationConfigMixin"], [457, 1, 1, "", "QuantizationMethod"], [457, 1, 1, "", "RtnConfig"], [457, 1, 1, "", "TeqConfig"]], "neural_compressor.utils": [[458, 0, 0, "-", "collect_layer_histogram"], [459, 0, 0, "-", "constant"], [460, 0, 0, "-", "create_obj_from_config"], [461, 0, 0, "-", "export"], [466, 0, 0, "-", "kl_divergence"], [467, 0, 0, "-", "load_huggingface"], [468, 0, 0, "-", "logger"], [469, 0, 0, "-", "options"], [470, 0, 0, "-", "pytorch"], [471, 0, 0, "-", "utility"], [472, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[458, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[460, 2, 1, "", "create_dataloader"], [460, 2, 1, "", "create_dataset"], [460, 2, 1, "", "create_eval_func"], [460, 2, 1, "", "create_train_func"], [460, 2, 1, "", "get_algorithm"], [460, 2, 1, "", "get_func_from_config"], [460, 2, 1, "", "get_metrics"], [460, 2, 1, "", "get_postprocess"], [460, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[462, 0, 0, "-", "qlinear2qdq"], [463, 0, 0, "-", "tf2onnx"], [464, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[462, 2, 1, "", "check_model"], [462, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[463, 2, 1, "", "tf_to_fp32_onnx"], [463, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[464, 2, 1, "", "dynamic_quant_export"], [464, 2, 1, "", "get_node_mapping"], [464, 2, 1, "", "get_quantizable_onnx_ops"], [464, 2, 1, "", "static_quant_export"], [464, 2, 1, "", "torch_to_fp32_onnx"], [464, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[466, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[467, 1, 1, "", "OptimizedModel"], [467, 2, 1, "", "export_compressed_model"], [467, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[468, 1, 1, "", "Logger"], [468, 2, 1, "", "debug"], [468, 2, 1, "", "error"], [468, 2, 1, "", "fatal"], [468, 2, 1, "", "info"], [468, 2, 1, "", "log"], [468, 2, 1, "", "warn"], [468, 2, 1, "", "warning"]], "neural_compressor.utils.options": [[469, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[470, 2, 1, "", "is_int8_model"], [470, 2, 1, "", "load"], [470, 2, 1, "", "load_weight_only"], [470, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[471, 1, 1, "", "CaptureOutputToFile"], [471, 1, 1, "", "CpuInfo"], [471, 2, 1, "", "Dequantize"], [471, 1, 1, "", "DotDict"], [471, 1, 1, "", "GLOBAL_STATE"], [471, 1, 1, "", "LazyImport"], [471, 1, 1, "", "MODE"], [471, 1, 1, "", "OpEntry"], [471, 1, 1, "", "Statistics"], [471, 2, 1, "", "alias_param"], [471, 2, 1, "", "calculate_mse"], [471, 2, 1, "", "check_key_exist"], [471, 2, 1, "", "combine_histogram"], [471, 2, 1, "", "compare_objects"], [471, 2, 1, "", "compute_sparsity"], [471, 2, 1, "", "deep_get"], [471, 2, 1, "", "deep_set"], [471, 2, 1, "", "dequantize_weight"], [471, 2, 1, "", "dump_class_attrs"], [471, 2, 1, "", "dump_data_to_local"], [471, 2, 1, "", "dump_elapsed_time"], [471, 2, 1, "", "dump_table"], [471, 2, 1, "", "dump_table_to_csv"], [471, 2, 1, "", "equal_dicts"], [471, 2, 1, "", "fault_tolerant_file"], [471, 2, 1, "", "get_all_fp32_data"], [471, 2, 1, "", "get_number_of_sockets"], [471, 2, 1, "", "get_op_list"], [471, 2, 1, "", "get_size"], [471, 2, 1, "", "get_tensor_histogram"], [471, 2, 1, "", "get_tensors_info"], [471, 2, 1, "", "get_tuning_history"], [471, 2, 1, "", "get_weights_details"], [471, 2, 1, "", "load_data_from_pkl"], [471, 2, 1, "", "mse_metric_gap"], [471, 2, 1, "", "print_op_list"], [471, 2, 1, "", "print_table"], [471, 2, 1, "", "recover"], [471, 2, 1, "", "set_random_seed"], [471, 2, 1, "", "set_resume_from"], [471, 2, 1, "", "set_tensorboard"], [471, 2, 1, "", "set_workspace"], [471, 2, 1, "", "show_memory_info"], [471, 2, 1, "", "singleton"], [471, 2, 1, "", "str2array"], [471, 2, 1, "", "time_limit"], [471, 2, 1, "", "version1_eq_version2"], [471, 2, 1, "", "version1_gt_version2"], [471, 2, 1, "", "version1_gte_version2"], [471, 2, 1, "", "version1_lt_version2"], [471, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[472, 1, 1, "", "WeightsDetails"], [472, 1, 1, "", "WeightsStatistics"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "terms": {"": [30, 31, 90, 128, 133, 140, 150, 152, 174, 175, 176, 180, 181, 182, 183, 186, 188, 193, 195, 196, 209, 212, 225, 226, 233, 235, 236, 240, 263, 381, 386, 392, 400, 417, 435, 437, 446, 453, 471, 475, 476, 477, 479, 480, 481, 482, 484, 486, 488, 493, 495, 496, 501, 502, 527, 531, 533, 534, 535, 536, 538, 543, 544, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560], "0": [3, 30, 31, 39, 75, 90, 133, 139, 140, 145, 147, 149, 152, 153, 154, 164, 170, 172, 193, 196, 201, 203, 205, 210, 213, 214, 217, 222, 226, 235, 246, 263, 268, 282, 304, 312, 386, 388, 400, 417, 421, 429, 437, 443, 447, 457, 464, 467, 478, 479, 480, 482, 485, 487, 488, 491, 493, 494, 497, 499, 509, 527, 528, 531, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 546, 549, 551, 552, 554, 555, 556, 557, 558, 559], "00": [541, 560], "000": [212, 499], "0000": 545, "00000": 212, "00001": 212, "00003": 212, "00004": 212, "0001": [3, 196, 543], "0003": [541, 560], "0004": 543, "0005": 541, "0006": 541, "0007": 560, "0008": 541, "001": [212, 493, 531, 557], "0016": 541, "002": 531, "0021": 541, "0025": 541, "0029": [493, 557, 560], "00296431384049356": [493, 557], "0030": 560, "0036": [493, 557], "0040": 541, "0043": 541, "0046": [541, 560], "005": 554, "0051": 541, "0058": 560, "0059755356051027775": [493, 557], "0061": 541, "006533813662827015": [493, 557], "00774": 549, "0081": 560, "0086": [493, 557], "0097": 541, "00978": [443, 482, 493, 554], "00x": 560, "01": [31, 153, 196, 429, 443, 482, 541, 543, 554, 559, 560], "0106": 560, "0115": 560, "0119": 560, "0130": 560, "0142": 541, "017": 558, "01x": 560, "02": [196, 560], "0201": 541, "0213": 560, "02340": 170, "027": 560, "02x": 560, "03": [541, 560], "0352": 541, "03x": 560, "04": [499, 539, 560], "04191": 526, "04x": 560, "05": [150, 196, 235, 417, 541, 542, 557, 560], "0500": [493, 557], "05516": [443, 482, 493], "0559": 541, "05754": 549, "05x": 560, "06": 560, "0698": [493, 557], "06x": 560, "07": [493, 499, 557, 560], "0734": 560, "0737": [493, 557], "07x": 560, "08": [226, 541, 558, 560], "0806": [493, 557], "0837": 556, "09": [541, 560], "09656": 188, "099": 212, "09x": 560, "0f": 531, "0x": [140, 400], "0x2b000590": 560, "1": [3, 29, 30, 31, 40, 59, 74, 90, 94, 98, 131, 133, 140, 142, 145, 147, 149, 150, 151, 153, 154, 164, 170, 182, 183, 185, 196, 201, 203, 205, 209, 210, 211, 213, 214, 217, 218, 222, 226, 231, 232, 233, 235, 246, 263, 281, 282, 285, 293, 295, 299, 313, 332, 347, 360, 384, 386, 388, 392, 395, 400, 417, 421, 422, 424, 429, 433, 437, 443, 446, 457, 460, 467, 471, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 491, 493, 495, 497, 499, 500, 502, 526, 528, 533, 535, 539, 541, 542, 544, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559], "10": [196, 212, 267, 429, 487, 488, 499, 525, 533, 539, 543, 549, 558, 559, 560], "100": [3, 151, 152, 153, 196, 212, 282, 302, 303, 306, 447, 486, 493, 494, 525, 531, 537, 539, 543, 551, 558, 559, 560], "1000": 543, "10000": [267, 549], "10004": [479, 482, 483, 488, 494, 497, 500, 528, 530, 531, 535, 538, 544, 546, 548, 552, 554], "10005": [546, 552], "10006": 530, "10016": [493, 557], "100x": [482, 493, 554], "101": [210, 235, 493, 542, 557, 560], "102": 560, "1024": [131, 212, 384], "10271": [478, 546], "10281": [478, 546], "103": 558, "1034": 560, "10438": [482, 493, 554, 557], "1048": 560, "10537": [478, 546], "106": 560, "107": 560, "1076": 560, "10833": 226, "1091": 560, "10k": [422, 457, 532], "10x": 560, "11": [479, 493, 539, 542, 544, 557, 559, 560], "1106": 560, "1114": 560, "1115": 560, "1121": 560, "1135": 560, "1136": 560, "1137": 560, "116": 558, "1188": 560, "119": [493, 557], "12": [541, 560], "120": [493, 557, 560], "1202": 560, "1205": 560, "121": 560, "123": [212, 558, 560], "1234": 560, "1236": 560, "1237": 560, "124m": [480, 557], "125": 560, "1259": 560, "125m": [480, 536, 557, 560], "126": 560, "127": [213, 214, 388, 493, 551, 557], "128": [3, 31, 145, 210, 213, 214, 226, 388, 422, 424, 443, 457, 482, 487, 493, 543, 551, 554, 558], "1285": 560, "12b": 541, "13": [493, 534, 539, 557, 560], "130": 560, "1307": 560, "132": 560, "13325": [482, 493, 554, 557], "1344": 560, "135": 560, "1365": [226, 558, 560], "1381": [493, 557], "1388": 560, "139": [493, 557], "13b": [480, 541, 557], "13x": 560, "14": [196, 463, 464, 533, 539, 560], "14314": [482, 493, 554], "144": 560, "1445": 560, "146": 560, "147": 560, "148": 560, "1495": 560, "15": [133, 386, 535, 539, 541], "150": 560, "1506": 560, "151": 560, "1510": [493, 557], "152": 560, "153": 560, "1535": 560, "1547": 560, "156": 560, "1564": 560, "1574": 560, "1583": [493, 557], "15x": 560, "16": [448, 479, 539, 554], "1601": [493, 557], "161": 560, "162": [493, 557, 560], "164": 560, "1644": 560, "16599": [493, 557], "169": 560, "16x": 560, "16x32gb": 560, "17": [491, 539, 541, 560], "1707": 560, "1717": 560, "172": [493, 557, 560], "1732": 560, "17323": [424, 443, 482, 493, 554], "1742": [493, 557], "1749": [493, 557], "175": 560, "17509": [493, 557], "1751": [493, 557], "176": 560, "177": [233, 560], "178": 560, "17x": 560, "18": [491, 539, 541, 550], "1809": 526, "1810": 170, "1818": 560, "182": 560, "1842": 560, "18518": 135, "18529": 135, "187": 560, "1873": 560, "1879": 560, "1890": [493, 557], "1891": 560, "18x": 560, "19": [491, 499, 560], "192": [493, 557], "192795": 527, "193": 560, "195": 560, "196": 534, "1978": 196, "1983354538679123": [493, 557], "1988": 560, "199": 560, "1998": 560, "1_11_capabl": 502, "1b7": [480, 541, 557], "1e": [150, 417, 493, 557], "1e1": 429, "1s4c14ins1bsthroughput": 560, "1x": 560, "1x1": [543, 549], "1x2": [493, 557], "1xchannel": [196, 549], "2": [29, 30, 31, 39, 59, 90, 94, 140, 147, 149, 151, 153, 154, 176, 182, 183, 196, 211, 231, 233, 235, 246, 267, 282, 298, 312, 332, 360, 395, 400, 417, 437, 446, 448, 471, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 499, 500, 509, 526, 528, 535, 536, 538, 539, 540, 541, 542, 544, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559], "20": [226, 429, 549, 558, 560], "200": [225, 422, 443, 457, 482, 497, 559], "2000": 543, "2001": 210, "2011": 526, "2012": 212, "2017": 526, "2018": 526, "2019": 549, "2020": [135, 478, 546], "2021": 549, "2022": [196, 482, 493, 540, 549, 554, 557], "2023": [478, 482, 493, 499, 546, 549, 554, 557], "2024": [499, 560], "203": 560, "2043": 210, "2048": [3, 392, 422, 424, 443, 457, 471, 482, 554], "205": 560, "2059": 560, "206": 560, "207": [493, 557], "2070": 560, "2079": 560, "20b": 541, "20x": 560, "21": [235, 493, 541, 550, 557, 560], "210": 560, "21020": [493, 557], "211": 560, "2111": 549, "213": 560, "2132": 556, "214": 560, "2170": 560, "2172": 560, "218": 560, "219": 560, "21x": 560, "22": [539, 541, 560], "2202": 560, "2204": 188, "2205301336": 560, "2209": [482, 493, 554, 557], "2210": [424, 443, 482, 493, 554], "2211": [482, 493, 554, 557], "2220": [493, 557], "224": [196, 222, 499, 531, 533, 543, 558], "22444": [493, 557], "225": [222, 543], "2286": 560, "229": [222, 543], "22x": 560, "23": [154, 541, 560], "230": 560, "2301": 549, "2305": [482, 493, 554], "2306": [443, 482, 493, 554], "2309": [443, 482, 493], "2310": [478, 546], "2326": 560, "23f1": 560, "23ubuntu4": 560, "23x": 560, "24": [154, 488, 549, 559, 560], "24101": 549, "24116": 549, "242": 560, "2420": [493, 557], "2428": 560, "247": 560, "24x": 560, "25": [549, 560], "250": 549, "255": [493, 551, 557], "256": [217, 222, 443, 531, 543, 558], "2567": 560, "2570": [493, 557], "2578": 560, "25x": 560, "26": [541, 560], "26f1": 560, "26x": 560, "27": [534, 541, 560], "279": 560, "27x": 560, "28": [210, 211, 215, 560], "282": 560, "284": 560, "2847": 560, "28x": 560, "29": [541, 560], "294": 560, "2949": 560, "295": 560, "2970": [493, 557], "2991": [493, 557], "29x": 560, "2d": [55, 328, 493, 557], "2e5m2": 477, "2gb": [244, 391], "2x": [532, 538], "2x1": [549, 560], "2x2": [493, 557], "2xlarg": 560, "3": [29, 31, 133, 140, 153, 154, 183, 196, 212, 226, 231, 282, 386, 400, 417, 446, 471, 478, 479, 481, 482, 484, 486, 487, 488, 493, 494, 497, 499, 509, 526, 527, 528, 531, 533, 535, 536, 539, 542, 543, 544, 546, 547, 549, 550, 551, 554, 555, 556, 557, 558, 559], "30": [226, 532, 538, 558, 560], "300": 549, "305": 560, "3087": 560, "30b": [480, 541, 557], "30x": 560, "31": [30, 541, 560], "311": 560, "313": 560, "31x": 560, "32": [31, 172, 281, 417, 422, 433, 437, 443, 448, 457, 478, 479, 486, 487, 531, 537, 546, 554, 560], "322": 560, "3253": [493, 557], "3254": 560, "32accuraci": 560, "32x": 560, "33": [135, 478, 541, 546, 560], "334": 560, "33x": 560, "34": [499, 541, 560], "3424": 560, "346": 560, "348": 560, "34f1": 560, "35": [541, 549, 560], "350": 560, "350m": [480, 557], "354": [480, 557], "3542": [480, 557], "35x": 560, "36": 560, "360": 560, "36x": 560, "37": [541, 560], "3707": 560, "3725": 560, "3740": [493, 557], "3757": [480, 557], "379": [480, 557], "37x": 560, "38": 560, "3804": [480, 557], "381": [549, 560], "3815": [493, 557], "384": [226, 558, 560], "3845": [493, 557], "3850": [493, 557], "385297635664756e": [493, 557], "3852e": [493, 557], "386": 560, "387": 560, "3887": [480, 557], "38x": 560, "39": 560, "3911": [493, 557], "3924": [493, 557], "393": 560, "3930": [480, 557], "394": 560, "3947": [480, 557], "395": 560, "396": 560, "397": 560, "399": 560, "39x": 560, "3b": [480, 541, 557], "3d": [55, 328, 493, 550, 557], "3dgan": 550, "3f": 488, "3rd": [479, 493, 544, 550, 551, 553], "3x": 534, "4": [31, 39, 142, 145, 151, 154, 176, 185, 196, 219, 222, 226, 228, 229, 231, 281, 282, 312, 422, 433, 437, 443, 448, 457, 476, 478, 480, 481, 482, 483, 488, 493, 494, 495, 499, 500, 502, 525, 531, 532, 535, 538, 539, 542, 543, 546, 549, 551, 554, 557, 558, 559, 560], "40": [541, 560], "401": 560, "402": 560, "404": [549, 560], "405": 560, "4055": [493, 557], "406": [543, 560], "407": 560, "40b": 541, "41": 560, "411": 560, "4149": [480, 557], "4172": [480, 557], "4199": 560, "41x": 560, "42": [196, 422, 443, 482, 560], "420": 538, "42x": 560, "43": [541, 560], "431": 560, "434": 560, "43x": 560, "44": 560, "442": 560, "4469": 556, "44x": 560, "45": [497, 541, 560], "4516": [480, 557], "4533": [480, 557], "456": 543, "457": 560, "45x": 560, "46": [541, 560], "461": 560, "4634": [480, 557], "46x": 560, "47": [154, 488, 541, 560], "4734": [493, 557], "4741": [493, 557], "4743": [493, 557], "47x": 560, "48": [154, 493, 557, 560], "4800": 560, "4828": [480, 557], "483": 560, "484": 282, "485": [543, 560], "48x": 560, "49": [541, 560], "4906": [480, 557], "492": 560, "4936": [480, 557], "494": 560, "498": 560, "4980": [480, 557], "499": 560, "4f": 527, "4k": 494, "4th": [479, 493, 541, 550, 551], "4x": [185, 493, 551], "4x1": [176, 196, 543, 549, 560], "5": [139, 149, 153, 164, 196, 214, 222, 235, 263, 304, 417, 421, 443, 480, 482, 485, 493, 499, 500, 533, 535, 539, 542, 543, 549, 551, 554, 557, 558, 559, 560], "50": [233, 493, 501, 549, 557, 560], "5018": [480, 557], "5040": [493, 557], "5048": [480, 557], "505": 560, "5057": [480, 557], "50x": 560, "51": [541, 560], "512": [479, 482], "512gb": 560, "513": 560, "518": [480, 557], "5185": [480, 557], "52": 560, "520": 560, "526": 560, "529": 560, "52f1": 560, "52x": 560, "53": [541, 560], "530": 560, "5382": 560, "539": 560, "53x": 560, "54": 560, "541": 560, "5421": 560, "5436": [480, 557], "5443": [480, 557], "5444": [493, 557], "5494": 560, "54accuraci": 560, "54x": 560, "55": [541, 560], "5519": 560, "5523": 560, "5530": 560, "5540": 560, "5552": [480, 557], "5555": [493, 557], "556": 560, "558": 560, "5593": [480, 557], "55x": 560, "56": 560, "560m": [480, 557], "565": 560, "56be4db0acb8001400a502ec": 233, "56x": 560, "57": [493, 541, 557, 560], "5742": [480, 557], "576": 560, "5764": [480, 557], "5767": 560, "578": 560, "5789": [480, 557], "57x": 560, "58": [541, 560], "582": 560, "5826": [493, 557], "584": 560, "58x": 560, "59": [493, 541, 557, 560], "5972": [493, 557], "5977": [480, 557], "59f1": 560, "59x": 560, "5b": [480, 557], "5gb": 435, "5x": 550, "6": [196, 478, 480, 482, 485, 493, 535, 546, 551, 557, 559, 560], "60": 560, "600": 543, "602": 560, "6038": [493, 557], "6057": 560, "60x": 560, "61": [541, 560], "6113": 560, "6187": 560, "61accuraci": 560, "62": [541, 560], "6247": [480, 557], "626": 560, "6297": [480, 557], "62x": 560, "63": [541, 549, 560], "633": 560, "6354": 560, "6365": [480, 557], "637690492221736e": [493, 557], "6376e": [493, 557], "6392": [480, 557], "64": [226, 443, 448, 479, 487, 493, 541, 554, 557, 558, 560], "6404": [480, 557], "6426": 560, "6437": [480, 557], "6455": 560, "6481": [493, 557], "6499": [480, 557], "64x": 560, "65": 560, "6506": [493, 557], "6534": 560, "6542": [480, 557], "65421": 527, "655": [480, 557], "6569": [480, 557], "65b": [480, 557], "66": 560, "6621": [480, 557], "66b": [480, 557], "66x": 560, "67": [541, 560], "6718": [480, 557], "6735": [480, 557], "6739": 560, "6740": [480, 557], "6769": [480, 557], "67x": 560, "68": [541, 558, 560], "680": 560, "6804": [480, 557], "6814": [480, 557], "6821": [480, 493, 557], "6831": [480, 557], "6835": [493, 557], "6836": [493, 557], "6837": [493, 557], "6839": [493, 557], "684": 560, "6845": 560, "6848": [493, 557], "6866": [480, 557], "6872": [480, 557], "6883": [493, 557], "6895": [480, 557], "68x": 560, "69": 560, "6953": [480, 557], "6994": 557, "69x": 560, "6ap0": 560, "6b": [480, 541, 557], "6f": 531, "7": [29, 151, 154, 196, 246, 417, 429, 437, 480, 482, 485, 493, 502, 525, 534, 535, 543, 549, 551, 555, 557, 559, 560], "70": [541, 560], "702": 560, "7022": 560, "7025": 560, "7034": 560, "704": 560, "705": 560, "7058": 557, "707": 560, "708": 560, "70b": 541, "70x": 560, "71": [154, 541, 560], "711": 560, "7128": [480, 557], "714": 560, "7143": [480, 557], "7149": [480, 557], "715": 560, "7153": 560, "717": 560, "7174": [493, 557], "718": 560, "719": 560, "72": [154, 493, 541, 557, 560], "7221": [480, 557], "72x": 560, "73": [541, 560], "7323": 560, "7326": [480, 557], "7332": 557, "7335": 557, "7357": [480, 557], "7361": [480, 557], "7392": 557, "7398": [480, 557], "7399": 560, "73x": 560, "74": [541, 560], "7415": 560, "7440": [493, 557], "7442": 560, "7451": [493, 557], "749": 560, "7495": 556, "74x": 560, "75": [541, 549, 560], "754": 479, "755": 560, "7589": [493, 557], "7590": [480, 557], "75x": 560, "76": [541, 560], "7608": [493, 557], "7615": 557, "7627": [480, 557], "7632": 557, "7677": 557, "76x": 560, "77": [541, 560], "774m": [480, 557], "7759": [480, 557], "7772": [493, 557], "779": 560, "77x": 560, "78": [558, 560], "7840": [480, 557], "7895": 549, "79": [541, 560], "7908": [480, 557], "7957": [480, 557], "7965": 560, "798": 560, "799": 560, "79x": 560, "7b": [480, 489, 494, 499, 541, 557], "7b1": [480, 557], "8": [98, 140, 154, 196, 225, 400, 408, 417, 422, 437, 443, 448, 457, 476, 477, 478, 480, 482, 483, 493, 494, 497, 501, 526, 527, 535, 539, 546, 549, 550, 554, 557, 559, 560], "80": [534, 541, 552, 560], "800": [226, 558], "8001": [1, 458], "801": 549, "8018": 560, "8025": 560, "8044": 560, "805": 554, "8074": 560, "8084": 560, "80x": 560, "81": 560, "816": 560, "8178": 560, "81x": 560, "82": [541, 560], "8207": [493, 557], "8213": 560, "8235": 560, "8246": [493, 557], "8256": 560, "8259": 560, "8266": 556, "8291": 556, "8294": 556, "8298": [493, 557], "8299": 556, "83": [493, 556, 557, 560], "8314": 560, "8363": 560, "837": 560, "8371": 560, "8372": 556, "8382": 560, "83x": 560, "84": [493, 557, 560], "840": 560, "841": 560, "8411": 560, "844": 560, "8480": 560, "84x": 560, "85": [493, 556, 557, 560], "853": 560, "858": 560, "85x": 560, "86": [541, 560], "8626": 560, "8684": 560, "86x": 560, "87": [222, 541, 560], "875": [222, 558], "8763": [493, 557], "8768": [493, 557], "8782": 560, "87f1": 560, "88": [534, 556, 560], "8814": 560, "89": [493, 541, 557, 560], "893": 560, "8993": 560, "89x": 560, "8b": 494, "8ghz": 560, "8x1": 196, "9": [170, 196, 480, 488, 494, 497, 539, 543, 549, 557, 559, 560], "90": [196, 541, 552, 560], "901": 560, "9048": 560, "9091": 560, "90f1": 560, "90x": 560, "91": [493, 554, 557, 560], "914": 560, "92": [541, 560], "927": 560, "92x": 560, "93": [493, 557, 560], "9301": [493, 557], "9308": [493, 557], "9391": 560, "94": [558, 560], "9403": 560, "947": 560, "948": 560, "94x": 560, "95": [75, 154, 235, 542, 560], "9521": 560, "9522": 560, "9527": [267, 543], "95top1": 560, "96": [541, 560], "96x": 560, "97": [541, 543, 560], "98": [196, 543, 549, 560], "9860": [493, 557], "9867": 541, "98x": 560, "99": [3, 153, 304, 560], "9907": 541, "9911": 541, "9915": 541, "9928": 541, "9930": 541, "9933": 541, "9945": 541, "9955": 541, "9957": 541, "9972": 541, "9975": 541, "9976": 541, "9984": 541, "9986": 541, "9987": 541, "9988": 541, "9989": 541, "999": [3, 304], "9990": 541, "9991": 541, "9992": 541, "9994": 541, "9995": 541, "9997": 541, "99ccff": 559, "99x": 560, "A": [3, 40, 59, 60, 88, 101, 125, 126, 133, 138, 145, 152, 153, 159, 161, 163, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 212, 226, 228, 231, 232, 233, 235, 236, 240, 244, 267, 284, 287, 313, 332, 333, 386, 390, 391, 392, 401, 408, 410, 413, 416, 417, 419, 429, 431, 437, 447, 453, 454, 471, 480, 482, 483, 493, 496, 501, 527, 528, 532, 535, 541, 542, 543, 545, 549, 550, 551, 554, 557, 558, 559], "And": [55, 328, 486, 493, 496, 497, 525, 527, 543, 557], "As": [477, 482, 493, 497, 501, 528, 542, 543, 549, 554, 559], "At": [478, 496, 501, 546, 559], "Being": 495, "By": [140, 174, 196, 228, 400, 482, 489, 501, 502, 542, 545, 549, 550, 554, 559], "For": [29, 31, 145, 149, 153, 156, 160, 174, 175, 178, 179, 189, 196, 212, 226, 232, 233, 235, 236, 263, 417, 435, 437, 443, 471, 477, 480, 482, 483, 484, 485, 489, 493, 495, 497, 498, 500, 502, 530, 531, 533, 534, 535, 536, 538, 549, 553, 554, 557, 559, 560], "IT": [212, 219, 550], "If": [52, 53, 55, 59, 140, 151, 153, 156, 196, 199, 200, 212, 226, 236, 263, 282, 325, 326, 328, 332, 400, 417, 435, 437, 439, 446, 453, 454, 457, 477, 483, 486, 493, 494, 496, 497, 501, 525, 527, 528, 531, 534, 539, 540, 542, 543, 547, 549, 551, 554, 556, 557, 558, 559], "In": [163, 178, 179, 180, 185, 186, 187, 190, 196, 209, 231, 246, 453, 475, 482, 483, 486, 493, 494, 495, 497, 499, 500, 501, 528, 530, 531, 542, 543, 547, 548, 549, 551, 553, 554, 556, 557, 558, 559], "It": [39, 140, 159, 163, 167, 176, 199, 200, 233, 235, 236, 263, 268, 272, 312, 400, 437, 445, 454, 478, 481, 482, 483, 484, 486, 487, 493, 494, 500, 501, 502, 526, 534, 536, 543, 546, 549, 551, 554, 556, 559], "Its": [501, 526, 549], "NOT": [210, 535], "No": [417, 496, 527, 534, 543, 550], "Not": [278, 279, 392, 471, 477, 527], "ON": 553, "Of": 528, "On": [493, 551, 560], "One": [483, 502, 527, 531, 538, 549, 550, 559], "TO": 531, "The": [3, 21, 39, 59, 98, 104, 106, 125, 133, 140, 145, 146, 151, 152, 153, 155, 156, 158, 160, 161, 163, 164, 166, 170, 174, 176, 178, 179, 181, 182, 183, 188, 189, 190, 191, 192, 193, 196, 199, 200, 201, 210, 211, 212, 213, 214, 218, 219, 226, 228, 229, 230, 232, 233, 235, 236, 244, 246, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 279, 281, 282, 284, 285, 289, 293, 294, 295, 298, 299, 300, 302, 303, 306, 312, 332, 345, 362, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 400, 409, 410, 411, 412, 413, 414, 416, 417, 418, 420, 421, 422, 426, 427, 429, 430, 431, 435, 437, 439, 441, 442, 443, 445, 446, 447, 453, 454, 458, 460, 466, 467, 470, 471, 472, 475, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 493, 494, 495, 497, 500, 501, 502, 503, 505, 511, 514, 517, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560], "Their": 460, "Then": [231, 493, 501, 557, 559], "There": [100, 264, 266, 476, 481, 485, 493, 499, 527, 535, 538, 543, 554, 557, 559], "These": [501, 538], "To": [30, 231, 246, 393, 395, 451, 478, 479, 480, 481, 482, 485, 487, 488, 493, 496, 499, 501, 502, 527, 531, 544, 546, 549, 553, 554, 555, 557, 559], "Will": [128, 381, 446, 538], "With": [81, 246, 353, 486, 493, 497, 500, 502, 528, 539, 543, 547, 549, 550, 551, 556, 557, 559, 560], "_": [199, 200, 263, 479, 480, 482, 483, 486, 488, 493, 494, 497, 499, 500, 501, 526, 531, 533, 534, 535, 539, 543, 544, 545, 547, 549, 551, 554, 555, 556, 557, 559], "__all__": 527, "__call__": 219, "__class__": 246, "__getitem__": [208, 212, 226, 528, 543], "__init__": [435, 446, 500, 527, 528, 542, 559], "__iter__": [208, 212, 528, 543], "__len__": [208, 212], "__name__": 246, "__str__": 457, "__version__": [1, 138, 401, 527], "_configset": 153, "_description_": [442, 483], "_epoch_ran": 163, "_generate_dataload": [201, 388], "_inductor": [476, 481], "_lossandgradi": 527, "_propagate_qconfig_help": 145, "_quantiz": 464, "_quantizedconv": [76, 348], "_quantizeddeconv": [76, 348], "_quantizedfusedbatchnorm": [108, 364], "_quantizedmatmul": [78, 79, 350, 351], "_saved_model": [133, 386], "_type_": [145, 467], "_use_new_zipfile_seri": 171, "a100cuda": 560, "aarch64": 525, "ab": [30, 170, 188, 424, 437, 443, 486, 493, 549, 551, 557], "abbrevi": 196, "abc": [98, 233, 394, 500, 559], "abcadaptor": 500, "abctunestrategi": 559, "abil": [478, 500, 501, 535, 546, 557], "abl": [199, 200, 236, 263, 454, 486, 493, 551], "abound": 550, "about": [170, 192, 471, 475, 477, 495, 527, 528, 543, 549, 553, 559, 560], "abov": [39, 312, 480, 481, 482, 484, 493, 500, 501, 502, 549, 551, 557, 559], "absolut": [170, 196, 235, 417, 478, 493, 542, 543, 546, 549, 551, 559], "absorb": [145, 149, 417, 437, 482, 554], "absorb_layer_dict": [423, 443, 457], "absorb_pair": 31, "absorb_to_lay": [145, 417, 436, 437, 443], "absorbed_1": [145, 437], "absorpt": [145, 437], "abstract": [71, 163, 226, 344, 395, 500, 502, 537], "abus": 495, "ac": 267, "acc": [479, 484, 541, 549, 560], "acceler": [172, 443, 447, 451, 477, 479, 480, 482, 483, 485, 493, 494, 499, 539, 543, 549, 550, 553, 554, 557, 559], "accelerator_execution_tim": 252, "acceleratorregistri": 447, "accept": [196, 282, 487, 494, 495, 525, 527, 528, 554], "access": [52, 53, 55, 196, 325, 326, 328, 467, 471], "accommod": [501, 502], "accompani": [540, 559], "accord": [1, 107, 145, 151, 196, 210, 211, 212, 226, 270, 272, 393, 445, 453, 460, 477, 486, 487, 493, 500, 531, 549, 553, 557, 558, 559], "accordingli": 557, "account": [495, 556, 559], "accumul": [278, 478, 482, 546, 559], "accur": [29, 149, 417, 424, 443, 481, 482, 493, 549, 554, 557], "accuraci": [31, 151, 153, 193, 196, 199, 200, 235, 236, 246, 263, 268, 282, 454, 478, 480, 481, 482, 486, 487, 489, 497, 499, 501, 502, 526, 528, 530, 531, 532, 533, 536, 542, 543, 546, 547, 548, 549, 550, 554, 555, 556, 557, 560], "accuracy_criterion": [196, 246, 543, 547, 559], "accuracy_level": 31, "accuracycriterion": [196, 543, 559], "accuracyspars": 560, "achiev": [480, 481, 482, 483, 484, 487, 489, 493, 494, 533, 541, 543, 548, 549, 550, 551, 557, 559], "acq": 267, "acq_max": 267, "acquisit": 267, "across": [236, 393, 478, 487, 529, 536, 543, 546, 549, 552, 557, 559], "act": [193, 208, 388, 495], "act_algo": [417, 443, 481], "act_algorithm": 304, "act_bit": [422, 443], "act_dtyp": [300, 304, 443, 478, 480, 481, 484, 546], "act_dynam": [422, 443], "act_fn": 175, "act_granular": [300, 304, 443, 484], "act_group_s": [422, 443], "act_max_valu": [293, 294, 295, 298, 299], "act_maxabs_hw_weights_pcs_maxabs_pow2": 477, "act_maxabs_pow2_weights_pcs_opt_pow2": 477, "act_min_valu": [293, 294, 295, 298, 299], "act_ord": [443, 482], "act_sym": [300, 304, 422, 443, 481, 484, 486, 487], "action": 495, "activ": [16, 31, 126, 145, 167, 196, 279, 281, 287, 293, 294, 295, 299, 417, 421, 443, 476, 477, 480, 481, 482, 485, 486, 493, 500, 501, 502, 526, 530, 535, 543, 551, 554, 557], "activation_max": 471, "activation_min": 471, "activation_min_max": 471, "activationoper": 5, "activity_regular": [293, 294, 295, 299], "actord": [31, 482, 554], "actual": [235, 481, 531, 534], "ad": [187, 210, 228, 267, 476, 479, 482, 501, 502, 544, 549, 554], "adadelta": 531, "adam": 166, "adamw": 166, "adapt": [478, 495, 501, 546, 550], "adaptor": [163, 196, 281, 289, 290, 460, 475, 502, 538, 552, 553, 555, 557], "adaptor_registri": 500, "add": [30, 38, 49, 94, 104, 133, 166, 193, 196, 210, 212, 279, 311, 322, 360, 386, 471, 475, 480, 496, 497, 499, 502, 528, 531, 533, 535, 542, 543, 556, 557, 559], "add_origin_loss": [164, 196], "add_port_to_nam": 90, "add_qdq_pair_to_weight": [28, 196, 551], "add_relu": 533, "addit": [145, 196, 435, 454, 482, 501, 502, 554, 555, 559], "addition": [482, 502, 531, 549, 559], "addn": 535, "address": [212, 479, 482, 487, 495, 527, 544, 550], "addv2": [38, 54, 311, 327, 535], "adher": 496, "adjust": [493, 551, 557], "adopt": [493, 496, 549, 550, 557], "advanc": [135, 196, 478, 479, 482, 484, 486, 493, 495, 501, 506, 541, 546, 549, 551, 554], "advantag": [479, 549, 559], "afc": 233, "affect": [493, 557], "affin": [142, 433, 551], "aforement": 543, "after": [1, 63, 133, 145, 172, 176, 181, 183, 188, 196, 210, 222, 226, 268, 282, 336, 386, 410, 417, 451, 467, 471, 476, 477, 481, 482, 485, 493, 499, 501, 530, 533, 538, 542, 543, 547, 548, 549, 551, 553, 554, 556, 557, 558, 559], "ag": 495, "again": [212, 553], "against": [229, 410], "aggress": 559, "agnost": [157, 395, 483], "agnostic_mod": 231, "agre": 496, "ai": [475, 478, 479, 483, 499, 546, 550, 553], "aid": 529, "aim": [475, 487, 499, 536, 541, 549, 557, 559], "ajanthan": 549, "al": [135, 478, 482, 493, 499, 526, 539, 546, 554, 557], "albert": 560, "alemb": 534, "alexnet": 560, "algo": [156, 289, 290, 413, 445, 460], "algo_nam": [152, 306, 445, 527], "algorithm": [1, 31, 145, 152, 156, 196, 227, 228, 235, 291, 300, 302, 306, 392, 440, 441, 443, 445, 446, 449, 453, 460, 466, 482, 483, 486, 487, 489, 493, 499, 500, 501, 502, 527, 530, 535, 536, 538, 541, 549, 551], "algorithm_entri": [305, 444, 527], "algorithm_registri": 146, "algorithm_typ": 146, "algorithmschedul": 146, "algos_map": [392, 453], "alia": [468, 471], "alias": [471, 527], "alias_param": 471, "alibaba": [499, 550], "align": [226, 477, 495, 554, 558], "alignimagechannel": 558, "alignimagechanneltransform": 226, "alistarh": 549, "all": [1, 3, 21, 31, 48, 82, 140, 141, 145, 146, 148, 151, 152, 154, 157, 163, 166, 171, 176, 184, 193, 196, 201, 202, 208, 212, 219, 226, 228, 231, 233, 235, 237, 246, 275, 281, 283, 300, 303, 321, 354, 388, 390, 391, 392, 393, 394, 395, 400, 402, 417, 421, 424, 433, 442, 443, 446, 453, 460, 464, 471, 477, 480, 483, 486, 487, 489, 493, 494, 495, 496, 499, 500, 501, 502, 527, 528, 531, 535, 539, 543, 548, 549, 550, 551, 553, 554, 557, 558, 559], "all_block": 453, "all_par": [417, 437], "allbalanc": 560, "allenai": [232, 233], "allevi": 557, "alloc": 488, "allow": [145, 152, 267, 437, 479, 481, 482, 487, 531, 542, 543, 544, 549, 554, 557, 559], "allowlist": [443, 477], "along": [429, 430, 435, 482, 539, 549, 554], "alpha": [126, 139, 142, 149, 170, 190, 287, 304, 417, 421, 433, 443, 493, 527, 551, 559], "alpha_list": 278, "alpha_max": [417, 443, 557], "alpha_min": [417, 443, 557], "alpha_step": [417, 443, 557], "alreadi": [140, 151, 212, 225, 400, 479, 483, 500, 534, 538, 559], "also": [138, 175, 209, 212, 226, 228, 235, 246, 263, 395, 401, 477, 479, 482, 483, 484, 485, 493, 494, 496, 500, 501, 502, 528, 532, 536, 538, 542, 543, 547, 549, 550, 551, 553, 554, 557, 559], "altern": [140, 196, 263, 400], "although": [209, 556], "alwai": [153, 231, 235, 263, 477, 487, 542, 543, 554], "amax": [437, 478, 546], "amazon": 499, "amd": [499, 539, 560], "among": [235, 478, 493, 546, 557], "amount": [3, 417, 451, 485, 557], "amp": [1, 422, 554], "amp_cfg": 1, "amp_convert": 1, "amx": [479, 550], "an": [1, 52, 53, 55, 90, 126, 128, 133, 135, 138, 140, 145, 150, 162, 167, 181, 196, 204, 208, 212, 226, 227, 228, 232, 233, 236, 258, 262, 263, 282, 287, 325, 326, 328, 381, 386, 394, 400, 401, 413, 421, 437, 453, 454, 471, 473, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 493, 495, 497, 499, 500, 502, 526, 528, 529, 533, 541, 542, 543, 544, 546, 547, 549, 550, 551, 554, 556, 557, 558, 559], "anaconda": 539, "analysi": [478, 546, 549, 556], "analyt": [475, 539, 550], "analyz": [95, 174, 244, 361, 391, 556, 557], "andrew": 526, "ani": [135, 140, 156, 231, 233, 258, 262, 278, 282, 303, 393, 400, 426, 439, 445, 447, 457, 471, 483, 486, 495, 499, 502, 527, 531, 549, 556, 559], "anneal": 169, "anno_dir": 211, "anno_path": [235, 542], "annot": [211, 231, 282, 501, 502, 542, 549, 559], "anoth": [226, 228, 471, 558, 559], "answer": [226, 232, 233, 495, 549, 558, 560], "answer_start": 233, "answeringsquad": 560, "ao": 413, "ap": 542, "ap0": 560, "apach": [3, 540], "api": [55, 60, 95, 154, 231, 235, 263, 278, 279, 282, 291, 303, 304, 305, 306, 328, 333, 361, 390, 392, 393, 424, 440, 442, 443, 444, 445, 450, 471, 477, 480, 482, 487, 493, 497, 499, 503, 505, 511, 514, 517, 533, 534, 536, 538, 539, 543, 555, 556, 559, 561], "appear": [140, 400, 495], "append": [145, 267, 497, 530, 543, 548], "append_attr": 145, "appl": 559, "appli": [31, 98, 111, 112, 113, 116, 118, 122, 133, 142, 163, 185, 187, 229, 302, 306, 367, 368, 369, 372, 374, 378, 386, 393, 410, 417, 422, 433, 441, 445, 453, 475, 478, 481, 485, 486, 487, 493, 495, 501, 502, 543, 546, 548, 549, 551, 553, 556, 557, 559], "applianc": 550, "applic": [222, 435, 482, 484, 493, 502, 533, 550, 554, 557, 558], "apply_awq_clip": 31, "apply_awq_scal": 31, "apply_inlin": [133, 386], "apply_single_pattern_pair": 410, "apply_templ": 422, "appoint": 495, "approach": [196, 481, 482, 493, 497, 526, 538, 543, 549, 550, 552, 554, 559], "appropri": [447, 481, 487, 489, 493, 494, 495, 526, 557], "approv": 496, "approx": [482, 493, 554], "approxim": [228, 229, 482, 501, 542, 554], "appu": 482, "apr": [499, 550], "apt": [534, 539], "ar": [52, 53, 90, 140, 145, 154, 176, 181, 182, 183, 188, 196, 210, 226, 231, 235, 264, 266, 267, 281, 282, 325, 326, 393, 400, 410, 413, 417, 421, 451, 453, 460, 470, 471, 476, 477, 478, 479, 481, 482, 483, 485, 486, 489, 493, 494, 495, 496, 497, 500, 501, 527, 528, 530, 531, 532, 533, 535, 537, 538, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559], "arang": 557, "arbitrari": [140, 400, 483, 543, 548], "arc": 494, "arcfac": 560, "architectur": [151, 475, 479, 482, 489, 493, 494, 499, 525, 536, 543, 549, 550, 554], "arctic": 539, "are_shapes_equ": 90, "area": [226, 231, 478, 542, 546, 558], "arg": [1, 39, 90, 145, 154, 210, 211, 212, 267, 282, 312, 403, 424, 437, 441, 449, 453, 467, 468, 478, 483, 531, 543, 546, 549, 551, 554, 557, 558], "argmax": 16, "argmaxoper": 6, "argpars": 154, "argu": 527, "argument": [140, 154, 196, 282, 400, 410, 417, 435, 442, 445, 446, 483, 486, 487, 554], "ariel": 549, "arithmet": 535, "arm": [499, 538, 539, 560], "around": 90, "arr": [30, 392, 471], "arrai": [3, 30, 31, 133, 140, 226, 231, 400, 448, 471, 558], "arrang": [182, 183, 188, 211, 212, 215, 549], "art": 549, "articl": [232, 233], "arxiv": [170, 188, 424, 443, 478, 482, 493, 499, 526, 546, 549, 550, 554, 557], "as_text": 90, "ascii": [140, 400], "asd932_": 212, "ask": [499, 539], "aspect": [222, 226, 558], "asplo": 550, "assert_error": 90, "assertionerror": [171, 177, 184, 193, 236, 439, 453], "assign": [231, 471, 531, 559], "assist": [159, 555], "associ": [133, 140, 231, 400, 410], "assum": [225, 231, 500, 535], "asterisk": [480, 557], "asym": [29, 30, 31, 142, 145, 417, 433, 437, 502, 535, 554], "asymmetr": [417, 486, 502, 551, 554, 559], "atenc": 488, "atom": 540, "att": [232, 233], "attach": [493, 543, 557], "attack": 495, "attempt": 559, "attent": [16, 143, 172, 174, 185, 196, 210, 421, 449, 495, 549], "attention_ffn_nam": 185, "attention_mask": [210, 543], "attentionoper": 7, "attr": [90, 133, 174, 386], "attr1": 282, "attr2": 282, "attr5": 282, "attribut": [30, 68, 89, 90, 133, 145, 174, 185, 196, 341, 453, 471, 477, 500, 528, 535, 537, 543], "attribute1": 282, "attribute_to_kwarg": 30, "attributeerror": [138, 282, 401], "audio": 422, "aug": [499, 550], "augment": 2, "author": 540, "auto": [145, 152, 153, 172, 174, 196, 265, 271, 303, 417, 442, 443, 447, 451, 453, 471, 477, 480, 483, 490, 497, 499, 526, 536, 549, 551, 554], "auto_acceler": 452, "auto_alpha_arg": [304, 443, 557], "auto_clip": 457, "auto_config": 549, "auto_copi": 145, "auto_detect_acceler": 447, "auto_input_output": [133, 386], "auto_merg": 30, "auto_mixed_precis": 271, "auto_round": 422, "auto_scal": 457, "auto_slim": 173, "autoalpha": 417, "autogptq": 534, "autom": [550, 557], "automat": [172, 174, 175, 196, 212, 215, 222, 447, 453, 477, 483, 486, 488, 489, 497, 499, 525, 538, 543, 544, 548, 549, 551, 557, 558, 559], "automixedprecisiontunestrategi": 265, "automodelforcausallm": [141, 494, 536], "automodelforsequenceclassif": 543, "autonumb": [501, 502], "autoround": [432, 441, 443, 483, 493, 494, 499, 541], "autoround_arg": 482, "autoround_quantize_entri": 441, "autoroundconfig": [441, 443, 457, 482, 494], "autoroundquant": 422, "autotoken": [494, 543], "autotrack": [125, 133, 284, 386], "autotun": [484, 485, 486, 493, 507, 527], "autotunestrategi": 264, "aux": 1, "auxiliari": 465, "avail": [154, 189, 196, 240, 417, 451, 453, 479, 482, 483, 489, 499, 503, 505, 511, 514, 517, 527, 532, 534, 536, 538, 549, 559, 560], "averag": [31, 232, 233, 235, 482, 534, 542, 543, 554, 559], "averagepool": 23, "averagepooling2d": 298, "avg": 551, "avgpool": [114, 123, 298, 370, 379, 535], "avoid": [90, 140, 145, 210, 400, 417, 437, 449, 453, 488, 497, 527], "avx": 479, "avx512": [479, 493, 544, 551], "avx512_bf16": [479, 544], "avx512_core_amx_fp16": 479, "avx512_fp16": 479, "aw": [550, 560], "awai": 528, "awar": [31, 135, 163, 196, 270, 443, 454, 482, 483, 487, 500, 501, 502, 526, 530, 531, 533, 538, 548, 550, 554, 559], "awq": [31, 432, 437, 441, 443, 449, 483, 493, 494, 552, 554], "awq_arg": [482, 554], "awq_g32asym": 554, "awq_quant": 31, "awq_quantize_entri": 441, "awqconfig": [441, 443, 457, 482, 494], "awqquant": 423, "ax": [196, 408, 464], "axi": [30, 196, 429, 430], "azur": [496, 499, 550], "b": [30, 59, 154, 210, 332, 422, 471, 482, 493, 496, 526, 542, 549, 554, 557, 559], "b1": [59, 332], "b16": [36, 309], "b3": 560, "b_dataload": [151, 196, 525, 543], "b_filter": 1, "b_func": [151, 525], "back": [140, 145, 154, 226, 400, 453], "backbon": 556, "backend": [2, 28, 29, 149, 166, 196, 197, 198, 202, 203, 206, 210, 211, 213, 214, 215, 216, 217, 221, 223, 226, 236, 237, 238, 240, 273, 443, 457, 479, 482, 483, 497, 502, 531, 537, 538, 543, 544, 554, 558, 559], "backward": [454, 493, 530, 531, 543, 548, 549, 551, 555], "badri": 482, "baichuan": 541, "baichuan2": 541, "balanc": [218, 417, 478, 480, 482, 486, 493, 546, 554, 557], "ban": 495, "bandit": 496, "bandwidth": [479, 482, 493, 543, 544, 554], "bar": [30, 212, 550], "bare": [499, 534, 539], "bart": 560, "base": [1, 3, 21, 32, 71, 90, 101, 105, 107, 117, 129, 135, 138, 143, 145, 146, 152, 153, 154, 161, 163, 170, 177, 184, 190, 192, 196, 201, 204, 208, 210, 212, 219, 226, 235, 237, 244, 245, 246, 272, 275, 279, 290, 306, 344, 373, 382, 388, 391, 393, 394, 395, 396, 401, 413, 417, 421, 433, 443, 445, 447, 451, 453, 476, 477, 479, 480, 482, 483, 487, 489, 493, 494, 500, 501, 502, 507, 527, 530, 531, 535, 543, 544, 549, 550, 551, 554, 556, 557, 559, 560], "base_algorithm": 398, "base_config": [153, 155, 300, 302, 303, 304, 306, 442, 443, 445], "base_dir": 30, "base_model": 238, "base_tun": [155, 303, 442, 484, 486], "basecallback": 163, "baseconfig": [152, 153, 156, 300, 302, 303, 306, 442, 443, 445, 483, 486, 527], "basedataload": [201, 205, 207, 388], "basedatalod": [201, 388], "baselin": [460, 487, 556, 557], "baseline_model": [486, 487], "basemetr": [235, 263], "basemodel": [237, 302, 303, 306, 391, 486], "basepattern": [176, 178, 180], "baseprun": [181, 186, 188, 189], "basereg": 190, "basetransform": 226, "bash": 494, "basi": 549, "basic": [174, 176, 184, 196, 225, 271, 275, 278, 454, 478, 538, 543, 546, 556], "basicprun": [187, 189], "basictoken": 225, "basictunestrategi": 266, "batch": [1, 145, 201, 203, 204, 208, 209, 388, 422, 454, 482, 528, 530, 543, 548, 549, 551, 557, 558, 559, 560], "batch_decod": 494, "batch_idx": 531, "batch_sampl": [201, 203, 205, 388, 528], "batch_siz": [196, 201, 203, 205, 208, 209, 210, 211, 388, 422, 443, 457, 464, 482, 528, 531, 533, 537, 543, 551], "batchmatmul": [113, 369], "batchmatmulv2": [113, 369], "batchnorm": [20, 47, 52, 106, 320, 325, 497, 557], "batchnormalizationoper": 20, "batchsampl": [208, 388], "batchtospacend": [43, 316], "bayesian": [196, 271, 549], "bayesianoptim": 267, "bayesiantunestrategi": 267, "bbox": [231, 497, 542], "bboxes_labels_scor": 497, "beam": [228, 542], "becaus": [140, 180, 185, 226, 400, 485, 493, 497, 534, 551, 557, 558, 559], "becom": [482, 493, 500, 533, 549, 554], "been": [3, 140, 171, 177, 184, 228, 392, 400, 408, 416, 417, 421, 479, 482, 486, 493, 502, 527, 543, 544, 554, 557], "befor": [92, 94, 149, 176, 181, 183, 188, 189, 191, 196, 210, 289, 358, 360, 424, 435, 446, 451, 477, 482, 493, 494, 496, 502, 528, 530, 531, 534, 535, 543, 551, 554, 556, 559], "begin": [101, 182, 183, 188, 481, 527, 528, 530, 543, 549, 559], "behavior": [140, 400, 495, 500, 501, 502, 535, 545, 554, 559], "being": [135, 231, 502], "beit": 560, "belong": [212, 240, 551], "below": [40, 51, 59, 154, 196, 235, 263, 313, 324, 332, 475, 477, 478, 480, 482, 483, 486, 487, 493, 494, 496, 497, 499, 500, 501, 502, 528, 531, 536, 537, 542, 546, 547, 548, 549, 551, 554, 556, 557, 559], "benchmark": [155, 196, 227, 246, 471, 475, 494, 499, 506, 507, 536, 545, 559, 560], "benchmark_with_raw_cmd": 151, "benchmarkconf": 543, "benchmarkconfig": [151, 196, 525, 543], "benefici": 526, "benefit": [536, 548], "bert": [174, 196, 206, 209, 210, 226, 499, 542, 544, 549, 558, 560], "bert_dataset": 216, "bertattent": 174, "besid": [482, 493, 500, 554], "best": [163, 226, 272, 437, 482, 483, 484, 485, 487, 495, 527, 539, 547, 551, 554, 557, 558, 559], "best_clip_ratio": 437, "best_configur": 470, "best_model": [163, 470, 479, 484, 485, 486, 487, 554], "best_model_weight": 470, "best_scor": 163, "beta": [170, 429], "better": [81, 196, 199, 200, 236, 263, 353, 454, 479, 482, 493, 527, 530, 542, 544, 549, 550, 551, 554, 556, 557, 559], "between": [3, 29, 128, 150, 187, 196, 226, 232, 235, 258, 262, 381, 410, 417, 471, 477, 478, 482, 483, 486, 493, 497, 499, 500, 501, 502, 526, 538, 542, 543, 546, 551, 554, 555, 556, 557, 558, 559], "bf16": [31, 72, 134, 196, 279, 345, 403, 405, 410, 443, 477, 486, 500, 501, 535, 543, 553, 559, 560], "bf16_convert": [37, 136, 310], "bf16_op": [33, 35, 92, 307, 308, 358, 501, 553], "bf16convert": [35, 308, 553], "bf16modul": 134, "bf16modulewrapp": 134, "bf16wrapper": 553, "bfloat16": [30, 433, 443, 449, 479, 499, 544, 553], "bfloat16fp16": 477, "bi": [232, 233], "bia": [128, 196, 381, 407, 427, 433, 554], "bias_constraint": [293, 294, 295, 299], "bias_correct": [130, 383], "bias_initi": [293, 294, 295, 299], "bias_regular": [293, 294, 295, 299], "biasadd": [38, 44, 49, 51, 94, 311, 317, 322, 324, 360, 535], "biascorrect": [128, 381], "bibtex": 540, "bicub": [226, 558], "big": [135, 482, 554], "bigscienc": [480, 541, 557], "bilibili": 550, "bilinear": [222, 226, 558], "bilinearimagenet": 558, "bilinearimagenettransform": 222, "bilingu": 228, "billion": 549, "bilstm": 560, "bin": [3, 140, 141, 392, 400, 402, 471, 534], "binari": [8, 133, 235, 386, 534, 542, 555], "binary_op": 16, "binarydirect8bitoper": 8, "binaryoper": 8, "bind": [151, 489, 494], "bio": 560, "bit": [29, 31, 145, 196, 281, 417, 425, 430, 433, 437, 443, 448, 457, 476, 477, 478, 479, 482, 483, 493, 494, 502, 526, 530, 544, 546, 550, 551, 554, 557], "bit_pack": 452, "bita": [478, 546], "bitnami": 550, "bitpack": 428, "bitwidth": 476, "bk3": 3, "black": 559, "black_nod": 2, "blendcnn": 560, "bleu": [229, 234, 542, 549], "bleu_hook": 229, "bleu_scor": 229, "bleu_token": 228, "bleu_util": 234, "blob": [3, 135, 178, 179, 228, 229, 232, 233, 235, 263, 543], "blob_siz": 31, "block": [31, 143, 145, 170, 180, 183, 188, 193, 246, 282, 421, 437, 449, 453, 478, 482, 538, 546, 547, 549, 554, 559], "block_list": [145, 437, 449], "block_mask": [170, 184], "block_nam": 453, "block_num": [145, 437, 449], "block_pattern": [143, 421], "block_prefix": [145, 437, 449], "block_siz": [180, 408, 443, 482, 554], "block_wis": 452, "block_wise_calibr": 449, "blockfallbacktuningsampl": 278, "blocklist": [443, 477], "blockmaskcriterion": 170, "blocksiz": [31, 443, 457, 478, 546], "blockwis": 557, "blockwise_over_matmul_gemm_conv": 193, "blog": [443, 499, 550], "bloom": [480, 493, 499, 541, 549, 557], "bloomz": [480, 557], "blue": [482, 552], "bmm": [477, 482, 493, 554], "bn": 560, "bnb": [482, 554], "bnb_nf4": [443, 453], "bo": 196, "bodi": 495, "bool": [1, 29, 30, 31, 126, 133, 140, 144, 145, 153, 161, 176, 196, 210, 212, 222, 226, 229, 235, 278, 282, 287, 300, 304, 386, 400, 402, 410, 413, 416, 417, 422, 424, 427, 429, 430, 431, 435, 437, 443, 445, 451, 453, 457, 464, 467, 470, 471, 482, 483, 528, 542, 558], "bool_val": 90, "boolean": [1, 413], "boost": [479, 499, 544, 549, 550], "booster": 530, "border": 558, "both": [133, 196, 386, 447, 451, 481, 482, 484, 489, 493, 494, 495, 500, 530, 543, 549, 551, 554, 557, 559], "bottleneck": [482, 493, 554], "boudoukh": 549, "bound": [59, 151, 226, 231, 267, 332, 417, 542, 558], "boundari": [226, 558], "bowl": 233, "box": [226, 231, 235, 497, 542, 558, 559], "branch": [133, 386, 496], "brand": 540, "break": [94, 360, 531, 543], "breakthrough": [478, 546], "breviti": [228, 229, 542], "bridg": [500, 501, 538], "briefli": [493, 543, 557], "bright": 558, "bring": [493, 557], "broad": [475, 499, 538], "broadcast": [226, 531, 558], "broadcast_optimizer_st": 531, "broadcast_paramet": 531, "bronco": 233, "brought": [493, 545, 551], "buffer": [140, 400, 453, 457], "buffer_nam": 453, "buffer_tensor": 453, "bug": [496, 499], "build": [1, 29, 31, 100, 146, 147, 149, 150, 154, 239, 241, 243, 244, 245, 391, 417, 486, 494, 500, 501, 502, 539, 545, 550, 559], "build_captured_dataload": 417, "build_slave_faker_model": 281, "build_torch_model": 479, "built": [60, 166, 185, 197, 198, 202, 206, 210, 211, 216, 218, 220, 221, 222, 223, 226, 235, 238, 246, 263, 302, 306, 333, 454, 486, 487, 500, 531, 543, 547, 551, 556, 558, 559], "builtin": [140, 400, 531], "busi": 550, "button": [496, 538], "bypass_reshap": [52, 53, 325, 326], "byte": [140, 400, 417], "byte_arrai": [140, 400], "bytes_or_buff": 457, "bytesio": [140, 400], "c": [3, 59, 154, 212, 332, 471, 482, 488, 493, 534, 554, 559], "c1": [59, 332], "c1c2": [59, 332], "c2": [59, 332], "c6a": 560, "c6g": 560, "c6i": 560, "c_": [482, 554], "c_out": 482, "cach": [210, 482, 493, 499, 534, 551, 554], "cache_dir": [141, 453], "cache_kl": 1, "cache_minmax": 1, "caffenet": 560, "cal_scal": 417, "calcul": [30, 45, 145, 153, 170, 178, 193, 196, 213, 214, 232, 233, 272, 318, 388, 417, 429, 458, 471, 477, 480, 482, 486, 493, 526, 542, 543, 547, 549, 551, 554, 556, 557, 559], "calculate_md5": 212, "calculate_ms": 471, "calculate_quant_min_max": 145, "calculate_scale_zp": 30, "calib": [145, 293, 294, 295, 298, 299, 501], "calib_cfg": 1, "calib_data": [1, 139], "calib_dataload": [263, 285, 302, 303, 306, 484, 485, 486, 487, 497, 528, 537, 542, 543, 551, 552, 553, 554], "calib_func": [33, 145, 263, 285, 302, 303, 306, 307, 437, 477, 486, 553], "calib_iter": [285, 289, 302, 303, 306, 486, 501], "calib_method": 3, "calib_model": 1, "calib_num": 417, "calib_registri": 3, "calib_tensor": 1, "calibcollector": 1, "calibdata": 1, "calibr": [1, 4, 31, 34, 74, 75, 125, 145, 151, 196, 199, 200, 263, 286, 302, 306, 347, 416, 417, 422, 442, 445, 449, 466, 475, 477, 481, 482, 483, 486, 493, 499, 500, 502, 534, 537, 538, 549, 551, 554, 559], "calibration_data": [84, 92, 358], "calibration_sampling_s": [196, 543], "calibratorbas": 3, "call": [1, 29, 140, 146, 161, 174, 182, 183, 188, 231, 400, 417, 451, 486, 489, 493, 494, 497, 500, 528, 537, 549, 551, 557, 558], "call_count": 161, "call_on": 151, "callabl": [140, 153, 196, 233, 285, 302, 303, 306, 400, 416, 441, 442, 443, 445, 447, 453, 454, 483, 486, 527, 528], "callback": [454, 460, 497, 543, 548, 549, 551], "callbacks_list": 454, "camembert": 560, "can": [29, 30, 31, 128, 135, 140, 150, 174, 175, 176, 181, 189, 191, 196, 199, 200, 209, 212, 226, 231, 233, 235, 236, 246, 263, 381, 395, 400, 417, 445, 454, 471, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 493, 494, 497, 499, 500, 501, 502, 525, 527, 528, 530, 531, 533, 535, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 559, 560], "can_pack_with_numba": 451, "candid": 410, "cannot": [231, 482, 497, 527, 534, 554], "cap": 499, "cap_s8_1_11": 502, "cap_s8_1_11_conv1d": 502, "capabl": [1, 32, 279, 290, 477, 479, 482, 493, 494, 501, 502, 525, 535, 543, 544, 549, 551, 559], "capac": [482, 493, 554, 556], "captur": [392, 417, 471, 481, 482], "captureddataload": 417, "captureoutputtofil": [392, 471], "card": [482, 549], "carri": [416, 417, 549], "cascad": 539, "case": [30, 55, 59, 140, 151, 154, 196, 209, 225, 226, 246, 328, 332, 400, 446, 447, 475, 482, 483, 486, 493, 502, 527, 528, 530, 531, 535, 537, 542, 547, 549, 550, 551, 554, 555, 557, 558, 560], "cast": [30, 36, 309, 553, 558], "cast_tensor": 30, "castonnxtransform": 226, "castpytorchtransform": 226, "casttftransform": 226, "cat": [497, 533], "categor": 542, "categori": [212, 230, 525], "category_id_set": 231, "caus": [193, 482, 493, 501, 528, 549, 554], "causal": [435, 446, 549], "cce5ff": 559, "cd": [531, 539], "cdot": [493, 557], "ce": [164, 196, 543], "center": [226, 498, 499, 539, 558, 559], "centercrop": 558, "centercroptftransform": 226, "centercroptransform": 226, "cento": 539, "central_fract": [222, 558], "cern": 550, "certain": [140, 195, 400, 487, 556], "certif": 496, "cfg": [56, 57, 145, 279, 329, 330, 416, 417, 421, 460, 501, 502], "cfg_filter": 460, "cfg_from_fil": 471, "cfg_preprocess": 460, "cfg_to_qconfig": [417, 421], "challeng": [478, 482, 546, 552], "chang": [29, 81, 128, 150, 182, 183, 185, 186, 188, 191, 196, 270, 353, 381, 417, 445, 471, 483, 496, 501, 528, 531, 534, 540, 543, 549, 558, 559], "channel": [29, 30, 31, 128, 149, 150, 172, 175, 180, 196, 222, 226, 381, 417, 437, 467, 477, 478, 480, 482, 499, 500, 502, 538, 539, 546, 549, 554, 558, 560], "channel_axi": [98, 147, 150], "channels_last": 222, "channelx1": [196, 549], "chapter": 501, "characterist": 495, "chart": [493, 551, 556], "chat": [422, 480, 489, 494, 541, 557], "chatbot": [478, 546, 550], "chatglm2": 541, "chatglm3": 541, "check": [1, 31, 52, 53, 90, 133, 145, 193, 202, 212, 325, 326, 386, 392, 410, 417, 421, 431, 445, 451, 462, 470, 471, 486, 488, 499, 531, 539, 555], "check_cfg_and_qconfig": [145, 417, 421], "check_config": 193, "check_dataload": 202, "check_integr": 212, "check_key_exist": 471, "check_key_valid": 193, "check_model": 462, "check_mx_vers": 1, "checknumer": [65, 338], "checkout": 496, "checkpoint": [140, 244, 391, 400, 435, 446, 470, 545], "checkpoint_dir": [435, 446, 470], "checkpoint_sess": [244, 391], "checksum": 212, "chees": 527, "cheeseshopaddress": 527, "chen": 540, "cheng": [482, 493], "child": [59, 141, 332, 402, 424], "children": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 26, 141, 402], "chines": 550, "choic": [210, 482, 486, 493, 500, 542, 557], "choleski": 534, "choos": [212, 437, 467, 483, 493, 538, 550, 555, 557, 559], "chosen": [477, 501, 526], "chunk": [226, 558], "chunk_siz": 212, "ci": 496, "cifar": [212, 560], "cifar10": 212, "cifar100": 212, "circumst": 495, "ckpt": [133, 236, 244, 263, 386, 391, 560], "cl": [141, 146, 161, 164, 166, 176, 181, 189, 190, 191, 212, 219, 226, 235, 246, 275, 392, 453, 471, 527], "claim": 540, "clamp_": [493, 557], "clarifi": 495, "class": [101, 138, 145, 171, 177, 184, 216, 236, 263, 286, 288, 292, 306, 401, 404, 453, 482, 483, 484, 486, 487, 497, 501, 527, 528, 542, 543, 547, 548, 551, 555, 559], "class_1": 212, "class_n": 212, "classdef": 559, "classic": [483, 559], "classif": [189, 210, 226, 235, 533, 542, 549, 550], "classifi": [174, 193, 210, 235], "classificationmnli": 560, "classificationmrpc": 560, "classificationqnli": 560, "classificationqqp": 560, "classificationsst": 560, "classifierheadsearch": 174, "classifierheadsearchertf": 174, "classregist": 281, "clean": [225, 402, 543], "clean_module_weight": 402, "clean_weight": 402, "clear": [208, 500, 535, 542, 543], "click": [499, 538, 539, 550], "client": [161, 499], "clip": [31, 417, 437, 482, 493, 554, 557], "clip_grad_norm_": 543, "clm": 549, "clone": [496, 539], "close": [128, 150, 381, 526], "cloud": [478, 496, 499, 546, 550], "cluster": 559, "cmd": [151, 539], "cnn": 560, "cnt": 543, "co": 549, "coarsest": [493, 557], "coco": [211, 218, 231, 235, 542, 549], "coco_dataset": 216, "coco_filt": 220, "coco_label_map": 234, "coco_tool": 234, "cocoev": 231, "cocoevalwrapp": 231, "cocomap": 542, "cocomapv2": [235, 542], "coconpi": 211, "cocoraw": 211, "cocorecorddataset": 211, "cocowrapp": 231, "code": [140, 174, 199, 200, 263, 400, 443, 454, 475, 479, 482, 484, 494, 497, 499, 500, 501, 502, 530, 531, 537, 538, 540, 542, 547, 548, 549, 550, 551, 556, 557, 558], "codebert": 560, "codec": [140, 400], "codenam": [479, 541, 544], "coder": [538, 550], "coeff": 190, "coeffici": [40, 190, 313, 549], "cola": [210, 542, 560], "collabor": [496, 499], "collat": [133, 145, 386], "collate_fn": [201, 203, 204, 205, 388, 528], "collate_pr": 30, "collate_result": 145, "collate_tf_pr": [133, 386], "collate_torch_pr": 145, "collctor": 3, "collect": [1, 3, 30, 145, 153, 154, 224, 226, 233, 235, 392, 407, 416, 417, 420, 423, 425, 434, 458, 471, 486, 493, 501, 551, 559], "collect_layer_histogram": 465, "collect_layer_input": 193, "collect_weight_info": 145, "collector": [1, 135, 458], "collectorbas": 1, "collecttransform": 226, "color": [482, 549, 552], "colorjitt": 558, "column": [471, 482, 493, 554, 557], "column_map": 471, "columnwis": [50, 323], "com": [3, 135, 178, 179, 189, 210, 228, 229, 232, 233, 235, 263, 443, 495, 527, 539, 540, 543, 555, 556, 560], "comb": 530, "combin": [1, 145, 196, 199, 200, 222, 236, 263, 392, 421, 454, 471, 482, 485, 497, 499, 500, 538, 543, 548, 550, 551, 553, 554, 558, 559], "combine_cap": 1, "combine_histogram": [392, 471], "come": [140, 400, 478, 541, 546, 559], "comma": [422, 453], "command": [151, 154, 454, 488, 489, 531], "command_prefix": 154, "comment": [138, 401, 482, 488, 495, 501, 542, 543, 554, 558], "commentsbalancedor": 560, "commit": [483, 486, 495, 496], "common": [124, 138, 140, 196, 224, 227, 300, 302, 303, 304, 306, 380, 400, 401, 441, 442, 443, 445, 453, 460, 480, 484, 485, 486, 495, 527, 530, 531, 533, 536, 537, 539, 543, 551, 557], "commonli": 549, "commun": 495, "comoress": 467, "compact": [543, 549], "compar": [135, 235, 471, 478, 481, 482, 487, 493, 530, 542, 546, 549, 551, 554, 556, 559], "compare_kei": 471, "compare_label": [235, 263, 542], "compare_object": 471, "compare_weight": 135, "comparison": [471, 554, 555], "compat": [133, 244, 386, 391, 395, 496, 531, 545, 549, 555], "compatible_format": [138, 401], "compil": [228, 476, 481, 494, 543], "complaint": 495, "complement": [479, 549], "complet": [279, 453, 477, 500, 501, 534, 549, 551, 559, 560], "complex": [156, 479, 527, 543, 544, 549], "complex_attr": 156, "complextfmap": 527, "compli": 559, "compon": [163, 285, 487, 497, 527, 531, 539, 540, 548, 549], "compos": [152, 226, 460, 558], "composableconfig": [152, 527], "composetransform": 226, "comprehens": [475, 483, 486, 543], "compress": [162, 227, 246, 424, 443, 454, 467, 473, 475, 477, 480, 482, 483, 485, 487, 493, 494, 499, 506, 536, 538, 543, 547, 548, 549, 550, 551, 557, 560], "compress_bit": 448, "compressed_model": 554, "compression_dim": [433, 467, 554], "compression_dtyp": [433, 467, 554], "compression_manag": [196, 454, 497, 530, 543, 548, 549, 551], "compressionmanag": 454, "compressor": [1, 151, 154, 162, 163, 166, 178, 179, 189, 196, 222, 223, 226, 227, 234, 235, 236, 240, 247, 263, 271, 277, 291, 303, 304, 305, 306, 390, 393, 398, 440, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 455, 457, 461, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 493, 494, 496, 500, 501, 502, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 557, 558, 559, 560], "comput": [30, 31, 90, 135, 145, 228, 229, 232, 233, 235, 417, 421, 429, 454, 471, 477, 478, 479, 481, 482, 493, 526, 528, 530, 533, 542, 543, 544, 546, 549, 550, 551, 554, 557, 559], "compute_bleu": 229, "compute_const_folding_using_tf": 90, "compute_dtyp": 457, "compute_error": 135, "compute_spars": 471, "computemetr": 231, "concat": [16, 132, 385], "concat_gener": 226, "concaten": 417, "concatoper": 9, "concatv2": [109, 119, 132, 365, 375, 385, 535], "concept": [475, 537, 556], "concret": [133, 386, 391, 559], "conda": [534, 555], "condit": [70, 153, 210, 211, 212, 226, 264, 266, 343, 487, 540, 558, 559], "conduct": [475, 497, 543, 559], "conf": [146, 151, 163, 196, 199, 200, 236, 246, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 279, 282, 454, 497, 502, 525, 537, 543, 544, 545, 548, 551, 552, 553, 554, 556, 557, 559], "confer": [135, 493, 549, 557], "confid": 145, "confidence_batch": [145, 559], "confidenti": 495, "config": [1, 31, 100, 101, 103, 107, 145, 151, 152, 153, 156, 160, 161, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 199, 200, 210, 227, 236, 258, 262, 279, 280, 281, 282, 285, 289, 290, 301, 302, 303, 305, 306, 390, 410, 413, 416, 417, 421, 428, 431, 435, 442, 444, 445, 453, 454, 457, 460, 470, 471, 476, 477, 479, 481, 482, 483, 484, 501, 502, 506, 507, 525, 527, 528, 530, 531, 533, 538, 542, 543, 544, 545, 548, 549, 551, 553, 554, 556, 559], "config1": 153, "config2": 153, "config_file_path": 189, "config_inst": 151, "config_list": [152, 153], "config_map": [160, 431], "config_name_map": 160, "config_quantizable_lay": 103, "config_set": [153, 479, 484, 485, 486, 487], "config_sourc": 153, "configload": 153, "configmappingtyp": 431, "configproto": 262, "configregistri": [152, 160], "configs_map": [306, 403, 441, 445], "configset": 153, "configur": [1, 103, 134, 145, 151, 152, 153, 154, 161, 193, 196, 199, 200, 202, 212, 215, 235, 236, 246, 263, 272, 281, 302, 306, 395, 410, 412, 413, 415, 417, 421, 426, 431, 441, 443, 445, 451, 453, 454, 459, 460, 464, 469, 470, 483, 487, 489, 494, 497, 500, 501, 543, 547, 549, 551, 554, 555, 557, 558, 559, 560], "confirm": 501, "conflict": [90, 527, 534], "connect": [170, 549, 556], "consecut": [172, 174, 175, 549], "conserv": [196, 271], "conservativetunestrategi": 268, "consid": [31, 133, 235, 386, 495, 526, 527, 559], "consider": [485, 557], "consist": [41, 48, 314, 321, 482, 496, 497, 527, 557, 559], "consolid": 539, "const": [41, 42, 48, 49, 52, 53, 55, 67, 83, 314, 315, 321, 322, 325, 326, 328, 340, 355], "const_node_valu": 90, "constant": [90, 158, 267, 277, 389, 452, 464, 465, 527, 528, 535, 558], "constant_valu": 226, "constfold": 535, "constrain": 552, "constraint": [196, 543, 549, 556, 559], "construct": [140, 210, 213, 214, 217, 224, 235, 240, 244, 281, 388, 390, 391, 400, 460, 487, 495, 501, 502, 531, 549, 559], "construct_function_from_graph_def": [133, 386], "consum": [487, 528], "consumpt": [478, 482, 493, 546, 557], "contact": [495, 555, 556], "contain": [1, 52, 53, 55, 59, 124, 133, 135, 140, 145, 151, 163, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 196, 199, 200, 210, 211, 212, 231, 232, 233, 236, 263, 325, 326, 328, 332, 380, 386, 395, 400, 410, 413, 416, 417, 421, 429, 433, 453, 454, 460, 464, 470, 475, 482, 486, 499, 526, 534, 538, 542, 549, 554, 559], "content": 494, "content_fold": 217, "context": [1, 471, 482, 493, 554], "contextu": 549, "contigu": 145, "continu": [179, 231, 482, 541, 543, 549], "contract": [43, 316], "contrast": [176, 558], "contrib": [3, 227], "contribut": [495, 499, 549], "control": [146, 196, 497, 543, 549, 559], "conv": [16, 43, 47, 51, 56, 57, 58, 77, 94, 149, 196, 316, 320, 324, 329, 330, 331, 349, 360, 497, 501, 502, 543, 549, 551, 559], "conv1": [196, 484, 551], "conv1d": [195, 483, 502], "conv1d_relu": 533, "conv2d": [38, 44, 45, 46, 50, 51, 56, 110, 120, 128, 295, 296, 299, 304, 311, 317, 318, 319, 323, 324, 329, 366, 376, 381, 417, 477, 501, 502, 533, 535, 557, 559], "conv2d_config": 484, "conv2d_relu": 533, "conv2dbackpropinput": [111, 367], "conv3d": [56, 110, 329, 366], "conv3dbackpropinputv2": [111, 367], "conveni": [483, 543], "convent": [212, 231, 478, 496, 546], "convers": [39, 40, 196, 312, 313, 410, 479, 480, 493, 494, 496, 500, 501, 543, 544, 551, 553, 557], "convert": [1, 30, 33, 34, 35, 38, 39, 40, 41, 42, 51, 59, 71, 84, 85, 87, 88, 89, 90, 116, 121, 125, 127, 134, 145, 174, 196, 210, 222, 225, 226, 231, 279, 282, 284, 289, 290, 307, 308, 311, 312, 313, 314, 315, 324, 332, 344, 356, 372, 377, 393, 395, 403, 410, 441, 445, 453, 455, 463, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 489, 493, 497, 499, 501, 536, 543, 544, 551, 553, 554, 557, 558, 559], "convert_add_to_biasadd": [61, 334], "convert_bf16": 501, "convert_by_vocab": 225, "convert_examples_to_featur": [210, 226], "convert_layout": [61, 334], "convert_leakyrelu": [61, 334], "convert_nan_to_random": [61, 334], "convert_placeholder_to_const": [61, 334], "convert_tensorflow_tensor_to_onnx": 90, "convert_to_unicod": 225, "convertaddtobiasaddoptim": [38, 311], "converted_model": [196, 236, 543, 544], "convertlayoutoptim": [39, 312], "convertleakyreluoptim": [40, 313], "convertnantorandom": [41, 314], "convertplaceholdertoconst": [42, 315], "convolut": 550, "convoper": 10, "cooper": [479, 539, 544, 550], "coordin": [226, 267, 558, 559], "copi": [196, 471, 528], "copyreg": [138, 401], "copyright": [496, 540], "core": [151, 154, 196, 286, 411, 428, 482, 488, 489, 494, 496, 499, 525, 539, 540, 560], "core_id": 151, "core_list": [151, 154], "core_list_per_inst": 154, "cores_per_inst": [151, 196, 525, 543], "corner": [226, 496, 500, 502, 558], "corpor": 540, "correct": [128, 150, 193, 196, 231, 232, 233, 235, 381, 495], "correctli": 451, "correspond": [3, 135, 174, 185, 196, 210, 228, 231, 235, 416, 417, 421, 431, 460, 471, 477, 483, 493, 500, 535, 543, 549, 551, 556, 559], "cost": [477, 478, 482, 493, 546, 551, 554], "could": [140, 149, 176, 199, 200, 212, 236, 263, 400, 417, 454, 475, 479, 481, 482, 484, 486, 493, 495, 497, 530, 534, 543, 548, 549, 551, 554, 557], "count": [1, 482, 493, 554], "counter": 90, "coupl": 209, "cover": [496, 533, 537, 550], "coverag": 496, "cowork": [435, 446], "cpu": [76, 77, 78, 79, 139, 140, 145, 154, 161, 196, 348, 349, 350, 351, 392, 400, 402, 405, 417, 424, 433, 435, 437, 446, 447, 451, 453, 467, 471, 479, 481, 483, 486, 488, 501, 525, 526, 538, 543, 544, 550, 551, 552, 553, 554], "cpu_acceler": 447, "cpu_execution_tim": 252, "cpu_index": 154, "cpu_rang": 154, "cpuexecutionprovid": [2, 28, 29, 31, 544, 551], "cpufreq": 527, "cpuinfo": [161, 392, 471], "craft": [478, 546], "crbug": 527, "creat": [1, 3, 90, 138, 156, 196, 201, 210, 212, 231, 258, 262, 279, 281, 282, 388, 394, 401, 410, 413, 457, 460, 475, 477, 493, 495, 500, 545, 549, 551, 556, 559], "create_data_exampl": 1, "create_dataload": 460, "create_dataset": 460, "create_eval_func": 460, "create_obj_from_config": 465, "create_onnx_config": 258, "create_quant_spec_from_config": 413, "create_tf_config": 262, "create_train_func": 460, "create_xiq_quantizer_from_pt2e_config": 413, "criteria": [171, 196, 487, 497, 557], "criterion": [135, 163, 165, 166, 170, 176, 181, 182, 183, 185, 188, 192, 196, 530, 543, 549, 551, 557, 559], "criterion_class": [170, 192], "criterion_conf": 196, "criterion_registri": 164, "criterion_typ": 164, "critet": 164, "critic": [185, 424, 486, 495], "crop": [222, 226, 558], "crop_pad": 226, "crop_ratio": 217, "cropres": 558, "cropresizetftransform": 226, "cropresizetransform": 226, "croptoboundingbox": [226, 558], "cross": [166, 235, 488, 537, 559], "cross_memori": 488, "crossentropyloss": [164, 196, 543], "crowd": 231, "crucial": [481, 549], "cs412": 3, "cse": [59, 83, 332, 355], "csv": 471, "ctx": 1, "cube": [196, 549], "cuda": [140, 193, 400, 417, 429, 447, 453, 483, 544, 549, 551], "cuda_acceler": 447, "cudaexecutionprovid": [544, 551], "current": [1, 55, 89, 154, 170, 171, 174, 177, 181, 184, 196, 267, 273, 328, 417, 437, 446, 451, 453, 471, 481, 482, 483, 487, 497, 499, 500, 502, 526, 527, 531, 535, 536, 543, 547, 549, 551, 554, 557, 559], "current_pattern": 174, "current_sparsity_ratio": 181, "curv": 542, "custom": [100, 138, 145, 151, 235, 246, 293, 294, 295, 296, 298, 299, 401, 437, 470, 477, 483, 487, 493, 499, 525, 530, 549, 550, 554, 556], "custom_metr": 537, "custom_tune_config": [479, 484, 485, 486, 487], "customis": [528, 542], "customized_msg": [161, 392, 471], "cv": [196, 477, 481, 483, 486, 549], "cv2": 222, "cvf": [493, 557], "d": [59, 145, 332, 421, 537, 549], "d1": [59, 332, 471], "d18": 560, "d2": 471, "d_": 196, "d_conf": [196, 530, 543, 548], "d_shape": 394, "dai": 559, "damp_perc": 457, "dampen": [31, 534], "darvish": [478, 546], "data": [1, 29, 30, 31, 41, 90, 125, 133, 135, 140, 145, 149, 161, 174, 196, 199, 200, 227, 236, 257, 261, 263, 267, 279, 281, 284, 302, 306, 314, 386, 389, 392, 400, 407, 408, 413, 417, 422, 437, 449, 453, 454, 457, 460, 464, 471, 475, 476, 477, 478, 479, 481, 482, 483, 486, 493, 499, 500, 526, 528, 531, 535, 539, 542, 543, 544, 546, 551, 553, 554, 555, 556, 557, 558, 559], "data_dir": 210, "data_format": [212, 222, 293, 295, 298, 299], "data_it": [1, 174], "data_load": [33, 34, 307, 500], "data_path": 215, "data_sourc": [208, 460], "data_typ": [281, 422], "data_x": 1, "databas": 212, "databrick": [480, 541, 557], "datafunc": 212, "dataiterload": 1, "dataload": [1, 2, 29, 31, 125, 126, 135, 145, 151, 171, 172, 174, 189, 193, 199, 200, 210, 221, 257, 261, 263, 284, 287, 388, 417, 422, 424, 437, 449, 454, 460, 475, 486, 497, 500, 501, 530, 531, 537, 543, 544, 548, 549, 551, 552, 553, 554, 557, 558], "dataloader_cfg": 460, "dataloaderwrap": 1, "datalod": 417, "dataset": [125, 126, 145, 189, 199, 200, 201, 203, 204, 205, 207, 208, 209, 221, 231, 232, 233, 235, 236, 263, 284, 287, 388, 422, 454, 457, 460, 480, 482, 484, 485, 486, 493, 500, 501, 528, 531, 542, 543, 549, 551, 554, 555, 557, 559, 560], "dataset_format": 212, "dataset_nam": 422, "dataset_registri": 212, "dataset_typ": 212, "datatyp": [90, 145, 553, 559, 560], "date": [482, 554], "datetim": 196, "dbox": 497, "dco": 496, "ddr5": 560, "deal": 454, "deberta": 560, "debug": [282, 468, 559], "debug_stripp": 535, "dec": 550, "decid": [101, 196, 229, 486, 488, 500, 501, 543, 551, 555, 559], "decim": 471, "decis": [527, 542], "declar": 527, "decod": [140, 222, 228, 400, 457, 542, 558], "decode_singl": 497, "decodeimag": 558, "decompos": [52, 53, 325, 326], "decor": [3, 21, 52, 53, 55, 133, 146, 152, 161, 166, 176, 181, 189, 191, 226, 235, 246, 275, 325, 326, 328, 392, 394, 417, 451, 453, 471, 497, 500, 559], "decorator_metr": 235, "decreas": [83, 355, 549], "dedic": 196, "dedicated_qdq_pair": [28, 196, 551], "deem": 495, "deep": [392, 471, 475, 478, 479, 483, 486, 493, 499, 500, 501, 528, 538, 539, 543, 544, 546, 550, 551, 559], "deep_get": [246, 392, 471], "deep_set": [246, 471], "deepcopi": 196, "deepen": 550, "deepst": 196, "def": [52, 53, 55, 153, 199, 200, 263, 282, 325, 326, 328, 392, 453, 454, 479, 480, 483, 484, 486, 487, 493, 497, 500, 527, 528, 530, 531, 542, 543, 551, 557, 559], "default": [3, 31, 82, 133, 140, 145, 152, 156, 161, 193, 196, 199, 200, 203, 210, 211, 212, 222, 226, 228, 235, 244, 281, 300, 304, 354, 386, 391, 392, 395, 400, 402, 412, 413, 416, 417, 422, 429, 435, 437, 439, 441, 442, 443, 445, 446, 453, 457, 460, 463, 464, 467, 471, 477, 478, 479, 480, 482, 483, 486, 487, 488, 489, 494, 497, 500, 527, 528, 535, 538, 542, 543, 544, 546, 547, 549, 551, 553, 554, 556, 557, 558, 559], "default_alpha": 557, "default_col": [203, 388], "default_config": 193, "default_dtyp": 279, "default_opset_vers": 127, "default_sampl": [153, 487], "default_sq_alpha_arg": 304, "default_v": 156, "default_white_list": [152, 300, 304, 443], "default_workspac": 196, "defaultdataload": [203, 209], "defin": [71, 135, 156, 174, 176, 181, 182, 183, 188, 189, 190, 191, 196, 199, 200, 236, 263, 344, 396, 454, 457, 470, 477, 484, 486, 487, 493, 495, 499, 500, 501, 528, 530, 535, 538, 542, 543, 548, 549, 551, 554, 556, 557, 559], "definit": [133, 142, 204, 208, 386, 433, 534], "defult": [435, 446], "degrad": [530, 549, 559], "delet": 549, "delete_assign": 262, "deliv": [479, 482, 543, 550, 555], "demand": [482, 493, 554], "demo": [154, 483, 543], "democrat": 550, "demonstr": [478, 482, 487, 489, 499, 532, 546], "denot": [493, 557], "dens": [174, 191, 196, 296, 549, 560], "dense_shap": 214, "densenet": 560, "densiti": 559, "denver": 233, "depend": [1, 199, 200, 236, 263, 453, 454, 496, 499, 534, 535, 539, 551, 559], "deploi": [482, 487, 493, 496, 543, 554, 559], "deploy": [483, 529, 550, 552, 557], "deprec": [153, 527, 555, 558], "depth": [145, 421, 553], "depth_multipli": [295, 299], "depthwis": [295, 417], "depthwise_constraint": [295, 299], "depthwise_conv2d": 296, "depthwise_initi": [295, 299], "depthwise_regular": [295, 299], "depthwiseconv2d": 295, "depthwiseconv2dn": [50, 56, 110, 120, 323, 329, 366, 376, 535], "dequant": [29, 30, 31, 36, 73, 76, 77, 78, 79, 81, 135, 145, 309, 346, 348, 349, 350, 351, 353, 402, 417, 427, 433, 437, 471, 493, 497, 501, 557], "dequantize_cast_optim": [37, 310], "dequantize_data": 30, "dequantize_data_with_scale_zero": 30, "dequantize_per_channel": [493, 557], "dequantize_tensor": 471, "dequantize_weight": 471, "dequantizecastoptim": [36, 309], "dequantizelinear": 30, "deriv": [163, 170, 178, 179, 180, 186, 187, 188, 189, 190, 191, 192], "derogatori": 495, "desc": 543, "desc_act": 457, "descent": [174, 443, 482, 493, 499, 550], "describ": [500, 502, 527, 535], "descript": [1, 117, 282, 373, 477, 480, 497, 501, 502, 528, 557], "deseri": [140, 400], "design": [163, 209, 235, 268, 475, 481, 483, 486, 494, 499, 543, 549, 551], "desir": [196, 222, 226, 413, 480, 501, 502, 549, 557, 558], "despit": 487, "dest": 90, "destin": [133, 386, 462], "detach": [493, 557], "detail": [29, 149, 152, 174, 226, 417, 443, 471, 472, 475, 479, 480, 482, 483, 484, 485, 486, 493, 494, 495, 499, 501, 502, 526, 527, 534, 535, 537, 541, 542, 543, 544, 549, 554, 555, 556, 557, 559], "detect": [143, 145, 161, 174, 196, 231, 235, 240, 421, 447, 453, 483, 496, 497, 549, 559], "detect_devic": 453, "detect_processor_type_based_on_hw": 161, "detection_box": [231, 543], "detection_boxes_list": 231, "detection_class": [231, 543], "detection_classes_list": 231, "detection_mask": 231, "detection_scor": [231, 543], "detection_scores_list": 231, "detection_typ": 231, "detectionboxes_precis": 235, "detectioncoco": 560, "detections_list": 231, "detector": 143, "determin": [170, 176, 181, 192, 196, 431, 466, 476, 481, 487, 489, 495, 497, 526, 549, 551], "determinist": 543, "dettmer": [482, 493, 554], "dev": 534, "develop": [135, 156, 246, 478, 479, 496, 497, 527, 539, 543, 544, 546, 549, 550, 553, 556], "deviat": [226, 558], "devic": [1, 64, 74, 75, 76, 77, 78, 79, 82, 92, 116, 121, 132, 139, 140, 145, 171, 174, 175, 189, 193, 196, 337, 347, 348, 349, 350, 351, 354, 358, 372, 377, 385, 394, 395, 400, 402, 405, 417, 421, 422, 424, 427, 429, 433, 435, 437, 446, 449, 451, 453, 467, 479, 482, 483, 489, 493, 499, 501, 528, 543, 544, 549, 552, 554], "device_id": [140, 400], "device_map": 494, "device_nam": [447, 451], "device_synchron": 451, "device_typ": 395, "devop": 496, "df": 90, "diag": 31, "diagnosi": 550, "diagon": [31, 482, 534, 554], "diagram": [482, 501, 502, 559], "dict": [1, 31, 101, 133, 134, 135, 140, 145, 146, 151, 154, 160, 166, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 199, 200, 209, 230, 231, 232, 233, 235, 236, 244, 263, 278, 281, 282, 290, 300, 304, 306, 386, 391, 392, 400, 403, 408, 410, 415, 416, 417, 421, 422, 423, 424, 429, 431, 437, 439, 441, 442, 443, 445, 453, 454, 457, 458, 460, 462, 464, 470, 471, 482, 483, 484, 489, 494, 497, 501, 527, 533, 542, 549, 551, 557, 559], "dictionari": [52, 53, 55, 133, 134, 135, 140, 145, 195, 196, 225, 231, 325, 326, 328, 392, 400, 408, 417, 421, 435, 446, 453, 471], "differ": [128, 146, 150, 152, 154, 156, 157, 164, 185, 196, 204, 212, 226, 235, 244, 246, 381, 391, 422, 450, 466, 477, 482, 483, 486, 489, 493, 495, 497, 501, 528, 531, 532, 536, 537, 538, 542, 543, 545, 547, 549, 551, 554, 557, 558, 559], "difficult": [480, 485, 487, 493, 500, 557], "difficulti": [480, 485, 493, 557], "diffus": [499, 550], "digit": [228, 471, 550], "dilat": [43, 316], "dilated_contract": [61, 334], "dilatedcontract": [43, 316], "dilation_r": [293, 295, 299], "dim": [226, 493, 557, 558], "dimens": [52, 53, 90, 203, 226, 325, 326, 388, 417, 482, 554, 558], "dir": [145, 210, 467, 470, 534, 537], "direct": [85, 180, 356, 483, 549], "direct8bit": 11, "direct8bitoper": 11, "direct_q8": 16, "directli": [172, 196, 209, 231, 235, 484, 494, 542, 543, 549, 551], "directori": [196, 211, 212, 244, 391, 412, 435, 446, 467, 470, 471, 499, 531, 534], "disabl": [133, 196, 392, 495, 553, 554, 557], "disable_al": 196, "disable_quanted_input": 457, "disable_random": [133, 392], "discard": 528, "discord": 499, "discourag": 549, "discov": 526, "discret": [3, 559], "discrimin": 560, "discuss": [483, 499], "dispatch": [501, 538], "displai": [196, 278, 279, 392, 471], "distanc": 471, "distil": [163, 196, 475, 499, 532, 536, 538, 548], "distil_loss": [196, 543], "distilbert": [210, 544, 550, 560], "distilgpt2": 560, "distillation_conf": 163, "distillation_criterion": [530, 543, 548], "distillationcallback": 163, "distillationconfig": [196, 454, 530, 543, 548], "distilroberta": 560, "distinct": [478, 546], "distort": 501, "distribut": [1, 3, 128, 150, 196, 201, 203, 204, 205, 208, 381, 388, 466, 475, 477, 482, 486, 493, 501, 528, 539, 550, 551, 554, 555, 557, 560], "distribute_calib_tensor": 1, "distributedoptim": 531, "distributedsampl": 531, "distutil": 534, "div_": [493, 557], "dive": [475, 535], "diverg": [3, 458, 466, 502, 526, 559], "divid": [493, 528, 557, 559], "divis": [31, 417], "dl": [236, 479, 537, 550, 560], "dlabel": 497, "dlrm": 235, "dmlexecutionprovid": 551, "dnnlexecutionprovid": [544, 551], "do": [163, 189, 196, 209, 210, 228, 231, 415, 464, 470, 477, 483, 495, 501, 527, 531, 535, 538, 542, 543, 549, 553, 555, 557, 559], "do_blockwis": [417, 443, 557], "do_constant_fold": 464, "do_lower_cas": [210, 225, 226, 558], "do_sampl": 494, "doc": [178, 179, 196, 235, 263, 278, 279, 282, 392, 447, 471, 499, 539, 542, 543], "doc_span_index": 226, "doc_strid": [226, 558], "doc_token": 226, "docker": 534, "docstr": [196, 282], "docstyl": 496, "document": [226, 282, 475, 479, 484, 485, 493, 494, 501, 502, 506, 531, 541, 544, 549, 555, 558], "doe": [228, 281, 302, 306, 481, 482, 486, 527, 528, 542, 543, 554, 555, 558], "doesn": [140, 226, 400, 479, 486, 500, 531, 543, 544], "dolli": [480, 541, 549, 557], "domain": [89, 90, 196, 549, 559], "don": [128, 150, 176, 196, 381, 480, 481, 497, 549, 559], "done": [493, 497, 530, 549, 551], "dong": 135, "dot": [392, 471, 479, 493, 544, 551], "dotdict": [196, 246, 471], "doubl": [442, 443, 482, 550], "double_qu": 453, "double_quant_bit": [443, 482], "double_quant_dtyp": [443, 482], "double_quant_group_s": [443, 482], "double_quant_typ": 453, "double_quant_use_sym": [443, 482], "dowload_hf_model": [141, 453], "download": [141, 212, 453, 499, 539, 555], "download_url": 212, "downstream": 549, "dpcpp": 494, "dq": [92, 94, 116, 358, 360, 372, 395, 476, 481, 483, 493, 557], "draw": [528, 556, 559], "drive": 502, "driven": [246, 499, 536, 543, 547], "drop": [193, 231, 422, 479, 480, 482, 493, 496, 543, 544, 549, 554, 557, 560], "drop_last": [204, 208, 388], "dry_run": 531, "dscore": 497, "dtype": [30, 31, 87, 90, 196, 213, 214, 222, 226, 388, 405, 410, 413, 417, 427, 433, 437, 443, 453, 467, 479, 482, 483, 493, 494, 501, 502, 533, 535, 551, 554, 557, 558], "dtype_map": 30, "dtype_to_nam": 30, "duc": 560, "due": [154, 493, 502, 533, 549, 551, 557], "dummi": [44, 174, 213, 214, 235, 317, 388, 486, 499, 542, 543], "dummy_biasadd": [61, 334], "dummy_dataset": 216, "dummy_dataset_v2": 216, "dummy_v2": [214, 388], "dummydataset": [213, 214, 388, 486], "dummydatasetv2": 388, "dump": [2, 138, 145, 151, 154, 401, 417, 421, 453, 464, 471, 486, 493, 496, 551], "dump_class_attr": 471, "dump_data_to_loc": 471, "dump_elapsed_tim": [161, 392, 471, 500], "dump_fp32": [131, 384], "dump_model_op_stat": [417, 421, 453], "dump_numa_info": 154, "dump_op_typ": 2, "dump_stats_path": [443, 477], "dump_tabl": 471, "dump_table_to_csv": 471, "duplic": [83, 93, 267, 355, 359], "durat": 556, "dure": [1, 138, 140, 176, 180, 191, 196, 246, 400, 401, 417, 445, 453, 471, 480, 481, 483, 486, 493, 499, 501, 536, 543, 545, 547, 548, 549, 551, 557], "dyna": 196, "dynam": [140, 196, 201, 279, 388, 400, 413, 439, 441, 443, 464, 482, 483, 499, 500, 528, 533, 536, 538, 543, 550, 559, 560], "dynamic_ax": [196, 464, 533], "dynamic_length": 210, "dynamic_max_gap": [422, 443, 482], "dynamic_quant_export": 464, "dynamic_shap": 439, "dynamicquantconfig": [443, 476], "dynamo": [481, 483], "e": [140, 154, 176, 196, 400, 482, 489, 493, 494, 495, 496, 499, 532, 549, 554, 557, 559], "e16": 496, "e2m1": [478, 482, 546, 554], "e2m3": [478, 546], "e3m2": [478, 546], "e4m3": [443, 477, 478, 499, 546], "e5m2": [477, 478, 546], "e8m0": [478, 546], "each": [126, 133, 135, 140, 145, 154, 193, 196, 208, 212, 215, 222, 226, 229, 231, 232, 233, 272, 287, 388, 400, 416, 417, 421, 435, 437, 453, 471, 475, 482, 485, 488, 493, 496, 500, 501, 502, 527, 530, 535, 543, 547, 549, 552, 554, 556, 558, 559], "eager": [189, 262, 439, 476, 481, 482, 483, 531, 538, 551, 553], "earli": [196, 493, 543, 551, 559], "eas": [483, 486, 539, 550], "easi": [210, 481, 483, 486, 533, 543, 550, 551, 554, 556], "easier": 550, "easili": [246, 487, 493, 500, 547, 557], "econom": 495, "ecosystem": [499, 550], "edg": 558, "edit": 495, "edouard": [493, 557], "edu": [3, 212], "educ": 495, "effect": [188, 481, 482, 500, 549, 550], "effici": [29, 149, 417, 481, 489, 493, 499, 526, 528, 548, 549, 550, 554, 557, 559], "efficientnet": 560, "effort": 543, "eg": [145, 212, 437], "egsdcrb1": 560, "either": [140, 153, 196, 231, 400, 481, 486, 487, 489, 493, 548, 551], "elaps": [161, 392, 471], "electra": 560, "electron": 495, "elem_format": 408, "elem_typ": 90, "element": [31, 153, 178, 179, 193, 208, 231, 388, 408, 437, 453, 471, 478, 482, 493, 538, 542, 546, 549, 554, 557], "elementwise_over_al": 193, "elementwise_over_matmul_gemm_conv": 193, "elemformat": 408, "eleutherai": [480, 536, 541, 557], "elia": [482, 493, 554], "elimin": [51, 324], "ellipsi": [410, 447], "els": [1, 133, 196, 208, 246, 386, 437, 494, 554], "em": 560, "email": 499, "emb": 482, "embed": [145, 424, 526, 549], "embed_layernorm": 16, "embed_out": 549, "embedlayernorm": 12, "embedlayernormalizationoper": 12, "emerg": [478, 546, 557], "emit": 477, "emnlp": [499, 550], "emot": 560, "empathi": 495, "empir": [128, 150, 381], "empow": [478, 546], "empti": [141, 196, 453, 477, 482, 483, 552], "emsp": 549, "emul": [483, 493, 543, 551], "en": [499, 539], "enabl": [31, 94, 135, 181, 196, 360, 413, 479, 481, 482, 486, 501, 502, 531, 544, 549, 550, 557, 559], "enable_act": 135, "enable_al": 196, "enable_auto_scal": [31, 554], "enable_bas": 196, "enable_eager_execut": 531, "enable_extend": 196, "enable_full_rang": [422, 437, 443, 467, 482, 552, 554], "enable_minmax_tun": [422, 443, 482], "enable_mse_search": [31, 554], "enable_norm_bias_tun": [422, 443], "enable_quanted_input": [422, 443, 482], "enable_torch_compil": [422, 443], "encapsul": [95, 199, 200, 236, 263, 361, 454, 545], "encod": [140, 231, 400, 457, 558], "encodejp": 558, "encount": [528, 534], "end": [133, 181, 182, 183, 188, 196, 210, 225, 226, 264, 266, 386, 494, 500, 501, 502, 530, 535, 539, 543, 547, 549, 554, 558, 559], "end_epoch": 543, "end_posit": 226, "end_step": [181, 196, 543, 549], "endlessli": 559, "energi": [478, 546], "engin": 479, "english": 549, "enhanc": [489, 526, 549, 550, 553], "enough": [156, 417, 486, 493, 494, 551], "enough_memo_store_scal": 417, "ensp": 558, "ensur": [1, 226, 267, 481, 484, 531, 551, 558], "ensure_list": 1, "entir": [263, 454, 480, 482, 485, 497, 501, 502, 526, 549], "entranc": [64, 202, 337], "entri": [52, 53, 55, 135, 166, 302, 303, 306, 325, 326, 328, 441, 442, 445, 446, 471, 483, 527, 540], "entropi": [196, 526, 559], "enum": 1, "enumer": [156, 157, 454, 478, 500, 530, 531, 543, 546, 548, 549], "env": [151, 534], "env_var": 151, "environ": [30, 151, 447, 452, 479, 483, 489, 494, 495, 499, 525, 559], "eoferror": [138, 401], "ep": [3, 150, 544], "epoch": [163, 182, 183, 188, 454, 528, 530, 531, 543, 548, 549], "equal": [90, 128, 133, 150, 282, 381, 392, 453, 471, 478, 546, 549, 554], "equal_dict": 471, "equat": [30, 233, 235, 493, 551, 557], "equival": [68, 341, 436, 478, 480, 482, 485, 493, 499, 546, 550, 554, 557], "erf": [54, 327], "error": [31, 90, 135, 140, 235, 272, 400, 417, 457, 468, 477, 482, 493, 534, 542, 554, 557, 559], "error_msg": 90, "especi": 536, "essenti": [526, 534], "estim": [133, 235, 244, 391, 559], "estimator_sess": [244, 391], "et": [135, 478, 482, 493, 526, 546, 554, 557], "etc": [151, 163, 225, 233, 236, 263, 393, 470, 499, 538, 549, 556, 559], "ethnic": 495, "euclidean": 471, "eural_compressor": 246, "eval": [497, 527, 528, 551], "eval_acc": 153, "eval_acc_fn": [479, 484, 486], "eval_arg": [153, 303, 442, 479, 483, 484, 486], "eval_dataload": [151, 196, 199, 200, 236, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 454, 525, 537, 542, 543, 551, 552, 559], "eval_fn": [153, 303, 442, 479, 483, 484, 485, 486, 487], "eval_fn_wrapp": 485, "eval_frequ": 163, "eval_func": [125, 199, 200, 236, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 282, 284, 454, 497, 528, 530, 531, 543, 551, 552, 553, 554, 559], "eval_metr": [199, 200, 236, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 454, 542, 551], "eval_perf": 153, "eval_result": 527, "eval_result_of_q_model": 153, "evalu": [151, 153, 163, 176, 199, 200, 210, 228, 231, 232, 233, 235, 236, 246, 263, 442, 454, 460, 483, 485, 486, 487, 493, 500, 501, 527, 530, 537, 538, 541, 542, 543, 544, 547, 549, 551, 556, 557, 559], "evaluate_squad": 234, "evaluation_result": 531, "evaluation_time_cost": 531, "evaluationfuncwrapp": 153, "even": [493, 552, 554, 557], "evenli": 528, "event": 495, "everi": [52, 53, 55, 176, 179, 181, 196, 325, 326, 328, 482, 500, 528, 552, 554, 559], "everyon": 495, "everyth": 193, "exact": [232, 422], "exact_match_scor": 232, "exactli": 531, "exampl": [1, 31, 135, 140, 145, 151, 152, 153, 156, 160, 174, 175, 189, 196, 210, 211, 212, 222, 226, 231, 232, 233, 235, 236, 246, 263, 281, 282, 392, 395, 396, 400, 412, 415, 430, 435, 437, 439, 447, 453, 454, 470, 471, 475, 480, 486, 487, 489, 495, 499, 501, 502, 506, 536, 537, 538, 553, 555, 558, 559, 561], "example_algo": [392, 453], "example_gener": 282, "example_index": 226, "example_inp": 145, "example_input": [145, 196, 412, 415, 416, 417, 421, 436, 437, 439, 442, 445, 464, 470, 476, 480, 481, 482, 483, 533], "examplealgorithm": 152, "examplealgorithmconfig": 152, "exampleclass": 282, "exce": [226, 554, 558], "exceed": [244, 391], "excel": [493, 554], "except": [140, 282, 400, 417, 471, 482, 527, 551, 552], "exchang": 533, "exclud": [196, 477, 500, 526, 553], "excluded_op_nam": [56, 57, 196, 329, 330, 543, 549], "excluded_precis": [196, 443, 553], "execut": [29, 30, 39, 140, 151, 157, 181, 182, 183, 196, 262, 263, 264, 266, 312, 393, 400, 416, 424, 453, 454, 460, 470, 471, 481, 482, 493, 494, 530, 543, 544, 548, 549, 551, 554, 556, 559, 560], "executionprovid": 560, "exemplifi": 549, "exhaust": [196, 271, 417], "exhaustivetunestrategi": 269, "exist": [39, 151, 244, 312, 391, 392, 451, 471, 479, 483, 494, 533, 542, 559], "exit": [196, 264, 266, 487, 543], "exit_polici": 543, "exp": [196, 478, 543, 546, 549], "expand_and_reshap": 408, "expanddim": [45, 318], "expanddims_optim": [61, 334], "expanddimsoptim": [45, 318], "expect": [212, 482, 484, 493, 495, 496, 534, 541, 551, 554, 559], "expens": [543, 559], "experi": [486, 494, 495, 556, 557, 559], "experiment": [494, 530, 531, 533, 543, 549, 551, 555, 558], "explain": [156, 493, 502, 557], "explicit": 495, "explicitli": [156, 196, 481, 489, 494, 537, 549], "explor": [478, 500, 546], "explos": [478, 546], "expon": [478, 546], "exporsingleimagedetectionboxestococo": 231, "export": [86, 196, 231, 440, 465, 475, 476, 479, 481, 483, 494, 534], "export_compressed_model": [467, 554], "export_format": [422, 443], "export_model_for_pt2e_qu": 439, "exportconfig": 196, "exportdetectionstococo": 231, "exported_model": [476, 481], "exportgroundtruthtococo": 231, "exportsingleimagedetectionboxestococo": 231, "exportsingleimagedetectionmaskstococo": 231, "exportsingleimagedetectionstococo": 231, "exportsingleimagegroundtruthtococo": 231, "expos": 457, "express": [228, 495], "extend": [483, 494, 501, 502, 536], "extend_engin": [95, 361], "extens": [138, 140, 392, 400, 401, 471, 479, 480, 481, 483, 493, 494, 499, 500, 507, 527, 534, 535, 536, 538, 539, 541, 543, 544, 545, 549, 550, 551, 554, 557, 559], "extra": [140, 233, 400, 422, 482, 543, 554], "extra_data_dir": [422, 443], "extra_opset": 87, "extract": [52, 53, 55, 133, 174, 212, 281, 325, 326, 328], "extract_data_typ": 281, "extran": 527, "extrem": 526, "f": [140, 171, 400, 482, 493, 527, 531, 551, 554, 557], "f1": [232, 234, 235, 531, 542, 543, 556, 560], "f1_score": [232, 233], "face": [141, 453, 494, 495, 499, 506, 550, 555, 560], "facebook": [480, 541, 557], "facil": [140, 400], "facilit": 527, "fact": [493, 551], "factor": [3, 126, 287, 417, 429, 476, 480, 482, 486, 493, 534, 554, 557, 560], "factori": [242, 392], "fail": [140, 400, 497, 528, 533], "failur": [496, 497], "fair": 495, "faith": 495, "fake": [29, 31, 98, 142, 149, 156, 281, 417, 433, 437, 482, 493, 543, 551, 554, 557], "fake_qu": [33, 73, 92, 116, 121, 307, 346, 358, 372, 377, 443], "fake_quant": 99, "fakeaffinetensorquantfunct": [142, 433], "fakealgoconfig": 156, "fakequ": [73, 289, 346], "fakequant": 98, "fakequantizebas": 98, "falcon": [480, 499, 541, 549, 557], "fall": [140, 145, 400, 453, 478, 546], "fallback": [145, 196, 270, 272, 273, 479, 480, 481, 533, 544, 553, 559], "fallback_list": 28, "fallback_ord": 145, "fallbacktuningsampl": 278, "fals": [1, 2, 28, 29, 30, 31, 32, 33, 34, 56, 57, 74, 77, 84, 87, 88, 90, 98, 116, 121, 128, 131, 132, 133, 139, 140, 144, 145, 151, 164, 167, 196, 201, 203, 205, 210, 212, 222, 226, 231, 235, 246, 263, 282, 290, 293, 294, 295, 298, 299, 304, 307, 329, 330, 347, 349, 372, 377, 381, 384, 385, 386, 388, 400, 407, 408, 410, 413, 417, 421, 422, 424, 429, 431, 433, 437, 443, 445, 453, 457, 460, 467, 470, 471, 480, 482, 484, 486, 487, 488, 494, 500, 501, 528, 535, 542, 543, 551, 554, 557, 558, 559], "familiar": 475, "famou": [482, 493, 554], "faq": [495, 499], "far": 483, "fashionmnist": 212, "fast": [188, 196, 482, 486, 549, 550, 554], "fast_bias_correct": [148, 196, 551], "fastbiascorrect": [147, 150], "faster": [528, 529, 533, 550, 559, 560], "fatal": 468, "father": [141, 174, 402], "fault": 496, "fault_tolerant_fil": 471, "fbgemm": [479, 544, 551], "fc": [145, 196, 549], "fc1": [145, 437, 481], "fc2": [31, 145, 437], "fcn": 560, "feasibl": 196, "featur": [196, 210, 211, 222, 226, 417, 479, 484, 493, 496, 499, 525, 528, 529, 543, 544, 545, 549, 550, 555, 558], "feb": 550, "fed": [417, 559], "feed": [133, 209, 386, 549], "feed_dict": [133, 209, 386], "feedward": 185, "fefin": 200, "feng": 540, "ferplu": 560, "fetch": [46, 145, 148, 154, 204, 319, 388, 501], "fetch_modul": [145, 437, 453], "fetch_weight_from_reshap": [61, 334], "fetchweightfromreshapeoptim": [46, 319], "few": [549, 550, 557, 559], "ffffff": 559, "ffn": [143, 185, 421], "ffn2_sparsiti": [172, 549], "ffn_modul": 185, "ffn_name": 185, "field": [196, 212, 231, 478, 497, 500, 502, 531, 543, 546, 556, 559], "field_nam": [161, 471], "fig": 477, "figur": [482, 552], "file": [90, 133, 138, 140, 141, 145, 148, 160, 167, 189, 193, 196, 199, 200, 210, 211, 212, 215, 225, 226, 231, 236, 246, 250, 251, 254, 263, 386, 392, 400, 401, 402, 415, 417, 421, 470, 471, 477, 482, 488, 496, 500, 501, 502, 531, 534, 537, 540, 542, 543, 545, 547, 551, 554, 558], "file_lik": [140, 400], "file_typ": 471, "filenam": [212, 471], "filepath": [140, 400, 471, 527], "fill": [556, 558, 559], "filter": [1, 210, 211, 212, 213, 214, 215, 217, 221, 293, 299, 388, 410, 431, 471, 502, 538, 549], "filter_fn": 431, "filter_registri": 219, "filter_typ": 219, "final": [140, 174, 181, 193, 400, 481, 493, 501, 543, 547, 549, 551, 555, 559], "finalize_calibr": 445, "find": [30, 52, 53, 55, 90, 133, 195, 235, 267, 325, 326, 328, 386, 453, 471, 487, 500, 541, 549, 554, 556, 557, 559], "find_by_nam": 30, "find_lay": [195, 424], "find_layers_nam": 424, "find_matching_block": 453, "find_opset": 90, "fine": [187, 210, 483, 527, 549, 550, 551], "finer": [493, 557, 559], "finest": [493, 557], "finetun": [482, 493, 549, 554, 560], "finish": 489, "first": [128, 140, 145, 150, 152, 175, 196, 210, 231, 268, 279, 381, 392, 400, 417, 437, 449, 471, 478, 479, 482, 488, 493, 494, 497, 499, 500, 501, 502, 539, 544, 546, 551, 553, 554, 556, 557, 559], "first_conv_or_matmul_quant": [196, 551], "first_n": [131, 384], "fit": [151, 176, 196, 236, 263, 267, 282, 454, 497, 525, 528, 531, 537, 542, 543, 544, 545, 549, 551, 552, 553, 554], "fit_with_raw_cmd": 151, "fix": [133, 186, 188, 210, 386, 482, 528, 549, 551, 554, 559], "fix_ref_type_of_graph_def": [133, 386], "flag": [196, 229], "flan": 549, "flatten_static_graph": 174, "flex": [499, 539], "flexibl": [479, 482, 486, 499, 549, 554], "flip": [222, 226, 558], "float": [3, 30, 31, 125, 126, 135, 152, 176, 181, 190, 193, 196, 210, 222, 229, 231, 232, 233, 278, 282, 284, 287, 304, 393, 395, 417, 422, 437, 443, 445, 447, 457, 471, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 493, 527, 542, 546, 551, 557, 558], "float16": [5, 8, 30, 405, 410, 467, 477, 482, 494, 554], "float16activationoper": 5, "float16binaryoper": 8, "float32": [213, 214, 226, 231, 388, 433, 453, 467, 477, 482, 493, 500, 525, 543, 551, 554, 557, 558], "float_dict": 135, "float_model": [135, 482, 489], "float_to_bfloat16": 30, "float_to_float16": 30, "floatfunct": 497, "floor": [478, 546], "flop": [482, 493, 554], "flow": [232, 233, 493, 497, 543], "flowchart": 559, "fn": 410, "fn_arg": 410, "focu": [494, 526, 559], "focus": [478, 482, 486, 495, 500, 536, 546], "fold": [47, 48, 145, 304, 320, 321, 417, 436, 437, 443, 464, 480, 482, 535, 554, 557], "fold_batch_norm": [61, 334], "fold_const": [61, 334], "foldbatchnormnodesoptim": [47, 320], "folder": [133, 212, 217, 236, 263, 386, 470, 482, 483, 494, 554], "follow": [73, 95, 153, 175, 212, 228, 231, 346, 361, 393, 395, 424, 478, 479, 480, 485, 488, 489, 493, 494, 495, 496, 497, 499, 500, 501, 502, 527, 528, 530, 531, 534, 535, 539, 540, 542, 543, 544, 545, 546, 548, 549, 551, 554, 557, 559], "footprint": [196, 246, 530, 543, 547, 549, 552], "forc": [447, 553], "forg": 534, "fork": 496, "form": 233, "format": [5, 30, 39, 133, 145, 154, 196, 210, 211, 212, 231, 279, 282, 289, 290, 312, 386, 390, 391, 408, 435, 446, 450, 453, 464, 467, 478, 479, 481, 483, 486, 488, 493, 499, 501, 502, 527, 531, 533, 542, 543, 544, 545, 546, 550, 551, 554], "format_list2str": 154, "format_vers": [138, 401], "formul": 543, "formula": [493, 549, 557], "forpytorch": 539, "fortensorflow": 539, "fortieth": 549, "forward": [1, 145, 193, 417, 437, 449, 453, 482, 493, 501, 543, 549, 551, 554, 557], "forward_measur": 395, "forward_qdq": 395, "forward_qu": 395, "forward_wrapp": [145, 417, 437, 453], "foster": 495, "found": [163, 410, 417, 479, 499, 527, 541, 544, 557, 559, 560], "foundat": 550, "four": [476, 481, 487], "fp1": [493, 557], "fp16": [31, 196, 279, 403, 405, 410, 422, 443, 493, 551], "fp2": [493, 557], "fp32": [28, 29, 31, 64, 116, 121, 128, 145, 150, 196, 199, 200, 235, 268, 272, 279, 302, 306, 337, 372, 377, 381, 392, 410, 415, 416, 419, 435, 437, 441, 460, 463, 464, 467, 470, 471, 477, 479, 480, 481, 482, 483, 484, 486, 493, 496, 500, 502, 535, 541, 542, 543, 544, 551, 553, 554, 555, 556, 557, 559, 560], "fp32_baselin": [153, 460, 500], "fp32_graph": [128, 381], "fp32_layer": [293, 294, 295, 298, 299], "fp32_model": [135, 145, 435, 446, 464, 471, 480, 481, 485, 486, 552, 554], "fp32_model_path": 552, "fp32_onnx_config": 533, "fp32_onnx_path": 464, "fp32_op": [33, 35, 92, 307, 308, 358], "fp32_tensor": 471, "fp4": [437, 478, 482, 546, 554], "fp6": [478, 546], "fp8": [441, 443, 446, 478, 483, 546, 550], "fp8_config": [443, 477, 499], "fp8_entri": 441, "fp8_white_list": 477, "fp8config": [441, 443, 477, 499], "fpath": 212, "frac": [478, 493, 546, 557], "fraction": [222, 558], "fragment": 500, "framework": [1, 151, 152, 157, 164, 166, 171, 177, 181, 184, 188, 189, 197, 198, 202, 203, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 226, 235, 236, 237, 238, 240, 273, 279, 289, 300, 390, 460, 475, 479, 481, 486, 487, 493, 500, 502, 526, 527, 531, 532, 536, 537, 538, 542, 543, 544, 549, 550, 551, 558, 559, 560], "framework_dataset": 212, "framework_nam": [152, 527], "framework_specific_info": [32, 289, 290, 500], "frantar": [482, 493, 549, 554], "free": [29, 149, 188, 199, 200, 263, 417, 480, 485, 493, 495, 547, 556, 557], "freez": [73, 74, 75, 133, 346, 347, 386, 476, 481, 549], "freeze_fake_qu": [80, 352], "freeze_valu": [80, 352], "freeze_value_without_calib": 80, "freezefakequantopoptim": [73, 346], "freezevaluetransform": [74, 347], "freezevaluewithoutcalibtransform": 75, "frequenc": [163, 181, 196, 543, 549], "frequent": 539, "fresh": [499, 539], "friendli": [478, 493, 535, 543, 546, 550, 557], "from": [1, 30, 46, 52, 53, 55, 90, 133, 140, 141, 145, 151, 152, 153, 160, 163, 164, 170, 171, 177, 178, 179, 180, 184, 186, 187, 188, 189, 190, 191, 192, 193, 196, 199, 200, 201, 204, 207, 210, 211, 212, 213, 214, 215, 217, 222, 228, 231, 232, 233, 236, 244, 246, 263, 279, 281, 282, 289, 319, 325, 326, 328, 386, 388, 391, 393, 400, 402, 410, 412, 415, 416, 417, 419, 421, 435, 437, 441, 446, 453, 454, 457, 460, 462, 463, 464, 467, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 493, 494, 495, 496, 497, 500, 502, 525, 527, 528, 530, 531, 532, 533, 534, 536, 538, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559], "from_dict": 484, "from_pretrain": [467, 494, 536, 543], "frontend": 494, "frozen": [236, 244, 263, 391, 545], "frozen_func": [133, 386], "frozen_pb_sess": [244, 391], "fuel": [478, 546], "full": [30, 210, 211, 212, 453, 467, 471, 477, 482, 499, 526, 534, 540, 549, 554, 555], "full_rang": 437, "fulli": [484, 543, 551, 557], "fulltoken": 225, "fun": 282, "func": [133, 145, 161, 386, 471, 551], "func_dict": 460, "function": [124, 125, 138, 159, 182, 183, 188, 196, 199, 200, 211, 284, 297, 380, 397, 401, 425, 465, 475, 479, 481, 482, 483, 486, 493, 494, 496, 497, 500, 501, 502, 525, 528, 530, 533, 537, 538, 541, 542, 543, 544, 549, 551, 554, 556, 557, 559], "function1": 282, "function2": 282, "function3": 282, "fundament": [484, 485, 526, 543], "funnel": 560, "funsd": 560, "further": [55, 196, 328, 479, 493, 495, 499, 544, 545, 551], "fuse": [1, 43, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 76, 77, 78, 79, 81, 116, 121, 144, 145, 149, 316, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 348, 349, 350, 351, 353, 372, 377, 421, 497, 557], "fuse_biasadd_add": [61, 334], "fuse_column_wise_mul": [61, 334], "fuse_conv_redundant_dequant": [80, 352], "fuse_conv_requant": [80, 352], "fuse_conv_with_math": [61, 334], "fuse_decomposed_bn": [61, 334], "fuse_decomposed_in": [61, 334], "fuse_gelu": [61, 334], "fuse_layer_norm": [61, 334], "fuse_matmul_redundant_dequant": [80, 352], "fuse_matmul_requant": [80, 352], "fuse_pad_with_conv": [61, 334], "fuse_pad_with_fp32_conv": [61, 334], "fuse_qdq_bn": [115, 371], "fuse_qdq_concatv2": [115, 371], "fuse_qdq_conv": [115, 371], "fuse_qdq_deconv": [115, 371], "fuse_qdq_in": [115, 371], "fuse_qdq_matmul": [115, 371], "fuse_qdq_pool": [115, 371], "fuse_reshape_transpos": [61, 334], "fusebiasaddandaddoptim": [49, 322], "fusecolumnwisemuloptim": [50, 323], "fuseconvredundantdequantizetransform": [76, 348], "fuseconvrequantizetransform": [77, 349], "fuseconvwithmathoptim": [51, 324], "fusedbatchnorm": [66, 339], "fusedbatchnormv2": [66, 339], "fusedbatchnormv3": [108, 118, 364, 374], "fusedbatcnormv3": [55, 328], "fusedecomposedbnoptim": [52, 325], "fusedecomposedinoptim": [53, 326], "fusedinstancenorm": [112, 368], "fusedmatmul": 18, "fusedmatmuloper": 18, "fusegeluoptim": [54, 327], "fuselayernormoptim": [55, 328], "fusematmulredundantdequantizetransform": [78, 350], "fusematmulrequantizedequantizenewapitransform": [79, 351], "fusematmulrequantizedequantizetransform": [79, 351], "fusematmulrequantizenewapitransform": [79, 351], "fusematmulrequantizetransform": [79, 351], "fusenodestartwithconcatv2": [109, 119, 365, 375], "fusenodestartwithconv2d": [110, 120, 366, 376], "fusenodestartwithdeconv2d": [111, 367], "fusenodestartwithfusedbatchnormv3": [108, 118, 364, 374], "fusenodestartwithfusedinstancenorm": [112, 368], "fusenodestartwithmatmul": [113, 122, 369, 378], "fusenodestartwithpool": [114, 123, 370, 379], "fusepadwithconv2doptim": [56, 329], "fusepadwithfp32conv2doptim": [57, 330], "fusetransposereshapeoptim": [58, 331], "fusion": [44, 46, 55, 63, 94, 111, 112, 113, 116, 117, 118, 122, 317, 319, 328, 336, 360, 367, 368, 369, 372, 373, 374, 378, 485, 497, 500, 535], "futur": [149, 153, 199, 200, 475, 483, 538, 541, 543], "fw": 501, "fwk": 240, "fwk_name": [152, 527], "fx": [145, 273, 410, 439, 446, 476, 479, 481, 538, 544, 550, 551, 553], "fx_model": 145, "fx_white_list": 145, "g": [90, 140, 154, 176, 196, 400, 482, 489, 493, 496, 532, 549, 554, 555, 557, 559], "g_idx": 433, "gain": [548, 550], "gan": 550, "gap": [482, 545], "gather": [1, 16, 196], "gatheroper": 13, "gaudi": [483, 499, 539, 550], "gaudi2": [477, 499, 539], "gaussian": [267, 559], "gavgpool": 16, "gb": 489, "gcc": 560, "gcp": 550, "gelu": [54, 327], "gemm": [16, 196], "gemm_to_matmul": [196, 551], "gemmoper": 15, "gen": [479, 493, 541, 544, 550, 551, 553], "gen_bar_updat": 212, "gen_id": 494, "gen_text": 494, "gender": 495, "gener": [1, 33, 34, 72, 107, 133, 145, 151, 153, 154, 174, 199, 200, 201, 209, 212, 213, 214, 215, 226, 228, 236, 259, 263, 267, 282, 300, 304, 307, 345, 386, 388, 396, 417, 421, 422, 424, 442, 443, 445, 454, 477, 478, 479, 480, 482, 483, 484, 489, 493, 494, 496, 497, 500, 502, 528, 542, 543, 544, 546, 547, 549, 550, 551, 553, 554, 557, 558, 559], "generaltopk": 235, "generate_activation_observ": [145, 421], "generate_feed_dict": [133, 386], "generate_ffn2_pruning_config": 172, "generate_kwarg": 494, "generate_mha_pruning_config": 172, "generate_prefix": [151, 154], "generate_xpu_qconfig": 421, "generategraphwithqdqpattern": [92, 358], "generator1": 282, "geomean": 538, "gestalt": 550, "get": [1, 29, 30, 31, 52, 53, 55, 89, 90, 133, 141, 145, 151, 154, 161, 166, 167, 170, 171, 172, 174, 177, 184, 190, 191, 192, 193, 196, 204, 226, 235, 244, 263, 272, 279, 281, 300, 303, 325, 326, 328, 386, 388, 391, 392, 402, 417, 421, 424, 437, 443, 449, 451, 453, 460, 464, 467, 471, 475, 480, 483, 488, 493, 501, 526, 534, 538, 539, 541, 543, 550, 554, 557, 559, 561], "get_absorb_lay": [145, 437], "get_acceler": 451, "get_activ": 167, "get_adaptor_nam": 281, "get_algorithm": 460, "get_all_config": 160, "get_all_config_set": [303, 442], "get_all_config_set_from_config_registri": [152, 527], "get_all_fp32_data": [392, 471], "get_all_registered_config": [300, 443], "get_architectur": 151, "get_attribut": 174, "get_blob_s": 31, "get_block_nam": 453, "get_block_prefix": [145, 437, 449], "get_bounded_thread": 151, "get_children": [141, 402], "get_common_modul": 174, "get_const_dim_count": [52, 53, 325, 326], "get_core_id": 151, "get_criterion": 170, "get_dataload": 422, "get_default_autoround_config": 443, "get_default_awq_config": 443, "get_default_double_quant_config": 443, "get_default_dynamic_config": 443, "get_default_fp8_config": 443, "get_default_fp8_config_set": 443, "get_default_gptq_config": 443, "get_default_hqq_config": 443, "get_default_mixed_precision_config": 443, "get_default_mixed_precision_config_set": 443, "get_default_mx_config": 443, "get_default_rtn_config": [443, 489], "get_default_sq_config": [304, 443], "get_default_static_config": 443, "get_default_static_quant_config": [300, 304], "get_default_teq_config": 443, "get_depth": [145, 421], "get_dict_at_depth": [145, 421], "get_double_quant_config_dict": 453, "get_element_under_depth": [145, 421], "get_embedding_contigu": 145, "get_estimator_graph": 133, "get_example_input": 145, "get_fallback_ord": 145, "get_filter_fn": 410, "get_final_text": 226, "get_framework_nam": 1, "get_func_from_config": 460, "get_graph_def": [133, 386], "get_half_precision_node_set": 410, "get_hidden_st": 145, "get_index_from_strided_slice_of_shap": 90, "get_input_output_node_nam": [133, 386], "get_ipex_vers": 451, "get_lay": 193, "get_layer_names_in_block": 453, "get_linux_numa_info": 154, "get_max_supported_opset_vers": 89, "get_metr": 460, "get_mllm_dataload": 422, "get_model_devic": 453, "get_model_fwk_nam": 240, "get_model_info": 453, "get_model_input_shap": [133, 386], "get_model_typ": [244, 391], "get_modul": [141, 402, 417, 437, 453], "get_module_input_output": [145, 437], "get_module_typ": 395, "get_mse_order_per_fp32": 145, "get_mse_order_per_int8": 145, "get_multimodal_block_nam": 453, "get_named_children": [141, 402], "get_node_map": 464, "get_node_original_nam": 30, "get_non_persistent_buff": 453, "get_numa_nod": 154, "get_number_of_socket": 471, "get_op_list": 471, "get_op_type_by_nam": 145, "get_par": [417, 437], "get_pattern": 177, "get_physical_id": 151, "get_postprocess": 460, "get_preprocess": 460, "get_processor_type_from_user_config": 453, "get_prun": 184, "get_quant": 453, "get_quant_dequant_output": 29, "get_quantizable_onnx_op": 464, "get_quantizable_ops_from_cfg": [145, 421], "get_quantizable_ops_recurs": [417, 421], "get_reg": 190, "get_reg_typ": 190, "get_reversed_numa_info": 154, "get_rtn_double_quant_config_set": 442, "get_schedul": 191, "get_schema": 89, "get_siz": 471, "get_sparsity_ratio": 193, "get_sparsity_ratio_tf": 193, "get_subgraphs_from_onnx": 90, "get_super_module_by_nam": [141, 402], "get_tensor_by_nam": [133, 386], "get_tensor_histogram": [392, 471], "get_tensor_val_from_graph_nod": 133, "get_tensorflow_node_attr": 90, "get_tensorflow_node_shape_attr": 90, "get_tensorflow_tensor_data": 90, "get_tensorflow_tensor_shap": 90, "get_tensors_info": 471, "get_tf_criterion": 192, "get_tf_model_typ": 391, "get_thread": 151, "get_threads_per_cor": 151, "get_torch_vers": [145, 451], "get_torchvision_map": 226, "get_tuning_histori": 471, "get_typ": 395, "get_unquantized_node_set": 410, "get_used_cpu_mem_mb": 451, "get_used_hpu_mem_mb": 451, "get_weight_from_input_tensor": 133, "get_weight_scal": 31, "get_weights_detail": 471, "get_white_list": 443, "get_windows_numa_info": 154, "get_woq_tuning_config": [443, 487], "get_workspac": 161, "getdefaultencod": 457, "getenv": 527, "gholami": 549, "gigant": [480, 485, 557], "girl": 494, "git": [496, 534, 539], "github": [3, 135, 178, 179, 189, 210, 228, 229, 232, 233, 235, 263, 443, 482, 496, 499, 532, 539, 540, 543, 555], "give": [156, 501, 559], "given": [1, 3, 30, 52, 53, 55, 89, 90, 101, 133, 141, 145, 152, 195, 226, 231, 263, 325, 326, 328, 393, 402, 410, 413, 417, 431, 437, 445, 453, 457, 483, 487, 502, 549, 557, 558], "global": [100, 176, 196, 281, 390, 471, 482, 483, 484, 497, 543, 549, 559], "global_config": 193, "global_st": 471, "global_step": 181, "globalaveragepool": 14, "globalaveragepooloper": 14, "glorot_uniform": [293, 294, 295, 299], "glue": [228, 235, 542, 543], "gluon": [1, 236, 263, 545], "glx": 534, "gm": 410, "go": [535, 554, 558], "goal": [151, 236, 263, 487, 493, 501, 528, 548, 551, 559], "goe": 477, "good": [484, 495, 551, 559], "googl": [479, 499, 527, 544, 550], "googlenet": 560, "got": [133, 386, 501, 534], "gp": 267, "gpt": [480, 499, 536, 541, 549, 557], "gpt2": 560, "gptq": [31, 393, 432, 435, 441, 443, 446, 483, 489, 493, 494, 499, 527, 541, 552, 554], "gptq_arg": [482, 554], "gptq_config": 554, "gptq_config_path": 554, "gptq_entri": 441, "gptq_g128asym": 554, "gptq_g32asym": 554, "gptq_g32asym_disable_last_matmul": 554, "gptq_quantiz": 31, "gptq_related_block": 424, "gptqconfig": [441, 443, 457, 482, 487, 494], "gptquantiz": 424, "gpu": [74, 75, 82, 140, 196, 347, 354, 400, 417, 447, 453, 482, 486, 525, 538, 543, 544, 551, 552], "gracefulli": 495, "grad": [183, 188], "gradient": [170, 443, 482, 493, 499, 538, 543, 549, 550, 560], "gradient_accumulate_step": [422, 443, 482], "gradient_accumulation_step": 543, "gradientcriterion": 170, "gradual": [191, 549], "grain": [187, 483, 549, 550, 559], "gram": 229, "granular": [293, 294, 295, 298, 299, 413, 478, 493, 500, 501, 502, 535, 538, 546, 551, 557], "graph": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 115, 117, 121, 124, 127, 128, 130, 131, 132, 133, 174, 209, 237, 244, 262, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 371, 373, 377, 380, 381, 383, 384, 385, 386, 391, 410, 446, 476, 481, 493, 497, 500, 531, 537, 545, 551, 552, 553], "graph_bas": [72, 345], "graph_convert": [96, 362], "graph_converter_without_calib": 96, "graph_cse_optim": [61, 334], "graph_def": [39, 125, 126, 133, 236, 244, 262, 263, 284, 287, 312, 386, 391, 463], "graph_def_sess": [244, 391], "graph_modul": 439, "graph_nam": 87, "graph_node_name_map": 133, "graph_optimization_level": [196, 551], "graph_output": 90, "graph_rewrit": [96, 362], "graph_sess": [244, 391], "graph_transform_bas": [130, 383], "graph_util": [96, 362], "graphanalyz": [95, 361], "graphconvert": [33, 307], "graphconverterwithoutcalib": 34, "graphcseoptim": [59, 332], "graphdef": [59, 133, 244, 262, 332, 386, 391, 545], "graphfoldconstantoptim": [48, 321], "graphmodel": 410, "graphmodul": [145, 410, 439, 497, 553], "graphrewriterbas": [71, 344], "graphrewriterhelp": [95, 361], "graphtrac": [417, 437], "graphtransform": [129, 382], "graphtransformbas": [129, 382], "grappler": [60, 333, 535], "grappler_optim": 535, "grappler_pass": [61, 334], "grappleroptim": [60, 333], "greater": [133, 392, 471, 486, 549, 559], "greatest": 559, "greatli": [482, 552, 554], "grei": [482, 552], "grid": [196, 549], "ground": [232, 233], "ground_truth": [232, 233], "groundtruth": [196, 231], "groundtruth_box": 231, "groundtruth_boxes_list": 231, "groundtruth_class": 231, "groundtruth_classes_list": 231, "groundtruth_dict": 231, "groundtruth_is_crowd": 231, "groundtruth_mask": 231, "group": [31, 190, 293, 430, 437, 482, 493, 499, 538, 549, 554, 558, 559, 560], "group_dim": [443, 482, 554], "group_norm": 533, "group_siz": [31, 142, 145, 281, 430, 433, 437, 443, 457, 482, 487, 554], "grouplasso": 190, "groupnorm": 557, "grow": [482, 493, 554], "grown": 549, "growth": [478, 479, 543, 544, 546, 549], "gt": [480, 482, 557, 558], "guangxuan": [482, 493, 554, 557], "guarante": [196, 543], "guess_output_rank": 30, "gui": [538, 549], "guid": [210, 479, 486, 497, 499, 527, 539], "guidelin": [498, 499], "gz": 212, "h": [31, 196, 226, 531, 558], "h384": 560, "h5": 545, "ha": [52, 53, 55, 59, 140, 180, 181, 228, 282, 325, 326, 328, 332, 392, 400, 408, 424, 447, 479, 484, 486, 493, 496, 500, 501, 502, 528, 533, 538, 543, 544, 549, 551, 553, 556, 557, 559], "habana": [451, 453, 477, 499, 539], "habana_visible_devic": 499, "habanalab": 499, "hack": 228, "haihao": [540, 549], "half": [403, 405, 410, 443, 479, 482, 544], "half_away_from_zero": [293, 294, 295, 298, 299], "half_precision_convert": 404, "half_precision_rewrit": 411, "halfprecisionconvert": 403, "halfprecisionmodulewrapp": 405, "hand": [483, 486], "handl": [46, 133, 149, 159, 319, 386, 397, 417, 427, 468, 497, 498, 527, 528, 557], "handler": [402, 457, 471, 559], "hanj": 3, "hanwen": 540, "harass": 495, "hard": [196, 528], "hardswish": 533, "hardtanh": 557, "hardwar": [161, 453, 478, 481, 489, 499, 500, 538, 543, 546, 549, 550], "harm": 495, "harmon": [233, 235], "has_zp": 31, "hasattr": 494, "hassoun": 549, "have": [3, 59, 68, 126, 133, 140, 171, 175, 177, 184, 208, 228, 231, 235, 263, 281, 282, 287, 332, 341, 386, 400, 416, 417, 421, 453, 478, 479, 480, 482, 487, 493, 494, 495, 496, 501, 502, 527, 528, 531, 535, 540, 542, 543, 544, 546, 547, 549, 551, 552, 554, 557, 559], "haven": 549, "hawq": [135, 270, 559], "hawq_metr": 136, "hawq_top": 135, "hawq_v2": [196, 271], "hawq_v2_loss": 559, "hawq_v2tunestrategi": 270, "hbm": 539, "he": 500, "head": [172, 174, 178, 185, 193, 482, 549, 560], "head_mask": 185, "header": [161, 471, 534], "heavi": [482, 530], "height": [180, 222, 226, 531, 558], "helloworld": [544, 558], "help": [145, 167, 437, 475, 487, 493, 527, 541, 545, 554, 559], "helper": [30, 95, 101, 133, 145, 210, 211, 212, 225, 244, 361, 386, 391, 394, 395, 396, 421, 462, 463, 464, 469], "here": [231, 282, 477, 480, 481, 482, 485, 486, 489, 493, 494, 501, 531, 532, 533, 535, 541, 542, 551, 555, 556, 557, 560], "herebi": 557, "herlper": [124, 380], "hesit": 549, "hessian": [31, 135, 270, 482, 534, 554, 559], "hessian_trac": 135, "hessiantrac": 135, "heterogen": 550, "hf": [141, 435, 446, 453, 489, 494, 541, 557], "hicham": 482, "hidden": [175, 180, 500], "high": [30, 213, 214, 388, 477, 486, 539, 550, 559], "higher": [152, 196, 199, 200, 236, 263, 447, 454, 477, 482, 489, 493, 497, 533, 542, 549, 551, 554, 556], "higher_is_bett": [196, 235, 263, 559], "highest": 559, "highli": [482, 550, 554], "highlight": 497, "hint": [471, 534], "histogram": [3, 392, 458, 471], "histogramcollector": 3, "histori": [196, 470, 471, 559], "history_cfg": 470, "hoc": 228, "hold": [231, 267], "holder": 217, "hook": [135, 163, 167, 185, 402, 460, 530, 543, 549, 557], "hope": 533, "horizont": [226, 558], "horovod": 531, "host": [499, 531], "hostconst": [82, 354], "hour": 559, "how": [31, 140, 163, 170, 176, 182, 183, 188, 196, 226, 400, 437, 453, 475, 479, 481, 482, 483, 484, 485, 486, 493, 494, 496, 497, 498, 500, 528, 530, 531, 537, 542, 543, 549, 550, 551, 557, 558, 559], "howev": [140, 400, 482, 489, 493, 549, 554, 557], "howpublish": 540, "hp_dtype": [443, 477], "hpex": 451, "hpo": [199, 549], "hpoconfig": 196, "hpu": [394, 395, 433, 446, 447, 449, 451, 453, 477, 483], "hpu_acceler": 447, "hpuweightonlylinear": 433, "hqq": [432, 443, 483, 499], "hqq_arg": 482, "hqq_blog": [443, 482], "hqq_entri": 441, "hqqconfig": [441, 443, 482], "hqqlinear": [427, 431], "hqqmodul": 426, "hqqmoduleconfig": 426, "hqqtensorhandl": 427, "hqquantiz": 431, "hqt": 477, "hqt_output": [443, 477], "hroughput": 488, "ht": 560, "html": [497, 499, 501, 526, 531, 538, 539, 551], "htmllabel": 559, "http": [3, 135, 170, 178, 179, 188, 189, 210, 212, 228, 229, 231, 232, 233, 235, 263, 424, 443, 482, 497, 499, 539, 540, 543, 549, 555], "hub": [141, 435, 446, 453, 499, 532], "hue": 558, "hug": [141, 453, 494, 499, 550], "huge": [530, 549, 552], "hugginfac": [435, 446], "huggingfac": [174, 185, 210, 435, 446, 467, 478, 499, 532, 546, 557, 560], "huggingface_model": 189, "human": [154, 559], "hvd": [235, 531], "hw": 477, "hw_aligned_single_scal": 477, "hybirdblock": [236, 263], "hybrid": [489, 494], "hybridblock": 545, "hyper": [168, 482], "hyperparamet": [196, 493, 556, 557, 559], "i": [1, 30, 31, 33, 34, 36, 39, 40, 45, 49, 55, 67, 70, 90, 117, 128, 133, 135, 138, 140, 144, 145, 150, 151, 153, 156, 161, 163, 166, 167, 170, 174, 175, 181, 186, 187, 188, 189, 190, 192, 193, 196, 199, 200, 201, 208, 209, 210, 211, 212, 213, 214, 217, 219, 222, 226, 228, 231, 233, 235, 236, 246, 250, 251, 254, 263, 268, 273, 281, 282, 307, 309, 312, 313, 318, 322, 328, 340, 343, 373, 381, 386, 388, 392, 395, 400, 401, 410, 412, 413, 417, 421, 424, 430, 431, 435, 437, 439, 443, 445, 446, 447, 449, 451, 453, 454, 457, 467, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 505, 511, 514, 517, 525, 526, 527, 528, 530, 531, 533, 534, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560], "ic": [539, 550], "id": [151, 225, 228, 230, 231, 232, 233, 542, 556, 559], "idea": [493, 499, 549, 557, 559], "ideal": 479, "ident": [59, 65, 175, 332, 338, 495], "identifi": [52, 53, 55, 140, 231, 244, 325, 326, 328, 391, 400, 487, 549, 554], "idx1": 212, "idx3": 212, "ieee": [135, 479, 493, 544, 557], "ignor": [471, 482, 493, 526, 554, 557, 559], "ignore_attr": 471, "ignore_kei": 471, "ii": 559, "illinoi": 3, "illustr": [482, 501, 502, 530, 559], "imag": [211, 212, 215, 217, 222, 226, 231, 422, 479, 493, 531, 533, 549, 557, 558, 560], "image_format": 217, "image_height": 231, "image_id": [231, 542], "image_list": 215, "image_processor": [422, 443], "image_tensor": 543, "image_width": 231, "imageclassifi": 212, "imagefold": [212, 531, 543], "imagenet": [212, 215, 222, 484, 543, 549, 558, 560], "imagenet_dataset": 216, "imagenet_transform": 223, "imagenetraw": 215, "imagerecord": 531, "imageri": 495, "img": 499, "img1": 215, "img2": 215, "img_dir": 211, "imgx": 215, "iml": 550, "immedi": 549, "impact": [270, 549, 555, 559], "imper": 497, "implement": [95, 128, 132, 140, 199, 200, 205, 208, 209, 210, 212, 228, 236, 246, 263, 270, 361, 381, 385, 393, 395, 400, 454, 482, 494, 502, 528, 542, 543, 549, 551, 554, 555, 559], "implicitli": [140, 156, 400], "import": [133, 151, 153, 161, 196, 236, 246, 263, 282, 386, 435, 446, 451, 454, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 493, 494, 497, 499, 502, 525, 528, 530, 531, 533, 536, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 558, 559], "importerror": [138, 401, 534], "impract": 482, "improv": [187, 479, 481, 482, 493, 494, 496, 499, 526, 527, 543, 549, 550, 551, 553, 554, 559, 560], "in_featur": [407, 427, 433], "in_graph": [133, 386], "in_graph_is_binari": [133, 386], "in_mp": 30, "inappropri": 495, "inc": [226, 302, 306, 433, 435, 446, 486, 487, 495, 501, 541, 550, 555, 559], "inc_model": [533, 545], "inc_target_devic": [447, 483, 494], "incbench": 488, "incept": 560, "incid": 495, "incit": [480, 557], "includ": [138, 164, 170, 174, 176, 190, 192, 196, 210, 212, 219, 226, 282, 393, 401, 422, 435, 441, 446, 453, 471, 477, 482, 483, 486, 487, 489, 494, 495, 500, 501, 502, 528, 539, 540, 541, 542, 543, 549, 551, 553, 554, 559], "include_lay": 458, "include_nod": 1, "include_tensors_kl": 1, "include_tensors_minmax": 1, "inclus": 495, "incompat": 534, "incorpor": [482, 501, 502, 530, 549, 559], "incorrect": [140, 400], "incquantizationconfigmixin": 457, "increas": [196, 478, 482, 529, 534, 538, 546, 554, 559], "increasingli": 549, "increment": 559, "incub": 3, "incur": [478, 546], "incweightonlylinear": 433, "independ": [185, 258, 262, 502], "index": [52, 53, 55, 90, 151, 193, 196, 204, 208, 212, 325, 326, 328, 388, 453, 471, 493, 499, 539, 542, 554, 557], "indexdataset": 208, "indexerror": [138, 401], "indexfetch": [204, 388], "indic": [140, 152, 163, 196, 204, 208, 210, 231, 388, 400, 413, 430, 447, 486, 497, 528, 534], "indicated_lay": 402, "individu": [126, 176, 258, 262, 287, 493, 495, 549, 557], "industri": [542, 550], "infer": [1, 30, 90, 125, 145, 174, 244, 246, 263, 284, 302, 306, 391, 421, 437, 449, 454, 479, 480, 481, 482, 485, 486, 493, 494, 499, 500, 501, 526, 530, 536, 543, 544, 547, 549, 550, 551, 554, 557, 559], "infer_onnx_shape_dtyp": 90, "infer_shap": 30, "inferenc": [478, 546], "inference_dtyp": 449, "influenc": [145, 549], "info": [30, 145, 154, 161, 178, 179, 193, 224, 240, 392, 416, 417, 421, 445, 453, 467, 468, 471, 497, 527, 545], "inform": [1, 135, 154, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 199, 200, 235, 390, 430, 471, 477, 478, 480, 482, 486, 488, 489, 495, 496, 498, 499, 500, 501, 502, 503, 505, 511, 514, 517, 526, 527, 535, 543, 545, 546, 549, 553, 554, 555, 557, 560, 561], "infrastructur": 529, "ingest": 231, "inherit": [163, 164, 186, 187, 191, 207, 226, 393, 394, 500, 501], "init": [0, 4, 29, 148, 165, 171, 173, 194, 542, 559], "init_alpha": [417, 443], "init_quantize_config": 101, "init_tun": 153, "initi": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 26, 29, 30, 31, 90, 101, 133, 140, 153, 164, 181, 199, 200, 207, 210, 263, 279, 283, 286, 288, 292, 293, 294, 295, 296, 297, 298, 299, 301, 386, 400, 404, 413, 453, 454, 483, 486, 493, 502, 542, 549, 551, 557, 559], "initial_op_tuning_cfg": 278, "initial_tuning_cfg_with_quant_mod": 279, "initialize_int8_avgpool": 298, "initialize_int8_conv2d": 293, "initialize_int8_dens": 294, "initialize_int8_depthwise_conv2d": 295, "initialize_int8_maxpool": 298, "initialize_int8_separable_conv2d": 299, "initialize_name_count": 90, "inject": [44, 317, 543], "injectdummybiasaddoptim": [44, 317], "inlin": [133, 386], "inner": 453, "innov": 550, "inplac": [29, 416, 417, 445, 483, 494], "input": [1, 2, 29, 30, 31, 39, 45, 49, 52, 53, 55, 56, 57, 59, 67, 68, 70, 71, 90, 94, 95, 101, 107, 126, 133, 134, 142, 144, 145, 149, 154, 174, 175, 193, 196, 199, 200, 210, 211, 212, 214, 222, 225, 226, 235, 236, 240, 244, 263, 287, 312, 318, 322, 325, 326, 328, 329, 330, 332, 340, 341, 343, 344, 360, 361, 386, 388, 391, 392, 412, 415, 417, 421, 429, 433, 437, 439, 445, 449, 453, 454, 462, 463, 464, 467, 470, 471, 476, 481, 482, 483, 493, 500, 501, 525, 526, 528, 530, 531, 533, 534, 535, 537, 542, 543, 544, 545, 549, 551, 554, 557, 558], "input2tupl": 145, "input_data": [29, 528], "input_desc": 1, "input_dtyp": 90, "input_fil": 226, "input_fn": [133, 244, 391], "input_func": [145, 437], "input_graph": [116, 121, 128, 259, 262, 372, 377, 381, 500], "input_graph_def": [52, 53, 55, 325, 326, 328], "input_id": [210, 226, 494, 543], "input_mask": [226, 543], "input_max": 417, "input_max_ab": 417, "input_min": 417, "input_minmax": 417, "input_model": 545, "input_model_tensor": 471, "input_nam": [52, 53, 87, 127, 196, 244, 325, 326, 391, 463, 464, 533], "input_name_to_nod": 462, "input_node_map": [52, 53, 325, 326], "input_node_nam": [69, 116, 121, 133, 342, 372, 377, 386], "input_output_nam": [60, 333], "input_pb": [129, 131, 132, 382, 384, 385], "input_scal": [142, 402, 417, 433], "input_shap": [90, 214, 388], "input_tensor": [133, 244, 386, 391], "input_tensor_data": 472, "input_tensor_ids_op_nam": [145, 421], "input_tensor_nam": [133, 244, 386, 391], "input_valu": [145, 437], "inputbatch": 226, "inputcapturemodul": 417, "inputfeatur": [210, 226], "inputs_as_nchw": [127, 463], "insecur": [140, 400], "insensit": 447, "insert": [62, 90, 92, 94, 98, 131, 149, 289, 335, 358, 360, 384, 417, 437, 445, 481, 482, 483, 485, 493, 497, 501, 528, 538, 543, 549, 551, 553, 554, 557], "insert_log": [130, 383], "insert_newlin": 471, "insert_print_nod": [61, 334], "insert_qdq_pattern": [91, 357], "insertlog": [131, 384], "insertprintminmaxnod": [62, 335], "inset": 543, "insid": [231, 482, 530, 534, 549, 552, 559], "insight": [550, 555, 559], "inspect": 555, "inspect_tensor": 500, "inspect_typ": 500, "inspir": [482, 554], "instal": [392, 486, 494, 531, 534, 536, 561], "instanc": [100, 101, 151, 154, 196, 199, 200, 232, 233, 235, 236, 263, 267, 281, 413, 454, 471, 482, 488, 495, 496, 497, 500, 525, 536, 543, 554, 559, 560], "instance_index": 154, "instance_norm": 533, "instancenorm": [53, 326, 557], "instances_val2017": 211, "instanti": 548, "instead": [196, 209, 471, 481, 549, 554], "institut": 212, "instruct": [479, 480, 493, 494, 501, 502, 539, 544, 549, 550, 551, 557], "insuffici": 488, "insult": 495, "int": [1, 3, 29, 30, 31, 90, 125, 133, 143, 145, 152, 156, 161, 172, 196, 209, 210, 211, 222, 226, 229, 231, 235, 252, 258, 262, 281, 282, 284, 285, 289, 302, 303, 306, 386, 408, 417, 421, 422, 427, 429, 430, 433, 437, 443, 448, 449, 453, 457, 463, 464, 467, 471, 482, 486, 527, 528, 542, 543, 554, 558], "int32": [433, 467, 482, 554], "int4": [493, 499, 541, 551], "int8": [5, 6, 30, 31, 72, 108, 109, 110, 116, 118, 119, 120, 121, 128, 133, 150, 151, 196, 222, 279, 281, 293, 294, 295, 298, 299, 300, 304, 345, 364, 365, 366, 372, 374, 375, 376, 377, 381, 413, 437, 443, 446, 462, 463, 464, 470, 471, 477, 478, 480, 482, 483, 484, 486, 493, 496, 497, 500, 501, 502, 525, 530, 535, 541, 543, 544, 546, 550, 551, 553, 554, 555, 556, 557, 558], "int8_conv_config": 501, "int8_model": [463, 464], "int8_model_path": 552, "int8_node_name_revers": 133, "int8_onnx_config": [196, 533], "int8_sequ": [33, 307], "int8staticquantconfig": 443, "int_label": 542, "int_max": 30, "integ": [163, 180, 181, 196, 231, 235, 282, 453, 480, 482, 485, 493, 500, 502, 526, 551, 554, 557, 559], "integerop": 560, "integr": [133, 164, 386, 479, 483, 486, 493, 500, 543, 554], "intel": [154, 162, 166, 178, 179, 189, 227, 234, 235, 247, 263, 271, 277, 291, 303, 304, 305, 306, 392, 393, 398, 440, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 455, 457, 461, 473, 475, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 493, 495, 496, 498, 500, 501, 502, 526, 529, 530, 532, 533, 534, 535, 536, 540, 541, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 557, 559, 560], "intel_extension_for_pytorch": [451, 481, 494], "intelcaff": 550, "intellig": 550, "intelon": 550, "inteltensorflow": [215, 217], "intend": 496, "inter": 196, "inter_area": 222, "inter_num_of_thread": [196, 258, 262, 543], "inter_pol": 222, "interact": [499, 556], "interest": [495, 499], "interfac": [71, 98, 154, 302, 344, 391, 393, 396, 460, 479, 481, 483, 486, 493, 538, 543, 551, 555], "interleav": 211, "intermedi": [30, 135, 164, 196, 493, 497, 538, 551], "intermediatelayersknowledgedistillationloss": 164, "intermediatelayersknowledgedistillationlossconfig": 196, "intern": [135, 208, 279, 388, 477, 528, 542, 549], "internal_pattern": 279, "internet": 212, "interpol": [187, 226, 542, 549, 558], "intersect": [235, 410, 500, 542], "interv": [187, 549], "intra": 196, "intra_num_of_thread": [196, 258, 262, 543], "introduc": [59, 332, 475, 482, 493, 500, 501, 502, 535, 543, 551, 554, 555, 557], "introduct": 475, "intuit": [482, 493, 554, 557], "inturn": 542, "inuput": 30, "invalid": 417, "invalid_lay": 176, "invent": [493, 551], "invers": [482, 554], "investig": [495, 527], "invok": [231, 501], "involv": 481, "io": [1, 140, 400, 443, 482, 499, 539], "iou": 235, "iou_thr": [231, 235, 542], "iou_typ": 231, "ipc": 499, "ipex": [145, 196, 415, 416, 417, 421, 441, 446, 451, 470, 479, 480, 494, 538, 541, 543, 544, 557], "ipex_config": [145, 417], "ipex_config_path": [145, 417, 421], "ipexmodel": 245, "ir_vers": 29, "is_asymmetr": 501, "is_b_transpos": 30, "is_ckpt_format": [133, 386], "is_dynam": 413, "is_fused_modul": 145, "is_glob": 176, "is_hpex_avail": 451, "is_imposs": 226, "is_int8_model": 470, "is_ipex_avail": 451, "is_ipex_import": 451, "is_large_model": 30, "is_leaf": 424, "is_list_or_tupl": 90, "is_measur": 246, "is_mllm": [422, 443], "is_model_quant": 1, "is_numba_avail": 451, "is_onnx_domain": 90, "is_optimum_avail": 451, "is_optimum_habana_avail": 451, "is_package_avail": 451, "is_perchannel": 501, "is_qat": 144, "is_saved_model_format": [133, 386], "is_subgraph": 87, "is_tbb_avail": 451, "is_transformers_import": 451, "isa": 479, "isiter": 1, "isn": [52, 53, 55, 325, 326, 328], "issu": [417, 493, 495, 496, 498, 499, 539, 551], "item": [30, 193, 196, 225, 279, 392, 471, 493, 526, 531, 549, 557, 559], "item_list": 30, "item_typ": 279, "itemstyl": 559, "iter": [1, 2, 90, 125, 133, 145, 151, 175, 181, 188, 191, 196, 199, 200, 204, 208, 212, 213, 236, 263, 284, 302, 306, 386, 388, 417, 421, 422, 429, 437, 443, 454, 457, 460, 482, 486, 487, 497, 500, 525, 528, 543, 549, 551, 557, 559], "iter_bar": 543, "iter_op": [133, 386], "iterabledataset": [208, 212], "iterablefetch": [204, 388], "iterablesampl": [208, 388], "iteration_list": 500, "iterativeschedul": 191, "iterator_sess_run": [133, 386], "itex": [32, 94, 196, 290, 360, 463, 486, 544, 551, 557], "itex_instal": 392, "itex_mod": [32, 33, 74, 92, 116, 121, 290, 307, 347, 358, 372, 377], "itex_qdq_mod": [56, 57, 329, 330], "itrex": [196, 422, 443, 480, 557], "its": [30, 45, 81, 133, 135, 174, 183, 186, 188, 193, 196, 206, 212, 226, 229, 230, 267, 318, 353, 395, 410, 412, 462, 479, 482, 487, 493, 495, 540, 542, 544, 549, 554, 556, 558, 559], "itself": 549, "j": [480, 493, 499, 541, 549, 557], "jan": 550, "jason": 557, "jbla": 31, "jeffrei": 526, "ji": [482, 493, 554], "jit": [174, 481, 557], "jitbasicsearch": 174, "jitter": 558, "john": [392, 471], "join": 499, "joint": 550, "jonathanhuang": 231, "journei": 550, "jpeg": 558, "jpg": [211, 215, 217, 499], "json": [145, 160, 211, 226, 415, 417, 421, 470, 482, 545, 554, 558], "json_file_path": [415, 470], "judg": 424, "juli": 550, "jun": 550, "june": [499, 550], "just": [82, 201, 224, 226, 246, 354, 388, 417, 481, 486, 493, 494, 534, 543, 548, 551, 557, 558, 559], "k": [235, 263, 542, 549], "k_block": 31, "kappa": 429, "keep": [140, 161, 185, 193, 268, 400, 497, 500, 527, 555], "keep_mask_lay": 176, "keepdim": [493, 557], "kei": [133, 135, 140, 141, 174, 185, 193, 196, 244, 282, 391, 392, 400, 402, 417, 437, 453, 458, 460, 471, 482, 493, 499, 501, 550, 554, 559], "kept": [180, 453], "kera": [55, 101, 166, 174, 193, 196, 212, 219, 239, 244, 288, 291, 303, 306, 328, 391, 392, 484, 486, 501, 528, 531, 545], "keras_model": 238, "keras_sess": [244, 391], "kerasadaptor": 289, "kerasbasepattern": 176, "kerasbaseprun": 181, "kerasbasicprun": 182, "kerasconfigconvert": 289, "kerasmodel": [239, 391], "keraspatternnxm": 180, "kerasqueri": 289, "kerassurgeri": 289, "kernel": [31, 149, 196, 482, 500, 501, 559], "kernel_constraint": [293, 294], "kernel_initi": [293, 294], "kernel_regular": [293, 294], "kernel_s": [293, 295, 299], "keutzer": 549, "key_layer_nam": 185, "keynot": 550, "keyword": [140, 196, 400, 417, 435, 446], "kim": 549, "kind": [145, 453, 543], "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 550, "kl": [1, 3, 196, 413, 417, 443, 458, 466, 501, 502, 526, 535, 543, 559], "kl_diverg": 465, "klcalibr": 3, "know": [527, 531, 555], "knowledg": [163, 164, 196, 485, 530, 532, 538, 543, 545], "knowledgedistillationframework": 164, "knowledgedistillationloss": [164, 543], "knowledgedistillationlossconfig": [196, 530, 543, 548], "known": [140, 267, 400, 477, 478, 534, 543, 546, 549, 551, 559], "kriz": 212, "kullback": 502, "kwarg": [2, 30, 90, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, 141, 145, 172, 196, 212, 224, 226, 235, 236, 237, 239, 241, 243, 244, 245, 263, 278, 280, 282, 293, 294, 295, 298, 299, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 378, 391, 395, 403, 422, 424, 433, 435, 437, 441, 443, 446, 449, 453, 454, 457, 467, 468, 470, 471, 528], "kwon": 549, "l": [482, 488, 526, 559], "l1": 196, "l12": 560, "l2": [196, 549], "l6": 560, "l954": 228, "l983": 228, "label": [196, 199, 200, 210, 212, 213, 214, 215, 218, 222, 226, 228, 230, 235, 236, 263, 388, 417, 454, 486, 497, 528, 542, 543, 551, 558], "label_fil": [210, 226, 558], "label_list": [210, 235], "label_map": 542, "label_shap": [214, 388], "label_shift": [222, 558], "labelbalancecocorawfilt": 218, "labelbalancecocorecordfilt": 218, "labelshift": [222, 558], "lack": [528, 534], "lake": [479, 539, 544, 550], "lambada": [480, 557], "lambada_openai": 541, "lambda": [140, 400, 552], "lamini": [480, 549, 557], "land": 550, "languag": [29, 149, 228, 417, 435, 446, 477, 478, 480, 482, 483, 485, 486, 493, 494, 495, 533, 546, 550, 552, 554, 557], "laplacian": 482, "larei": 549, "larg": [29, 30, 149, 417, 477, 478, 480, 482, 483, 485, 486, 493, 494, 528, 543, 546, 550, 552, 554, 557, 560], "larger": [152, 447, 482, 493, 501, 549, 554, 557], "lasso": [190, 538, 549], "lassounbalanc": 560, "last": [145, 170, 193, 196, 417, 477, 479, 480, 482, 528, 544, 551, 554, 557], "last_batch": [201, 203, 205, 209, 388, 528], "last_conv_or_matmul_quant": [196, 551], "latenc": [556, 559], "latency_pattern": 488, "later": [140, 149, 400, 417, 447, 476, 527], "latest": [479, 483, 499, 539, 550, 555], "latin1": [140, 400], "launch": [488, 544], "launcher": 530, "layer": [32, 101, 102, 103, 104, 106, 107, 137, 139, 141, 149, 164, 167, 172, 174, 175, 176, 180, 185, 193, 195, 196, 289, 290, 292, 392, 399, 402, 417, 424, 433, 453, 458, 460, 471, 475, 480, 481, 483, 493, 500, 501, 502, 530, 534, 538, 549, 554, 555], "layer1": [174, 196, 543, 549, 551], "layer2": [174, 543, 549, 551], "layer3": [543, 549], "layer_1": 175, "layer_2": 175, "layer_idx": 193, "layer_initi": 296, "layer_input": 193, "layer_map": [164, 196], "layer_nam": [196, 417, 549], "layer_norm": 533, "layer_tensor": 458, "layer_wis": [398, 470, 552], "layer_wise_qu": [136, 196, 552], "layerhistogramcollector": 458, "layernorm": [55, 328, 493, 557], "layerwisequ": 139, "layout": [39, 312], "layoutlmv3": 560, "lazi": [161, 471], "lazyimport": [161, 471], "ld_library_path": 534, "lead": [196, 479, 482, 486, 493, 527, 543, 544, 549, 554, 557], "leadership": 495, "leaky_relu": 533, "leakyrelu": [40, 313, 557], "learn": [475, 478, 479, 482, 483, 486, 493, 499, 500, 501, 528, 533, 537, 538, 539, 543, 544, 546, 549, 550, 551, 557, 559], "learning_r": [196, 543], "least": [189, 496, 543, 549, 559], "leav": 101, "lee": 549, "left": [222, 226, 493, 557, 558], "legal": [499, 561], "leibler": 502, "len": [135, 196, 226, 531, 558], "length": [185, 196, 210, 226, 231, 422, 453, 482, 493, 542, 550, 551, 554, 558], "less": [40, 133, 145, 196, 313, 392, 437, 471, 525, 543, 549], "let": [502, 535, 549], "level": [31, 156, 174, 268, 282, 468, 477, 478, 493, 495, 546, 557, 559], "levelwis": 174, "leverag": [60, 333, 467, 476, 477, 481, 484, 487, 493, 494, 533, 548, 551, 554, 559], "lib": 534, "libgl": 534, "libgl1": 534, "libglib2": 534, "librari": [162, 175, 227, 258, 473, 479, 486, 499, 539, 543, 544, 550, 551], "licens": 496, "lie": 526, "light": 530, "lightn": 499, "lightweight": [489, 549], "like": [59, 81, 83, 133, 140, 156, 174, 193, 196, 199, 200, 201, 212, 235, 244, 263, 332, 353, 355, 386, 388, 391, 400, 453, 454, 457, 479, 482, 486, 493, 496, 497, 499, 500, 501, 530, 538, 548, 549, 551, 554, 555, 557, 559], "limit": [138, 267, 401, 471, 478, 482, 483, 486, 499, 541, 546, 551, 554], "lin": [482, 493, 554], "linalg": 534, "linalgerror": 534, "line": [501, 527, 531, 538], "linear": [30, 142, 145, 149, 172, 174, 175, 180, 185, 193, 195, 196, 395, 396, 407, 417, 427, 431, 433, 437, 477, 480, 481, 482, 493, 494, 497, 533, 543, 549, 554, 557, 559], "linear2linearsearch": 174, "linear_lay": 185, "linear_pattern": 175, "linearcompress": 175, "linearcompressioniter": 175, "linearli": 30, "link": [196, 210, 235, 263, 477, 483, 494, 526, 533, 554, 560], "linkedin": 550, "linux": [154, 488, 489, 494, 525, 534], "list": [1, 29, 30, 31, 39, 90, 125, 133, 135, 143, 145, 151, 152, 153, 154, 156, 174, 175, 180, 185, 189, 193, 195, 196, 199, 200, 204, 210, 222, 226, 228, 229, 231, 232, 233, 235, 236, 244, 250, 251, 254, 263, 278, 282, 284, 300, 303, 304, 306, 312, 386, 391, 395, 402, 410, 417, 421, 422, 424, 437, 442, 443, 453, 454, 458, 463, 464, 471, 477, 480, 483, 485, 486, 497, 499, 500, 533, 535, 539, 541, 543, 547, 549, 551, 553, 557, 559], "liter": 282, "littl": 494, "llama": [480, 489, 494, 499, 541, 549, 550, 552, 554, 557], "llama2": 499, "llamanorm": 557, "llm": [125, 126, 284, 287, 424, 443, 449, 477, 478, 480, 481, 482, 485, 493, 494, 536, 546, 549, 550, 552, 554, 557], "llm_weight_minmax": [92, 358], "lm": [482, 549, 560], "lm_head": [482, 549, 554], "lm_head_config": 482, "ln": 534, "lnl": 494, "load": [133, 138, 140, 141, 160, 210, 225, 226, 236, 244, 263, 386, 391, 399, 401, 402, 412, 415, 416, 417, 419, 421, 435, 446, 450, 453, 470, 471, 477, 486, 494, 501, 528, 534, 551, 552, 557], "load_and_cache_exampl": 210, "load_config_map": 160, "load_data_from_pkl": 471, "load_empty_model": [141, 453, 482, 489, 552], "load_huggingfac": [465, 543], "load_layer_wise_quantized_model": [141, 402], "load_modul": 402, "load_non_persistent_buff": 453, "load_saved_model": [244, 391], "load_state_dict": [140, 400], "load_tensor": [141, 402], "load_tensor_from_safetensor": 402, "load_tensor_from_safetensors_shard": 402, "load_tensor_from_shard": [141, 402], "load_valu": 402, "load_vocab": 225, "load_weight_onli": 470, "loadannot": 231, "loaded_model": [482, 494], "loader": [1, 125, 199, 200, 236, 263, 284, 302, 306, 435, 454, 467, 528, 551], "loc": [140, 400], "local": [176, 196, 435, 446, 471, 482, 484, 499, 534, 539, 549, 556], "local_config": [193, 196], "local_config_fil": [32, 289, 290], "locat": [140, 146, 193, 226, 400, 417, 481, 486, 531, 551, 555, 558], "lock": [186, 538, 548, 549], "log": [131, 151, 159, 161, 174, 250, 251, 254, 384, 397, 417, 468, 488, 497, 556, 559], "log2": [478, 546], "log_fil": [151, 257, 261], "log_interv": 531, "log_process": 161, "log_quantizable_layers_per_transform": 424, "logfile_dict": 154, "logger": [161, 458, 465, 471], "logic": [425, 429, 447, 483], "logical_cpu": 154, "login": 556, "loglevel": 559, "logo": 540, "long": [226, 482, 527, 534, 554, 558], "long_str": 527, "longer": [210, 226, 422, 489, 558], "longest": [226, 558], "look": [133, 185, 485, 500, 502, 535, 542, 557], "lookup": 174, "loop": [454, 497, 501, 502, 535, 556, 559], "loss": [29, 153, 164, 196, 235, 454, 479, 481, 482, 486, 493, 526, 530, 531, 532, 541, 542, 543, 544, 548, 549, 550, 551, 554, 557, 559], "loss_func": [171, 189], "loss_sum": 543, "loss_typ": [164, 196, 543], "loss_weight": [164, 196, 543], "lossi": [493, 551], "lot": [493, 497, 557], "low": [30, 199, 200, 213, 214, 236, 388, 477, 479, 482, 487, 493, 494, 500, 501, 525, 526, 531, 543, 544, 550, 551, 554, 557, 559], "low_cpu_mem_usag": 422, "low_gpu_mem_usag": [422, 443, 482], "low_memory_usag": 196, "lower": [225, 226, 233, 268, 417, 476, 477, 478, 481, 486, 493, 530, 546, 549, 550, 551, 557, 558, 559], "lowerbitssampl": 278, "lowercas": 210, "lowest": [549, 559], "lp_norm": 429, "lpot": [550, 555], "lr": [196, 422, 443, 457, 482, 531, 543], "lr_schedul": [422, 443, 482, 543, 549], "lstm": 16, "lstmoper": 17, "lt": 560, "lvwerra": 560, "lwq": 482, "m": [30, 135, 178, 179, 196, 417, 437, 488, 496, 539, 549, 560], "machin": [154, 228, 482, 486, 489, 533, 539, 550, 557], "maco": 539, "made": [270, 493, 500, 551, 555, 559], "mae": [235, 542], "magnitud": [170, 192, 196, 235, 417, 538, 549], "magnitude_progress": 196, "magnitudecriterion": [170, 192], "mahonei": 549, "mai": [3, 133, 138, 140, 282, 386, 400, 401, 477, 479, 482, 483, 485, 493, 494, 495, 496, 499, 501, 526, 527, 533, 534, 540, 544, 550, 551, 554, 557, 559], "mail": 495, "main": [3, 166, 185, 189, 302, 303, 306, 424, 441, 442, 445, 447, 482, 483, 484, 486, 488, 489, 493, 497, 528, 531, 543, 549, 551, 554], "mainli": [163, 191, 493, 499, 536, 543, 549, 551], "mainstream": [475, 499], "maintain": [235, 481, 482, 486, 493, 495, 496, 527, 545, 549, 554, 555], "mainten": 500, "major": [493, 537, 551, 557], "make": [30, 90, 128, 150, 176, 181, 189, 191, 208, 381, 395, 471, 479, 480, 482, 485, 493, 495, 499, 500, 501, 525, 527, 528, 535, 542, 543, 549, 551, 552, 553, 554, 556, 557, 559], "make_dquant_nod": 30, "make_matmul_weight_only_nod": 31, "make_modul": 1, "make_nam": 90, "make_nc_model": 1, "make_nod": 30, "make_onnx_inputs_output": 90, "make_onnx_shap": 90, "make_quant_nod": 30, "make_sub_graph": 29, "make_symbol_block": 1, "makeiter": [133, 386], "male": 471, "malici": [140, 400], "manag": [152, 454, 460, 543], "mandatori": [199, 200, 263, 543], "mani": [31, 235, 263, 437, 482, 486, 493, 527, 528, 539, 554, 559], "manipul": [87, 88], "manner": [528, 545], "manual": [212, 549], "mao": 526, "map": [1, 30, 90, 133, 140, 145, 160, 196, 226, 230, 232, 233, 235, 400, 431, 445, 453, 462, 464, 482, 493, 499, 527, 531, 542, 543, 549, 551, 554], "map_kei": 235, "map_loc": [140, 400], "map_numpy_to_onnx_dtyp": 90, "map_onnx_to_numpy_typ": 90, "map_point": [231, 235, 542], "map_tensorflow_dtyp": 90, "mar": 550, "mark": 526, "marketplac": [499, 550], "mask": [170, 176, 178, 181, 183, 187, 188, 210, 231, 549, 560], "mask_padding_with_zero": 210, "massiv": 549, "master": [3, 178, 179, 189, 228, 229, 232, 233, 235, 263, 543, 559], "match": [63, 87, 140, 174, 231, 232, 336, 400, 410, 453, 481, 486, 488, 499, 554], "match_datatype_pattern": 145, "math": [51, 324, 493, 551], "mathemat": [480, 485, 493, 557], "matmul": [16, 31, 38, 44, 50, 58, 79, 94, 113, 122, 180, 196, 304, 311, 317, 323, 331, 351, 360, 369, 378, 535, 554, 559], "matmul_weight_only_nod": 31, "matmulfpq4": 31, "matmulnbit": 31, "matmuloper": 18, "matric": [493, 557], "matrix": [31, 235, 263, 485, 493], "matter": [208, 553], "max": [30, 89, 128, 150, 196, 226, 232, 233, 267, 381, 417, 437, 443, 471, 478, 482, 486, 493, 499, 539, 543, 546, 549, 551, 554, 557, 558, 559], "max_answer_length": [226, 558], "max_dim": [226, 558], "max_filter_tensor": 471, "max_grad_norm": 543, "max_inclusive_opset_vers": 89, "max_input_chars_per_word": 225, "max_length": 210, "max_min_data": [74, 75, 347], "max_new_token": 494, "max_num_class": 231, "max_ord": 229, "max_output": 497, "max_query_length": [226, 558], "max_seq_length": [210, 226, 424, 558], "max_shard_s": 435, "max_sparsity_ratio_per_op": [176, 181, 196, 543, 549], "max_trial": [153, 196, 479, 487, 543, 559], "max_x": 417, "maxab": [443, 477], "maxabs_hw": [443, 477], "maxabs_hw_opt_weight": 477, "maxabs_pow2": 477, "maxim": [543, 549, 559], "maximum": [40, 153, 176, 181, 196, 210, 226, 229, 244, 267, 313, 391, 417, 429, 435, 482, 493, 502, 526, 543, 549, 551, 557, 558], "maxpool": [16, 114, 123, 298, 370, 379, 535], "maxpooling2d": 298, "maxpooloper": 19, "mbzuai": [480, 557], "mckinstri": 526, "md": [178, 179, 196, 235, 263], "md5": 212, "mean": [29, 31, 176, 185, 196, 222, 226, 233, 235, 272, 395, 417, 429, 435, 446, 477, 482, 484, 493, 497, 501, 502, 528, 531, 535, 542, 543, 549, 551, 552, 554, 557, 558, 559], "mean_valu": [222, 558], "meaning": [543, 548], "meanwhil": 552, "measur": [133, 236, 386, 443, 466, 477, 482, 486, 493, 500, 525, 536, 542, 543, 554, 559], "measure_exclud": [443, 477], "measure_on_hpu": 443, "mebibyt": 451, "mechan": [138, 170, 401, 475, 549, 556], "media": [495, 550], "median": [125, 284], "medium": [499, 550], "meet": [196, 202, 264, 266, 482, 484, 486, 487, 493, 497, 501, 547, 550, 551, 554, 559], "member": [495, 500], "memomeri": 139, "memori": [59, 145, 246, 332, 417, 437, 449, 451, 471, 477, 478, 479, 480, 482, 483, 485, 488, 493, 494, 526, 528, 530, 543, 544, 546, 547, 549, 551, 552, 554, 557, 559, 560], "mention": [482, 493, 549, 554], "merg": [93, 203, 279, 359, 388, 488, 559], "merge_duplicated_qdq": [91, 357], "mergeduplicatedqdqoptim": [93, 359], "mesa": 534, "messag": [90, 131, 384, 488, 496, 559], "met": [153, 487, 493, 535, 551], "meta": [81, 353, 430, 489, 494, 499, 541, 550], "meta_info": 430, "meta_op_optim": [80, 352], "metaclass": 275, "metadata": [140, 400], "metagraphdef": [244, 391], "metainfochangingmemopoptim": [81, 353], "metal": [499, 534, 539], "metaop": [81, 353], "meteor": 539, "method": [31, 126, 128, 138, 140, 145, 190, 196, 204, 208, 209, 210, 212, 219, 226, 279, 281, 287, 381, 393, 395, 396, 400, 401, 421, 435, 446, 460, 465, 467, 468, 477, 482, 483, 484, 486, 493, 497, 499, 526, 527, 528, 530, 542, 543, 548, 549, 551, 553, 554, 557, 558, 559], "meticul": [478, 546], "metric": [153, 163, 196, 199, 200, 227, 236, 263, 454, 460, 475, 485, 500, 501, 531, 543, 544, 551, 556, 557, 559, 560], "metric_cl": [235, 263, 543], "metric_criterion": 246, "metric_fn": [232, 233], "metric_max_over_ground_truth": [232, 233], "metric_registri": 235, "metric_typ": 235, "metric_weight": 246, "mha": [177, 184, 549], "mha_compress": 185, "mha_head_s": 185, "mha_modul": 185, "mha_nam": 185, "mha_scor": 185, "mha_spars": [172, 549], "mhacompress": 185, "mib": 451, "microcod": 560, "microsc": 483, "microsoft": [3, 478, 494, 499, 500, 546], "middl": [493, 557], "migacz": 526, "might": [193, 479, 497, 527, 559], "migrat": [475, 480, 485, 493, 557], "mimic": [493, 551], "min": [128, 150, 196, 381, 437, 471, 478, 482, 486, 493, 546, 549, 551, 554, 557, 558, 559], "min_dim": [226, 558], "min_filter_tensor": 471, "min_max": 429, "min_sparsity_ratio_per_op": [176, 196, 543, 549], "min_train_sampl": 196, "min_x": 417, "mini": [494, 560], "minilm": [550, 560], "minim": [128, 150, 267, 381, 477, 481, 482, 486, 493, 501, 502, 526, 532, 542, 543, 549, 551, 559], "minimum": [176, 196, 417, 429, 478, 502, 526, 543, 546, 549, 557, 559], "minmax": [1, 3, 304, 413, 417, 443, 481, 501, 502, 526, 535, 551], "minmax_file_path": 471, "minmax_lr": [422, 443, 457, 482], "minmaxcalibr": 3, "miou": 235, "misc": [138, 401, 540], "miss": [493, 549, 551], "mistral": 541, "mistralai": 541, "mitig": [482, 554], "mix": [134, 196, 236, 265, 279, 404, 441, 443, 475, 483, 499, 500, 506, 536, 538], "mix_precis": [196, 227, 282, 543, 544], "mixed_precis": [236, 398, 543], "mixed_precision_entri": 441, "mixed_precision_model": 134, "mixedprecis": [196, 543], "mixedprecisionconfig": [196, 236, 282, 441, 443, 479, 543, 544], "mixin": 457, "mixprecisionconfig": 441, "ml": 550, "mla": [500, 544, 551], "mleffici": 550, "mllm": 422, "mlp": [483, 549], "mlperf": [550, 560], "mm": 560, "mnist": [212, 531], "mnli": [210, 542, 560], "mobil": [543, 560], "mobilebert": [210, 560], "mobilenet": [533, 556, 560], "mobilenetv2": 560, "mobiusml": [443, 482], "mod": [394, 395, 431], "mod_dict": 443, "mod_extra_config": 395, "mode": [28, 29, 30, 95, 140, 157, 161, 219, 231, 244, 279, 361, 391, 395, 400, 408, 417, 441, 443, 445, 453, 470, 471, 477, 482, 483, 500, 501, 538, 551, 553, 554, 559], "model": [1, 2, 3, 16, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 101, 103, 125, 126, 127, 133, 134, 135, 139, 140, 141, 143, 144, 145, 149, 151, 153, 156, 162, 163, 171, 172, 174, 181, 182, 183, 186, 188, 189, 191, 193, 196, 199, 200, 206, 209, 210, 212, 226, 227, 235, 236, 246, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 281, 282, 284, 287, 289, 302, 303, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 386, 389, 391, 392, 393, 395, 400, 402, 410, 412, 415, 416, 417, 419, 421, 422, 424, 435, 436, 437, 439, 441, 442, 445, 446, 449, 453, 454, 455, 462, 463, 464, 467, 470, 471, 473, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 489, 493, 494, 496, 497, 500, 502, 506, 525, 526, 527, 528, 530, 531, 532, 536, 537, 538, 540, 542, 544, 547, 548, 550, 551, 555, 556, 558, 559], "model_attr": 156, "model_config": 395, "model_forward": [417, 437], "model_forward_per_sampl": 417, "model_info": 443, "model_level": 156, "model_loss": 559, "model_nam": [101, 196, 499], "model_name_or_path": [210, 435, 446, 494, 499, 543, 552], "model_origin": [196, 263, 553], "model_path": [125, 133, 284, 386, 424, 443, 482], "model_proto": 90, "model_slim": [171, 185], "model_slim_ffn2": 172, "model_slim_mha": 172, "model_state_dict_path": [482, 489], "model_typ": [210, 471], "model_wis": 543, "model_wrapp": [2, 136, 389], "modelproto": [31, 236, 462, 545], "models": [196, 246, 543, 547], "modelwisetuningsampl": 278, "modern": [482, 493, 554], "modif": [496, 500, 535], "modifi": [185, 212, 262, 281, 477, 497, 502, 531, 535, 549], "modified_pickl": [137, 399], "modul": [136, 137, 155, 158, 171, 177, 184, 399, 411, 414, 418, 428, 432, 438, 452, 475, 477, 479, 482, 483, 487, 494, 497, 499, 507, 527, 528, 536, 538, 542, 543, 545, 549, 553, 554], "module_debug_level1": 282, "module_hook_config": [145, 437], "module_nam": [141, 161, 170, 171, 181, 182, 183, 184, 186, 187, 188, 190, 192, 402, 453, 471], "module_name_list": [145, 437], "module_node_map": 464, "module_typ": 424, "module_wrapp": 404, "moduleextraconfig": 395, "modulefusedsdpa": 395, "modulelist": 424, "mold": 153, "momentum": [170, 538, 543, 549], "momentumbalanc": 560, "momentumunbalanc": 560, "monitor": [153, 445, 483], "more": [29, 133, 149, 156, 178, 179, 226, 386, 417, 443, 475, 477, 478, 479, 480, 482, 483, 486, 493, 494, 498, 499, 501, 526, 527, 531, 533, 534, 538, 539, 541, 543, 544, 546, 547, 548, 549, 553, 554, 557, 559, 560], "mosaicml": [480, 557], "mose": 228, "mosesdecod": 228, "mosh": 549, "most": [196, 235, 477, 479, 482, 486, 493, 543, 544, 549, 551, 554, 557, 559, 560], "mostli": 527, "motiv": 494, "move": [63, 140, 336, 400, 417, 437, 453, 482, 493, 497, 554, 555], "move_input_devic": [145, 453], "move_input_to_devic": [417, 437], "move_squeeze_after_relu": [61, 334], "movesqueezeafterreluoptim": [63, 336], "mp": 486, "mpi": 559, "mpirun": 559, "mpt": [480, 549, 557], "mrpc": [210, 235, 542, 549, 559, 560], "mscoco": 231, "mse": [31, 145, 196, 235, 263, 271, 471, 482, 493, 542, 554, 555], "mse_metric_gap": 471, "mse_v2": [196, 271], "mse_v2tunestrategi": 273, "mseloss": [493, 557], "msetunestrategi": 272, "msfp": [478, 546], "msft": 550, "msg": 468, "mt": 560, "mteval": 228, "mtl": 494, "much": [163, 170, 196, 226, 493, 557, 558], "mul": [40, 50, 51, 54, 149, 313, 323, 324, 327, 482, 533, 554, 557], "mullinear": [142, 433], "multi": [151, 154, 172, 174, 185, 231, 235, 263, 488, 528, 538, 543, 547, 549, 551, 559], "multi_object": 547, "multiclass": 542, "multilabel": 542, "multilingu": 560, "multimod": 453, "multiobject": 246, "multipl": [152, 166, 172, 197, 198, 202, 203, 210, 211, 213, 214, 215, 216, 217, 221, 223, 226, 236, 237, 238, 240, 246, 486, 525, 533, 536, 543, 548, 549, 556, 557, 559], "multipli": [3, 196, 476, 478, 482, 546, 554], "must": [226, 231, 457, 496, 497, 501, 525, 528, 539, 551, 558], "mx": [1, 406, 408, 443, 478, 483, 499, 536, 546], "mx_quant": 398, "mx_quant_entri": 441, "mx_spec": [407, 408], "mxfp4": [478, 546], "mxfp6": [478, 546], "mxfp8": [478, 546], "mxint8": [478, 546], "mxlinear": 407, "mxnet": [0, 1, 3, 196, 205, 209, 212, 215, 219, 226, 235, 236, 241, 263, 500, 501, 526, 528, 532, 535, 538, 543, 544, 545, 559], "mxnet_model": 238, "mxnetcifar10": 212, "mxnetcifar100": 212, "mxnetcropresizetransform": 226, "mxnetcroptoboundingbox": 226, "mxnetdataload": 205, "mxnetdataset": 212, "mxnetfashionmnist": 212, "mxnetfilt": 219, "mxnetimagefold": 212, "mxnetimagenetraw": 215, "mxnetmetr": 235, "mxnetmnist": 212, "mxnetmodel": 241, "mxnetnormalizetransform": 226, "mxnettransform": 226, "mxnettranspos": 226, "mxquantconfig": [441, 443, 478, 546], "mxquantiz": 407, "my": 496, "mydataload": [484, 486, 487], "n": [178, 179, 196, 211, 226, 229, 282, 493, 502, 527, 541, 549, 551, 557, 558], "n_best_siz": [226, 558], "n_bit": [493, 557], "n_block": [482, 554], "n_gpu": 543, "n_iter": 267, "n_pack": 448, "n_sampl": [31, 145, 417, 457, 482], "n_warmup": 267, "na": [196, 240, 486, 538, 560], "name": [1, 30, 39, 52, 53, 55, 89, 90, 95, 101, 125, 133, 135, 140, 141, 144, 145, 146, 151, 152, 153, 156, 160, 167, 170, 174, 176, 181, 184, 185, 189, 190, 191, 192, 193, 195, 196, 210, 211, 212, 215, 219, 224, 226, 230, 235, 240, 244, 246, 263, 279, 281, 284, 293, 294, 298, 312, 325, 326, 328, 361, 386, 391, 392, 394, 395, 396, 400, 402, 407, 416, 417, 421, 422, 424, 431, 437, 443, 445, 447, 449, 451, 453, 458, 460, 462, 463, 464, 471, 477, 478, 481, 482, 483, 484, 496, 497, 502, 527, 531, 533, 535, 540, 542, 543, 545, 546, 549, 551, 555, 556, 559, 560], "namecollector": 1, "named_paramet": 531, "namespac": 527, "namhoon": 549, "nan": [41, 314], "narrow": [478, 546], "narrow_rang": 98, "nasconfig": 196, "nation": [212, 495], "nativ": 502, "natur": [228, 482, 533], "nbest_predict": [226, 558], "nbit": 430, "nblock": [422, 443], "nbsp": 559, "nc": [556, 559], "nc_model": 1, "nc_resnet50_v1": 531, "nc_workspac": 196, "nchw": [39, 222, 312], "ncmodel": 1, "ndarrai": [1, 29, 30, 52, 53, 55, 226, 325, 326, 328, 448, 458, 534, 558], "ndarray_to_devic": 1, "nearest": [174, 226, 443, 482, 483, 493, 554, 558], "nearst": 31, "necessari": [30, 189, 495, 501, 545, 549, 556, 559], "necessarili": [138, 401], "need": [1, 29, 90, 94, 151, 156, 174, 189, 196, 199, 200, 201, 208, 209, 212, 219, 226, 235, 236, 246, 263, 272, 360, 388, 408, 415, 417, 435, 446, 454, 464, 470, 471, 482, 485, 487, 489, 493, 494, 497, 500, 527, 528, 531, 534, 538, 543, 549, 551, 552, 553, 554, 555, 557, 558, 559], "need_appli": [306, 445], "need_spac": 417, "neelnanda": [422, 457], "neither": 551, "neo": 536, "neox": 541, "nepoch": 543, "nest": [145, 392, 421, 471], "nesterov": 543, "net": [242, 392, 499], "netflix": 550, "nets_factori": 238, "network": [135, 170, 176, 177, 270, 443, 453, 478, 479, 493, 526, 530, 533, 543, 546, 550, 551, 557, 559], "neural": [1, 135, 151, 154, 162, 163, 166, 176, 177, 178, 179, 189, 196, 222, 223, 226, 227, 234, 235, 236, 240, 247, 263, 270, 271, 277, 291, 303, 304, 305, 306, 390, 393, 398, 440, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 455, 457, 461, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 493, 494, 496, 500, 501, 502, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 544, 545, 546, 547, 548, 550, 551, 554, 555, 557, 558, 559, 560], "neural_compressor": [476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 497, 499, 502, 525, 527, 528, 530, 531, 533, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 558, 559], "neurip": 550, "neuron": 549, "never": [140, 400, 559], "nevertheless": [478, 546], "new": [1, 3, 31, 133, 151, 201, 212, 226, 246, 386, 388, 393, 417, 437, 447, 457, 475, 479, 480, 481, 482, 493, 496, 501, 531, 543, 544, 549, 550, 551, 554, 555, 556, 558], "new_api": [33, 34, 56, 57, 62, 64, 77, 84, 116, 121, 128, 307, 329, 330, 335, 337, 349, 372, 377, 381], "new_dtyp": 30, "new_func": [133, 386], "new_graph_def": [133, 386], "new_in_featur": 448, "new_init": 31, "new_metr": 542, "new_modul": [141, 145, 402, 417, 437, 453], "new_quantized_nam": 30, "newapi": [79, 351], "newdataload": 528, "newli": [543, 549], "newlin": [233, 471], "newmetr": 542, "next": [45, 204, 282, 318, 388, 482, 493, 499, 501, 502, 528, 554, 559], "next_annotation_id": 231, "next_tune_cfg": 559, "nextplatform": 550, "nf4": [437, 482, 554], "nfl": 233, "ngram": [228, 542], "nhwc": [39, 222, 312], "ni_workload_nam": 196, "ninm": 177, "nll_loss": 531, "nlp": [189, 196, 479, 483, 486, 493, 549, 551], "nn": [141, 142, 145, 174, 175, 185, 195, 196, 236, 263, 395, 402, 412, 416, 417, 421, 424, 431, 433, 435, 437, 439, 441, 442, 445, 446, 449, 453, 464, 467, 470, 477, 482, 483, 493, 497, 543, 545, 554, 557], "nncf": 135, "no_absorb_lay": [145, 437], "node": [1, 29, 30, 31, 35, 39, 40, 41, 42, 45, 47, 49, 52, 53, 55, 59, 62, 65, 67, 68, 69, 83, 87, 88, 90, 95, 117, 125, 133, 154, 174, 244, 262, 284, 308, 312, 313, 314, 315, 318, 320, 322, 325, 326, 328, 332, 335, 338, 340, 341, 342, 355, 361, 373, 386, 391, 410, 417, 437, 447, 462, 464, 488, 500, 531, 552, 559, 560], "node1": 531, "node2": 531, "node_candidate_list": 410, "node_collector": 135, "node_def": [52, 53, 55, 325, 326, 328], "node_from_map": [52, 53, 55, 325, 326, 328], "node_index": 154, "node_list": 410, "node_map": [52, 53, 55, 325, 326, 328], "node_nam": [52, 53, 55, 133, 244, 252, 325, 326, 328, 391, 501], "node_name_from_input": [52, 53, 55, 325, 326, 328], "node_name_list": [131, 384], "node_op": 501, "node_set_from_user_config": 410, "nodedef": [52, 53, 55, 325, 326, 328], "non": [3, 453, 471, 477, 479, 482, 497, 554, 559], "non_persistent_buff": 453, "nondigit_punct_r": 228, "none": [1, 28, 30, 31, 32, 33, 34, 48, 74, 87, 89, 90, 95, 101, 127, 133, 135, 139, 140, 141, 142, 145, 151, 152, 153, 156, 161, 163, 164, 170, 171, 172, 174, 178, 189, 193, 196, 199, 200, 201, 203, 205, 208, 210, 211, 212, 213, 214, 215, 217, 222, 226, 231, 235, 236, 246, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 279, 282, 285, 289, 290, 293, 294, 295, 298, 299, 300, 302, 303, 304, 306, 307, 321, 347, 361, 386, 388, 392, 393, 394, 395, 400, 402, 407, 408, 409, 417, 421, 422, 424, 427, 430, 433, 435, 436, 437, 439, 442, 443, 445, 446, 449, 453, 454, 457, 458, 460, 463, 464, 467, 470, 471, 477, 478, 482, 483, 486, 488, 494, 499, 500, 501, 528, 542, 546, 551, 554, 558, 559], "nor": 551, "norm": [16, 482], "normal": [3, 20, 226, 233, 482, 493, 543, 547, 554, 557, 558], "normalfloat": [482, 554], "normalizationoper": 20, "normalize_answ": 233, "normalizetftransform": 226, "normalizetransform": 226, "not_use_best_ms": [422, 443, 482], "notat": [196, 471], "note": [40, 138, 153, 180, 231, 273, 313, 393, 401, 475, 476, 477, 479, 480, 481, 482, 485, 488, 493, 494, 499, 501, 502, 527, 528, 531, 533, 535, 536, 539, 541, 543, 549, 551, 554, 557, 559], "notebook": 475, "noteworthi": 526, "noth": [231, 559], "notic": [128, 150, 381, 479, 482, 540, 544, 555], "notimplementederror": 453, "nov": 550, "novel": 530, "now": [196, 226, 494, 497, 502, 531, 558, 559], "np": [30, 226, 267, 531, 557, 558, 559], "np_dtype": 90, "npu": [196, 551], "npy": 211, "npy_dir": 211, "npz": 212, "nr": 90, "nsampl": [422, 424, 443, 534, 554], "nsdf3": 212, "nuanc": 482, "num": [437, 471, 494], "num_beam": 494, "num_bin": [1, 3, 458], "num_bit": [31, 98, 142, 145, 417, 433, 493, 557], "num_c": 488, "num_class": 235, "num_cor": [210, 211, 215], "num_cores_on_numa": 488, "num_cores_per_inst": [154, 488], "num_correct": 235, "num_cpu": 154, "num_detect": [231, 235, 542, 543], "num_gt_box": 231, "num_i": 488, "num_inst": [154, 488], "num_of_inst": [151, 196, 525, 543], "num_of_process": 531, "num_quantized_bin": 3, "num_replica": 531, "num_sampl": 235, "num_train_epoch": [543, 549], "num_work": [201, 203, 205, 388, 528, 543, 551], "numa": [154, 488], "numa_index": 154, "numa_info": 154, "numa_node_index": 154, "numactl": [151, 154, 534], "numba": [448, 451], "number": [3, 31, 52, 53, 90, 125, 145, 152, 153, 161, 172, 178, 179, 196, 208, 211, 222, 226, 232, 233, 235, 258, 262, 267, 282, 284, 325, 326, 388, 417, 422, 430, 437, 447, 449, 460, 471, 476, 482, 487, 488, 493, 525, 528, 531, 534, 542, 549, 551, 554, 556, 557, 558, 559], "number_of_process": 559, "numer": [196, 235, 478, 479, 482, 486, 502, 544, 546, 550, 551, 554], "numpi": [29, 30, 52, 53, 55, 90, 133, 226, 231, 325, 326, 328, 448, 534, 557, 558], "nvidia": [499, 526, 538, 539, 560], "nxm": [177, 187, 196, 549], "o": [140, 282, 400, 499, 527, 539], "o0": [268, 559], "o1": 559, "obj": [1, 90, 171, 193, 209, 236, 246, 263, 449, 454, 460, 471], "obj1": 471, "obj2": 471, "obj_cl": 246, "obj_criterion": 246, "obj_weight": 246, "object": [1, 29, 30, 31, 59, 71, 90, 101, 117, 133, 134, 135, 138, 140, 144, 145, 151, 153, 160, 163, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 199, 200, 201, 210, 211, 212, 226, 227, 231, 235, 236, 244, 245, 258, 262, 263, 267, 281, 332, 344, 373, 386, 388, 391, 392, 400, 401, 403, 410, 413, 415, 417, 421, 437, 453, 454, 457, 460, 470, 471, 475, 481, 483, 486, 497, 501, 506, 525, 527, 528, 534, 542, 543, 545, 548, 549, 551, 558, 559, 560], "object_detect": [196, 231], "objective_cfg": 246, "objective_cl": 246, "objective_custom_registri": 246, "objective_registri": 246, "oblig": 495, "observ": [145, 421, 443, 445, 476, 477, 481, 482, 483, 502, 554, 556, 559], "observer_typ": 394, "observerbas": 394, "obstacl": [478, 546], "obtain": [172, 174, 183, 188, 190, 193, 493, 497, 501, 549, 556, 557, 559], "occupi": [478, 546], "occur": 481, "ocp": [478, 546], "oct": 550, "off": [3, 52, 53, 55, 325, 326, 328, 482, 493, 496, 554], "offens": 495, "offer": [478, 482, 486, 546], "offici": [133, 228, 232, 233, 386, 495, 557], "offlin": [471, 480, 485, 486, 493, 495, 543, 551, 557], "offset_height": [226, 558], "offset_width": [226, 558], "ofir": 549, "often": [193, 482, 528, 548, 549], "old": [392, 471, 480, 543, 555], "old_hist": [392, 471], "oliv": [499, 550], "omit": [477, 554], "omp": 494, "omp_num_thread": 489, "ompi_mca_btl_vader_single_copy_mechan": 499, "on_after_compute_loss": [454, 530, 543, 548], "on_after_optimizer_step": [543, 549], "on_before_optimizer_step": [454, 530, 543, 548, 549], "on_epoch_begin": [454, 460, 530, 543, 548], "on_epoch_end": [454, 460, 530, 543, 548], "on_step_begin": [454, 460, 530, 543, 548, 549], "on_step_end": [454, 460, 530, 543, 548], "on_train_begin": [454, 497, 530, 543, 548, 549, 551], "on_train_end": [454, 530, 543, 548, 549, 551], "onc": [133, 140, 166, 191, 264, 266, 386, 400, 486, 494, 501, 502, 528, 549, 550, 559, 560], "one": [31, 94, 95, 100, 140, 145, 151, 176, 180, 185, 188, 189, 191, 226, 228, 231, 235, 360, 361, 400, 417, 421, 437, 449, 479, 482, 483, 486, 487, 488, 493, 500, 526, 530, 531, 535, 538, 539, 542, 543, 544, 547, 548, 549, 551, 552, 554, 555, 557, 558, 559], "oneapi": [475, 479, 494, 539, 550], "onednn": [479, 486, 544, 551], "onednn_max_cpu_isa": 479, "ones": [140, 231, 400, 549], "oneshotschedul": 191, "onli": [29, 31, 39, 48, 55, 71, 94, 100, 128, 140, 149, 150, 151, 166, 171, 177, 184, 196, 210, 263, 273, 281, 282, 312, 321, 328, 344, 360, 381, 395, 400, 417, 432, 433, 435, 436, 437, 443, 445, 446, 464, 471, 475, 477, 479, 483, 487, 488, 494, 500, 501, 502, 525, 526, 527, 528, 531, 534, 535, 536, 541, 543, 544, 549, 550, 551, 552, 557, 559], "onlin": [482, 495, 556], "onnx": [2, 3, 16, 28, 30, 31, 72, 127, 149, 196, 206, 236, 243, 258, 462, 463, 464, 469, 496, 499, 500, 501, 503, 528, 532, 533, 535, 538, 544, 545, 546, 550, 554, 557, 559], "onnx_graph": 86, "onnx_ml_pb2": [236, 545], "onnx_model": [238, 257], "onnx_nod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 86], "onnx_qlinear_to_qdq": 462, "onnx_quant": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "onnx_schema": 86, "onnx_typ": 90, "onnxbilinearimagenettransform": 222, "onnxcommunitymeetup2023": 550, "onnxgraph": 87, "onnxmodel": [31, 243, 257], "onnxnod": 88, "onnxopschema": 89, "onnxprofilingpars": 250, "onnxqlinear2qdq": 196, "onnxqlinear2qdqconfig": 196, "onnxresizecropimagenettransform": 222, "onnxrt": [29, 30, 31, 210, 212, 219, 226, 235, 257, 469, 500, 544, 551, 560], "onnxrt_cuda_ep": [196, 544, 551], "onnxrt_dataload": 257, "onnxrt_dml_ep": [196, 551], "onnxrt_dnnl_ep": [196, 544, 551], "onnxrt_integ": 543, "onnxrt_integerop": [212, 219, 226], "onnxrt_qdq": [212, 219], "onnxrt_qlinear": 543, "onnxrt_qlinearop": [212, 219, 226], "onnxrt_qlinearopsadaptor": 500, "onnxrt_trt_ep": [196, 544, 551], "onnxrtaug": 2, "onnxrtbertdataload": 206, "onnxrtbertdataset": 210, "onnxrtcroptoboundingbox": 226, "onnxrtdataload": [206, 257], "onnxrtglu": 235, "onnxrtimagenetdataset": 215, "onnxrtitdataset": 212, "onnxrtitfilt": 219, "onnxrtitmetr": 235, "onnxrtittransform": 226, "onnxrtparserfactori": 249, "onnxrtqldataset": 212, "onnxrtqlfilt": 219, "onnxrtqlmetr": 235, "onnxrtqltransform": 226, "onnxruntim": [3, 196, 206, 212, 219, 258, 500, 526, 528, 538, 539, 544], "onto": [140, 400], "op": [1, 16, 36, 38, 50, 51, 52, 53, 54, 55, 56, 57, 59, 63, 66, 70, 73, 76, 77, 78, 79, 81, 90, 92, 94, 108, 109, 110, 116, 118, 119, 120, 121, 126, 128, 131, 133, 135, 144, 145, 149, 174, 196, 258, 262, 268, 270, 272, 279, 280, 281, 287, 309, 311, 323, 324, 325, 326, 327, 328, 329, 330, 332, 336, 339, 343, 346, 348, 349, 350, 351, 353, 358, 360, 364, 365, 366, 372, 374, 375, 376, 377, 381, 384, 386, 416, 417, 421, 437, 441, 453, 462, 464, 466, 471, 479, 480, 483, 493, 494, 500, 501, 502, 535, 543, 544, 549, 551, 553, 555, 557, 559], "op_block_lst": 278, "op_cfg": 139, "op_defin": 252, "op_dict": 543, "op_dtyp": 278, "op_dtype_dict": 278, "op_infos_from_cfg": [145, 416, 417, 421], "op_level": 156, "op_list": 500, "op_nam": [145, 196, 280, 417, 421, 437, 453, 471, 472, 481, 501, 543, 549], "op_name_dict": [196, 481, 543, 551, 559], "op_name_or_module_typ": [152, 300, 304, 443], "op_name_typ": 279, "op_quant_mod": 280, "op_registri": 21, "op_run": 252, "op_typ": [21, 125, 126, 133, 195, 280, 284, 287, 304, 417, 421, 480, 481], "op_type_dict": [196, 481, 502, 551, 554, 559], "op_type_level": 156, "op_types_to_quant": 28, "op_user_cfg": 281, "op_user_cfg_modifi": 281, "op_wis": 543, "op_wise_config": [92, 116, 121, 358, 372, 377, 501], "op_wise_sequ": [116, 121, 372, 377], "open": [140, 162, 227, 400, 460, 473, 495, 499, 533, 534, 543, 550], "openai": [480, 557], "opencv": 534, "opentri": 471, "openvinotoolkit": 135, "oper": [4, 30, 89, 95, 125, 133, 152, 156, 174, 175, 180, 196, 222, 258, 262, 284, 300, 361, 386, 410, 417, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 493, 494, 497, 525, 528, 533, 549, 551, 554, 557, 558, 559], "operator_name_or_list": 483, "operatorconfig": [300, 443], "ops_lst": [145, 421], "ops_nam": [145, 421], "opset": [29, 87, 89, 90, 196, 463, 464, 533], "opset_vers": [90, 127, 196, 463, 464, 533], "opt": [189, 480, 493, 494, 499, 541, 549, 557, 559, 560], "opt_cfg": [60, 333], "opt_model": [476, 481, 543], "opt_param": 429, "optdecoderlay": 557, "optim": [39, 59, 60, 64, 65, 101, 103, 133, 165, 168, 169, 171, 174, 183, 188, 196, 267, 312, 332, 333, 337, 338, 386, 428, 443, 454, 456, 458, 471, 475, 481, 482, 485, 486, 487, 489, 493, 494, 499, 525, 527, 530, 531, 535, 538, 539, 541, 543, 545, 550, 551, 553, 554, 556, 557, 559], "optimize_lay": 102, "optimize_qdq": [115, 371], "optimize_transform": 494, "optimize_weights_proximal_legaci": 429, "optimized_model_tensor": 471, "optimized_tensor_data": 472, "optimizedmodel": 467, "optimizeqdqgraph": [116, 372], "optimizer_registri": 166, "optimizer_typ": 166, "optimum": [451, 477, 554], "option": [3, 31, 90, 140, 145, 156, 161, 176, 196, 199, 200, 210, 226, 231, 235, 236, 263, 279, 281, 282, 392, 393, 395, 400, 402, 412, 413, 417, 419, 422, 429, 435, 437, 439, 441, 442, 443, 445, 446, 453, 454, 463, 464, 465, 467, 471, 482, 483, 486, 493, 501, 502, 527, 528, 535, 539, 543, 549, 551, 554, 556, 557, 558, 559], "optuningconfig": [278, 279, 280], "optyp": [1, 196, 462, 501], "optype_wise_": 501, "optypes_to_exclude_output_qu": [28, 196, 551], "optypewis": 501, "optypewisetuningsampl": 278, "opwis": 501, "opwisetuningsampl": 278, "orchestr": [454, 475, 538], "order": [139, 145, 153, 228, 229, 267, 272, 281, 482, 487, 493, 494, 497, 542, 554, 557, 559], "ordered_op": 145, "ordereddefaultdict": 281, "ordereddict": [407, 416, 420, 423, 434, 527], "ordinari": 556, "org": [170, 188, 231, 424, 443, 497, 499, 539, 549], "orient": 495, "orig_answer_text": 226, "orig_bit": 448, "orig_lay": [142, 433], "orig_model": 482, "orig_sav": 483, "orig_text": 226, "origin": [30, 31, 125, 133, 141, 145, 174, 186, 193, 196, 210, 226, 268, 281, 284, 386, 395, 402, 417, 431, 435, 437, 445, 446, 453, 467, 471, 482, 483, 484, 486, 493, 496, 549, 551, 554, 558, 559], "original_model": [435, 446, 482], "ort": 258, "ortsmoothqu": 29, "other": [52, 53, 55, 138, 149, 209, 233, 244, 325, 326, 328, 391, 401, 417, 478, 483, 486, 493, 495, 497, 501, 502, 507, 527, 535, 536, 538, 540, 543, 545, 546, 547, 549, 551, 557, 558, 559, 560], "otherwis": [140, 212, 226, 400, 410, 417, 431, 453, 457, 471, 482, 495, 501, 554, 558], "ouput_dir": 552, "our": [128, 145, 196, 381, 417, 478, 494, 499, 533, 543, 546, 556], "out": [179, 196, 210, 211, 212, 416, 417, 482, 484, 486, 493, 496, 497, 499, 549, 551, 554], "out_dtyp": 443, "out_featur": [407, 427, 433], "out_graph_def": [133, 386], "out_graph_fil": [133, 386], "outcom": 235, "outer": [203, 388], "outlier": [125, 284, 480, 482, 485, 493, 501, 526, 554, 557], "outlin": [501, 502], "outofcheeseerror": 527, "outperform": 482, "output": [29, 30, 31, 36, 39, 44, 59, 83, 90, 95, 133, 145, 167, 174, 175, 180, 193, 196, 199, 200, 228, 235, 236, 244, 263, 309, 312, 317, 332, 355, 361, 386, 391, 392, 412, 417, 419, 421, 429, 435, 437, 443, 445, 453, 454, 463, 464, 467, 468, 471, 477, 482, 483, 484, 493, 494, 497, 499, 500, 501, 530, 531, 533, 535, 537, 542, 543, 545, 548, 549, 551, 554, 557, 558, 559], "output_data": 29, "output_dict": 31, "output_dir": [139, 412, 419, 435, 467, 483, 543], "output_fn": 226, "output_func": [145, 437], "output_graph": 196, "output_graph_def": 485, "output_handl": [161, 471], "output_index_map": [235, 542], "output_mod": 210, "output_model": [282, 543], "output_nam": [87, 127, 196, 244, 391, 463, 464, 533], "output_node_nam": [68, 69, 116, 117, 121, 133, 341, 342, 372, 373, 377, 386], "output_path": 231, "output_process": 167, "output_shap": 87, "output_tensor": [133, 244, 386, 391], "output_tensor_id_op_nam": [416, 417, 421], "output_tensor_ids_op_nam": [145, 417, 421], "output_tensor_nam": [133, 244, 386, 391], "output_valu": [145, 437], "outputs_to_valu": 90, "over": [90, 140, 212, 235, 400, 501, 532, 538, 542, 549, 557, 559], "overal": [482, 502, 554], "overflow": [493, 551], "overhead": [482, 557], "overli": 527, "overrid": [196, 471, 483, 494, 527], "overridden": 559, "overview": [499, 536, 559], "overwrit": 212, "overwrite_exist": 151, "own": [59, 140, 208, 226, 246, 332, 400, 475, 493, 501, 528, 538, 542, 547, 554, 556], "p": [3, 482, 489, 493, 494, 554], "p_conf": [543, 548], "pack": [30, 46, 319, 425, 430, 448, 451], "pack_array_with_numba_b2_c16": 448, "pack_array_with_numba_b2_c32": 448, "pack_array_with_numba_b2_c64": 448, "pack_array_with_numba_b2_c8": 448, "pack_array_with_numba_b4_c16": 448, "pack_array_with_numba_b4_c32": 448, "pack_array_with_numba_b4_c64": 448, "pack_array_with_numba_b4_c8": 448, "pack_array_with_numba_b8_c16": 448, "pack_array_with_numba_b8_c32": 448, "pack_array_with_numba_b8_c64": 448, "pack_array_with_numba_b8_c8": 448, "packag": [89, 451, 499, 500, 527, 534, 539, 550, 555, 559], "package_nam": 451, "packed_arrai": 448, "packer": 425, "pad": [16, 31, 56, 57, 210, 226, 293, 295, 298, 299, 329, 330, 558], "pad_max_length": 554, "pad_tensor": 31, "pad_token": 210, "pad_token_segment_id": 210, "paddedcentercroptransform": 226, "padding_mod": 558, "pade": 31, "padoper": 22, "page": [495, 496], "pager": 527, "pain": [493, 551], "pair": [92, 196, 358, 410, 479, 481, 501, 528, 543, 544], "paper": [480, 482, 493, 549, 554, 557], "paragraph": [232, 233], "parallel": [211, 258, 262, 543, 559], "param": [145, 151, 154, 156, 166, 201, 235, 267, 388, 394, 471, 477, 500, 545, 559], "param1": 282, "param2": 282, "param3": 282, "param_alia": 471, "param_dict": [164, 166], "param_nam": [402, 471], "paramet": [1, 3, 29, 30, 31, 52, 53, 55, 71, 90, 101, 117, 125, 126, 133, 134, 135, 140, 141, 144, 145, 146, 151, 152, 153, 154, 156, 160, 161, 163, 164, 166, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 199, 200, 209, 210, 212, 219, 222, 226, 228, 229, 231, 232, 233, 235, 236, 240, 244, 246, 258, 262, 263, 267, 275, 279, 281, 282, 284, 287, 302, 306, 325, 326, 328, 344, 373, 386, 391, 392, 394, 395, 396, 400, 402, 408, 410, 412, 413, 415, 416, 417, 419, 421, 422, 424, 426, 429, 431, 435, 437, 439, 441, 442, 443, 445, 446, 447, 449, 451, 453, 454, 460, 462, 463, 464, 467, 468, 470, 471, 478, 480, 481, 482, 485, 486, 488, 493, 497, 501, 528, 531, 538, 542, 543, 546, 549, 551, 552, 554, 556, 557, 558, 559], "parameter": 549, "parameter1": 282, "parameter2": 282, "paramlevel": 156, "params_list": [152, 156], "parent": [186, 187, 191, 417, 437], "pars": [90, 133, 145, 154, 210, 211, 222, 226, 250, 251, 254, 386, 391, 416, 417, 421, 501, 502, 558], "parse_auto_slim_config": [172, 549], "parse_cfg": 421, "parse_last_linear": 193, "parse_last_linear_tf": 193, "parse_saved_model": [133, 386], "parse_str2list": 154, "parse_to_prun": 193, "parse_to_prune_tf": 193, "parse_tune_config": 1, "parse_valid_pruner_typ": 184, "parsedecodebert": 210, "parsedecodecoco": 211, "parsedecodeimagenet": [222, 558], "parsedecodeimagenettransform": 222, "parsedecodevoctransform": 226, "parserfactori": 248, "part": [145, 172, 181, 437, 449, 475, 479, 493, 497, 539, 544, 549, 552, 557], "parti": [231, 493, 496, 540, 551], "partial": [185, 486, 549, 551], "particip": 495, "particular": [494, 499, 549, 554], "particularli": 486, "partit": [531, 549], "partner": 550, "parzen": 559, "pascal": 212, "paser_cfg": 145, "pass": [62, 133, 138, 140, 151, 161, 235, 263, 335, 386, 392, 400, 401, 415, 417, 435, 446, 470, 471, 482, 493, 496, 497, 500, 525, 530, 531, 537, 542, 543, 549, 551, 553, 557], "past": [482, 493, 500, 554], "pat": 550, "patch": [395, 396, 431], "patch_hqq_moduil": 431, "patch_module_typ": 396, "patchedlinear": 395, "patchedmodulebas": 395, "patchedmodulefusedsdpa": 395, "path": [90, 125, 133, 141, 145, 160, 174, 189, 193, 210, 211, 212, 226, 236, 244, 262, 263, 279, 284, 386, 391, 402, 409, 416, 417, 419, 420, 421, 422, 435, 445, 453, 463, 464, 467, 471, 477, 481, 482, 483, 489, 497, 500, 531, 537, 542, 543, 544, 545, 548, 554, 558], "path_to_sav": 454, "pathlik": [140, 400], "pattern": [43, 44, 46, 63, 81, 92, 93, 94, 116, 121, 145, 170, 171, 174, 175, 181, 182, 183, 184, 186, 188, 190, 196, 212, 279, 316, 317, 319, 336, 353, 358, 359, 360, 372, 377, 410, 476, 481, 485, 488, 500, 527, 535, 538, 543, 548, 557, 559, 560], "pattern_analyz": 173, "pattern_detector": 136, "pattern_factori": 410, "pattern_lock": [184, 196], "pattern_lst": [143, 421], "pattern_pair": 410, "pattern_to_intern": 279, "pattern_to_path": 279, "patternmha": 178, "patternpair": 410, "pb": [151, 196, 236, 244, 263, 391, 486, 525, 531, 543, 545, 560], "pbound": 267, "pc": 496, "pdf": 3, "peak": [246, 488, 547], "pegasu": 560, "peleenet": 560, "penal": 549, "penalti": [228, 229, 542], "pend": 534, "pentium": 540, "peopl": [493, 551], "pep": [282, 527], "per": [29, 30, 31, 149, 151, 196, 402, 417, 437, 441, 466, 477, 478, 480, 482, 488, 500, 502, 528, 546, 549, 553, 554, 560], "per_channel": [98, 413, 443, 501, 502, 535, 551], "per_channel_symmetr": 502, "per_tensor": [293, 294, 295, 298, 299, 300, 304, 413, 443, 484, 501, 502, 535, 551], "per_tensor_symmetr": 502, "percdamp": [31, 443, 482, 534, 554], "percent": [31, 534], "percentag": [233, 482, 526, 554], "percentil": [3, 31, 125, 284, 304, 437, 526], "percentilecalibr": 3, "perceptron": 549, "perchannel": 31, "perform": [81, 125, 151, 190, 196, 210, 222, 235, 246, 263, 268, 272, 284, 285, 353, 417, 476, 477, 479, 481, 482, 483, 484, 486, 487, 488, 489, 493, 494, 496, 497, 499, 500, 501, 525, 529, 530, 532, 533, 536, 538, 539, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 557, 559, 560], "performance_onli": [32, 33, 34, 92, 116, 121, 132, 290, 307, 358, 372, 377, 385, 543], "perm": [226, 558], "perman": [172, 495, 549], "permiss": 495, "permut": [226, 558], "persist": [453, 545], "person": [392, 471, 495, 550], "perspect": 559, "phase": [146, 453, 486, 493, 543, 549, 551, 553, 559], "phi": [494, 540], "philip": 549, "philosophi": [481, 486, 551], "physic": [151, 154, 495, 525], "physical_cpu": 154, "pickl": [138, 140, 400, 401], "pickle_load_arg": [140, 400], "pickle_modul": [140, 171, 400], "pickle_protocol": 171, "pickleerror": [138, 401], "pickler": [138, 401], "pickletool": [138, 401], "picklingerror": [138, 401], "piec": [225, 228, 482, 493, 542, 554], "pil": [226, 558], "pile": [422, 457], "pin": 528, "pin_memori": [201, 203, 205, 388, 528], "ping_memori": [543, 551], "pip": [499, 531, 534, 536, 539, 555], "pipe": 527, "pipelin": [153, 163, 496, 530, 543, 548], "pixel": 558, "pkl": 471, "pl": 228, "place": [416, 417, 437, 445, 483, 530, 539, 549, 559], "placehold": [42, 208, 315, 388, 413, 527], "placeholder_dtyp": 174, "placeholder_shap": 174, "plai": [237, 391, 482, 493, 550, 554, 557], "plan": [483, 538], "platform": [471, 488, 493, 538, 550, 551], "platinum": 560, "pleas": [29, 135, 149, 170, 178, 179, 180, 188, 189, 196, 210, 211, 212, 215, 235, 263, 282, 417, 424, 475, 477, 479, 480, 481, 482, 483, 484, 485, 493, 494, 497, 498, 499, 500, 525, 526, 530, 531, 533, 539, 541, 542, 544, 549, 551, 553, 554, 555, 556, 557, 559], "plu": 544, "plug": 550, "png": 212, "point": [30, 31, 222, 232, 233, 267, 429, 437, 471, 476, 477, 478, 479, 480, 481, 482, 485, 493, 542, 546, 551, 554, 557, 558, 559], "pointwise_constraint": 299, "pointwise_initi": 299, "pointwise_regular": 299, "polici": [264, 266, 272, 487, 495, 499, 561], "polit": 495, "pollut": 527, "pont": 539, "pool": 16, "pool2d": 296, "pool_siz": 298, "pooloper": 23, "poor": 483, "popen": 527, "popular": [162, 227, 473, 475, 483, 487, 493, 499, 500, 501, 526, 532, 533, 541, 543, 549, 551, 554, 559], "popularli": 542, "port": [52, 53, 55, 325, 326, 328], "portabl": [138, 401], "portion": 210, "pose": [478, 546, 552], "posit": [226, 445, 495, 534, 542], "possibl": [140, 400, 410, 477, 548, 549, 552, 553, 559], "post": [29, 82, 83, 149, 188, 196, 199, 200, 263, 354, 355, 417, 424, 443, 478, 480, 481, 482, 483, 485, 487, 493, 495, 499, 500, 501, 530, 531, 533, 538, 539, 546, 549, 550, 552, 554, 557, 559], "post_batch": 1, "post_hostconst_convert": [80, 352], "post_node_nam": [62, 335], "post_quantized_op_cs": [80, 352], "post_training_auto_qu": 559, "post_training_dynamic_qu": [543, 559], "post_training_static_qu": [543, 559], "postcompressionutil": 175, "postcseoptim": [83, 355], "posterior": 559, "postfix": [74, 75, 347], "posthostconstconvert": [82, 354], "postposttrainingquantconfig": 553, "postprocess": [196, 223, 226, 235, 263, 460, 500, 543, 558], "postprocess_cfg": 460, "postprocess_cl": [224, 543], "postprocess_model": 453, "posttrainingquantconfig": [196, 263, 497, 502, 528, 533, 542, 543, 545, 551, 552, 553, 554, 556, 557, 559], "power": [477, 478, 486, 543, 546, 550], "pp": 549, "pr": [496, 528, 542, 555], "practic": [478, 546], "pre": [64, 101, 141, 174, 199, 200, 210, 236, 263, 337, 402, 443, 454, 481, 482, 487, 493, 527, 530, 543, 549, 550, 551, 554, 559], "pre_batch": 1, "pre_node_nam": [62, 335], "pre_optim": [61, 334], "pre_post_process_quant": [196, 551], "pre_process": 531, "preced": [228, 493, 557, 559], "precis": [134, 196, 199, 200, 233, 235, 236, 246, 265, 268, 279, 290, 403, 404, 405, 410, 441, 443, 471, 475, 477, 478, 481, 482, 483, 487, 493, 499, 500, 501, 506, 525, 526, 530, 531, 535, 536, 538, 546, 550, 551, 554, 557, 559], "pred": [133, 235, 386, 542], "pred_list": 235, "pred_text": 226, "predefin": 487, "predict": [133, 226, 228, 232, 233, 235, 263, 386, 482, 493, 542, 554, 557, 558], "prefer": [151, 263, 482, 493, 549, 554], "prefix": [133, 140, 141, 144, 145, 151, 154, 386, 400, 402, 437, 449, 477], "preoptim": [64, 337], "prepar": [1, 31, 145, 393, 395, 416, 419, 435, 441, 445, 449, 453, 476, 477, 478, 480, 481, 482, 483, 486, 489, 493, 497, 499, 531, 536, 549, 551], "prepare_compress": [196, 454, 497, 530, 543, 548, 549, 551], "prepare_dataload": 1, "prepare_input": 31, "prepare_model": 1, "prepare_model_data": 1, "prepare_prun": [171, 549], "prepared_model": [476, 480, 481, 482, 489, 536], "preprint": [478, 482, 493, 526, 546, 549, 554, 557], "preprocess": [145, 196, 210, 226, 281, 437, 460, 531, 558], "preprocess_user_cfg": 281, "present": [52, 53, 55, 325, 326, 328, 493, 550, 557], "preserv": [170, 478, 482, 526, 546, 549, 554], "pretrain": [424, 467], "pretrained_model_name_or_path": [139, 141, 402, 453], "prettyt": 471, "preval": [482, 493, 554], "previou": [193, 475, 483, 493, 501, 502, 543, 549, 555, 557, 559], "previous": 528, "primari": [487, 526, 559], "primit": [140, 400], "print": [62, 135, 174, 235, 282, 335, 424, 429, 471, 488, 493, 494, 499, 531, 542, 543, 549, 557, 559], "print_iter": 174, "print_op_list": 471, "print_tabl": 471, "printer": [161, 471], "prior": [1, 73, 346, 559], "prioriti": [152, 447, 451, 527], "privat": 495, "prob": 497, "probabl": [3, 196, 466, 482, 493, 554], "problem": [138, 210, 235, 401, 479, 542, 544], "proce": [182, 183, 188], "procedur": [549, 559], "proceed": [493, 557], "process": [101, 125, 135, 151, 153, 159, 161, 176, 181, 182, 183, 189, 191, 193, 196, 199, 200, 210, 211, 212, 222, 226, 236, 263, 264, 266, 267, 284, 395, 416, 417, 422, 451, 453, 454, 470, 471, 476, 477, 478, 481, 482, 485, 486, 487, 489, 493, 494, 500, 501, 502, 526, 528, 530, 531, 533, 543, 546, 548, 549, 551, 552, 554, 557, 558], "process_and_check_config": 193, "process_config": 193, "process_weight_config": 193, "process_yaml_config": 193, "processor": [161, 422, 443, 453, 479, 489, 493, 494, 499, 541, 544, 550, 551, 553], "processor_typ": [443, 489], "processortyp": [161, 443, 453], "product": [170, 479, 493, 538, 544, 550, 551, 556, 559], "profession": 495, "profil": [151, 196, 227], "profilerfactori": [255, 256, 260], "profilingpars": 251, "profilingresult": 252, "program": [481, 499, 531, 540], "progress": [30, 184, 212, 549, 551], "project": [226, 474, 495, 496, 550, 556, 559, 561], "promis": [477, 530, 543, 549], "promot": [478, 482, 546], "prompt": [494, 531], "prone": 549, "propag": [1, 85, 356], "properti": [210, 281, 540], "proport": 235, "propos": [479, 482, 493, 500, 544, 554, 557], "protect": [482, 554], "protected_nod": [65, 338], "proto": [222, 226, 558], "protobuf": [90, 244, 391], "prototyp": 497, "prove": [482, 493, 526, 554, 557], "provid": [29, 30, 31, 87, 90, 95, 174, 199, 200, 226, 231, 236, 263, 361, 394, 395, 413, 417, 453, 454, 465, 467, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 499, 500, 501, 502, 525, 528, 530, 531, 532, 536, 538, 539, 541, 542, 543, 544, 545, 549, 551, 554, 557, 559, 560], "proxi": 497, "prune": [163, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 471, 475, 499, 531, 532, 535, 536, 538, 548, 550], "prune_conf": 543, "prune_config": 193, "pruner": [543, 549], "pruner2": 549, "pruner_class": 188, "pruner_info": 189, "pruners_info": 193, "pruning_class": 189, "pruning_config": [196, 543, 549], "pruning_end": 549, "pruning_frequ": [181, 196, 543, 549], "pruning_func": 543, "pruning_op_typ": [196, 543, 549], "pruning_pattern": 549, "pruning_scop": [196, 543, 549], "pruning_start": 549, "pruning_typ": [196, 543, 549], "pruningcallback": 163, "pruningconfig": 454, "pruningcriterion": [170, 192], "pruningschedul": 191, "pseudo": [199, 200, 263, 454, 482, 554], "pt": [140, 400, 470, 482, 494, 499, 536, 539, 545, 550, 551, 553, 554], "pt2e": [409, 411, 413, 439, 441, 446, 560], "pt2e_dynamic_quant_entri": 441, "pt2e_export": 438, "pt2e_quant": 398, "pt2e_static_quant_entri": 441, "pt_fp32_model": 464, "pt_int8_model": 464, "ptq": [196, 263, 480, 481, 485, 486, 497, 531, 538, 543, 551, 557, 559], "public": [282, 495], "publish": [479, 495, 540, 541, 544, 557], "pull": [52, 53, 55, 325, 326, 328], "punct_nondigit_r": 228, "punctuat": [225, 228, 233], "pure": 549, "purif": 550, "purpos": [479, 480, 481, 482, 484, 535, 544, 551], "push": [478, 482, 493, 496, 546, 549, 554, 557], "put": [140, 212, 400], "pvc": 494, "py": [3, 133, 135, 151, 154, 181, 196, 229, 231, 232, 233, 282, 386, 447, 484, 488, 489, 494, 497, 500, 527, 531, 539, 543, 551, 555], "pycocotool": [231, 534], "pyhessian": 135, "pylanc": 527, "pyobject": 534, "pypi": 539, "pytest": 496, "python": [3, 60, 133, 138, 140, 161, 162, 212, 227, 282, 333, 386, 400, 401, 447, 471, 473, 489, 494, 497, 499, 527, 531, 534, 539, 543, 549, 550, 558], "python3": 534, "pythonmultiheadattentionprun": 185, "pytorch": [164, 166, 167, 171, 174, 177, 180, 181, 184, 189, 195, 196, 209, 210, 212, 215, 219, 226, 235, 236, 245, 263, 273, 393, 398, 439, 440, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 464, 465, 471, 478, 483, 494, 496, 497, 499, 500, 501, 502, 507, 526, 527, 528, 530, 532, 535, 536, 538, 539, 541, 543, 544, 545, 546, 549, 550, 554, 555, 557, 559], "pytorch_cpu": 502, "pytorch_fx": [212, 219, 543], "pytorch_ipex": [212, 219, 543], "pytorch_prun": 189, "pytorchalignimagechannel": 226, "pytorchbasemodel": 245, "pytorchbasepattern": [176, 190], "pytorchbaseprun": 181, "pytorchbasicprun": 182, "pytorchbertdataset": 210, "pytorchblockmaskprun": 183, "pytorchcifar10": 212, "pytorchcifar100": 212, "pytorchcriterion": 164, "pytorchcropresizetransform": 226, "pytorchcrossentropyloss": 164, "pytorchdataload": 207, "pytorchdataset": 212, "pytorchdynamo": 483, "pytorchfashionmnist": 212, "pytorchfilt": 219, "pytorchfxmodel": 245, "pytorchimagenetraw": 215, "pytorchintermediatelayersknowledgedistillationloss": 164, "pytorchintermediatelayersknowledgedistillationlosswrapp": 164, "pytorchknowledgedistillationloss": [164, 543], "pytorchknowledgedistillationlosswrapp": 164, "pytorchloss": 235, "pytorchmetr": 235, "pytorchmnist": 212, "pytorchmodel": 245, "pytorchmxnettransform": 226, "pytorchmxnetwrapdataset": 212, "pytorchmxnetwrapfunct": [212, 226], "pytorchnormalizetransform": 226, "pytorchoptim": 166, "pytorchpatternlockprun": 186, "pytorchpatternninm": 179, "pytorchpatternnxm": 180, "pytorchprogressiveprun": 187, "pytorchretrainfreeprun": 188, "pytorchselfknowledgedistillationloss": 164, "pytorchselfknowledgedistillationlosswrapp": 164, "pytorchsgd": 166, "pytorchtransform": 226, "pytorchtranspos": 226, "q": [30, 31, 92, 94, 116, 358, 360, 372, 395, 476, 481, 483, 493, 554, 557], "q_conf": 530, "q_config": [28, 145, 293, 294, 295, 298, 299, 464, 500], "q_dataload": [199, 200, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 537, 559], "q_func": [199, 200, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 417, 500, 501, 543, 559], "q_hook": [199, 200, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275], "q_max": [493, 557], "q_min": [493, 557], "q_model": [135, 139, 196, 263, 302, 306, 421, 476, 480, 481, 485, 487, 494, 497, 528, 531, 533, 537, 542, 543, 545, 551, 552, 553, 554], "q_tensor": 437, "q_weight": [31, 427], "q_x": [493, 557], "qa": [232, 233, 499], "qactivationoper": 5, "qargmaxoper": 6, "qas_id": 226, "qat": [97, 144, 196, 244, 499, 530, 531, 536, 538, 543, 551], "qat_clone_funct": 101, "qat_op_name_dict": 196, "qattent": 7, "qattentionoper": 7, "qavgpool2d": 298, "qbinari": 8, "qbinaryoper": 8, "qconcat": 9, "qconcatoper": 9, "qconfig": [1, 145, 421, 470, 477, 482, 499, 554], "qconfig_file_path": 160, "qconv2d": 293, "qconvoper": 10, "qd": 481, "qdens": 294, "qdepthwiseconv2d": 295, "qdirect": 11, "qdirectoper": 11, "qdq": [29, 72, 97, 98, 127, 145, 196, 289, 345, 363, 437, 462, 463, 464, 485, 500, 533, 538, 551, 557], "qdq_enabl": [33, 307], "qdq_op_fp32_bia": 196, "qdq_op_fp32_bias_qdq": 196, "qdq_op_int32_bia": 196, "qdq_quantiz": 416, "qdq_tensor": 31, "qdq_weight_actor": 437, "qdq_weight_asym": 437, "qdq_weight_sym": 437, "qdqlayer": [402, 433], "qembedlayernorm": 12, "qembedlayernormalizationoper": 12, "qgather": 13, "qgatheroper": 13, "qgemm": 15, "qgemmoper": 15, "qglobalaveragepooloper": 14, "qintegerop": [538, 551], "qkv": 185, "qkv_modul": 185, "qkv_name": 185, "qlinear": [196, 212, 219, 235, 462, 500], "qlinear2qdq": 461, "qlinearaveragepool": 23, "qlinearconv": 10, "qlinearglobalaveragepool": 14, "qlinearmatmul": 18, "qlinearop": [462, 538, 551, 560], "qlora": [482, 493, 554], "qmatmuloper": 18, "qmax": 145, "qmaxpool": 19, "qmaxpool2d": 298, "qmaxpooloper": 19, "qmin": 145, "qmodel": [135, 484, 486], "qnli": [210, 542, 560], "qop_registri": 21, "qoper": [5, 21, 196, 533], "qpad": 22, "qpadoper": 22, "qpooloper": 23, "qqp": [210, 542, 560], "qresiz": 25, "qresizeoper": 25, "qscheme": 502, "qseparableconv2d": 299, "qsplit": 26, "qsplitoper": 26, "qsym_model": 1, "qt_config": [33, 307], "qtensor": [427, 428], "qtensor_to_tensor": 1, "qtensorconfig": 426, "qtensormetainfo": 430, "qtype": [29, 30, 500], "quadrat": [443, 482], "quala": 550, "qualiti": [228, 527], "quant": [31, 133, 145, 196, 279, 286, 288, 289, 290, 300, 304, 417, 420, 437, 442, 443, 482, 493, 494, 497, 527, 541, 543, 551], "quant_axi": [293, 294, 295, 298, 299], "quant_config": [289, 290, 302, 306, 392, 393, 407, 409, 416, 420, 422, 423, 424, 431, 434, 436, 445, 453, 476, 478, 480, 481, 482, 483, 484, 485, 486, 489, 536, 546], "quant_dequant_data": 29, "quant_dequant_w_v1": 417, "quant_dequant_x_v1": 417, "quant_format": [196, 464, 533], "quant_level": [196, 554, 557, 559], "quant_lm_head": [424, 443, 457, 482], "quant_max": 502, "quant_min": 502, "quant_mod": [32, 279, 290, 293, 294, 295, 298, 299, 501, 502], "quant_mode_from_pattern": 279, "quant_narrow_rang": [293, 294, 295, 298, 299], "quant_nontext_modul": [422, 443], "quant_opt": 281, "quant_round_mod": [293, 294, 295, 298, 299], "quant_scal": [443, 482], "quant_statu": [293, 294, 295, 298, 299], "quant_t": [293, 294, 295, 298, 299], "quant_tensor": [31, 437], "quant_typ": 281, "quant_vis": 453, "quant_weight_w_scal": 437, "quant_zero": [443, 482], "quantformat": 30, "quantif": [480, 482, 485, 554, 557], "quantil": [437, 559], "quantit": 482, "quantiz": [1, 3, 4, 29, 30, 31, 33, 34, 73, 77, 79, 81, 84, 92, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 134, 135, 137, 141, 142, 145, 149, 151, 153, 157, 159, 161, 163, 196, 199, 200, 222, 227, 268, 270, 272, 281, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 393, 395, 399, 402, 406, 407, 408, 409, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 453, 454, 457, 458, 464, 466, 467, 470, 471, 475, 479, 485, 487, 490, 494, 500, 506, 507, 527, 528, 531, 532, 535, 536, 537, 538, 542, 545, 548, 550, 555, 558, 559], "quantizable_nod": 1, "quantizable_op": [145, 417, 421], "quantizaiton_config": 494, "quantization_aware_training_conf": 543, "quantization_cfg": 500, "quantization_config": [456, 494], "quantization_param": 28, "quantizationawaretrainingcallback": 163, "quantizationawaretrainingconfig": [196, 454, 497, 530, 533, 543, 551, 553, 559], "quantizationmethod": 457, "quantizationmod": 30, "quantizationspec": 413, "quantize_4bit": 437, "quantize_config": [99, 501], "quantize_data": 30, "quantize_data_per_channel": 30, "quantize_data_with_scale_zero": 30, "quantize_elemwise_op": 408, "quantize_graph": [96, 362], "quantize_graph_bas": [97, 363], "quantize_graph_bn": [97, 363], "quantize_graph_common": [96, 362], "quantize_graph_concatv2": [97, 363], "quantize_graph_conv": [97, 363], "quantize_graph_for_intel_cpu": [97, 363], "quantize_graph_matmul": [97, 363], "quantize_graph_pool": [97, 363], "quantize_help": 99, "quantize_lay": 99, "quantize_layer_add": 102, "quantize_layer_bas": 102, "quantize_layer_bn": 102, "quantize_model": [306, 484, 485, 486, 493], "quantize_model_with_single_config": 306, "quantize_mx_op": 408, "quantize_nod": 464, "quantize_nparrai": 30, "quantize_per_channel": [493, 557], "quantize_per_tensor_absmax": [493, 557], "quantize_rang": 30, "quantize_recip": 101, "quantize_sym_model": 1, "quantize_wrapp": 99, "quantizeconfig": [100, 101], "quantized_data": 30, "quantized_dict": 135, "quantized_model": [482, 489, 536], "quantized_nod": [92, 358], "quantized_value_typ": 30, "quantizedconcatv2": [109, 119, 365, 375], "quantizedconv": [76, 77, 348, 349], "quantizeddeconv": [76, 348], "quantizediniti": 30, "quantizedinput": [222, 558], "quantizedmatmul": [78, 79, 350, 351], "quantizedmatmulwithbiasanddequant": [79, 351], "quantizedrnnconvert": 84, "quantizedvalu": 30, "quantizedvaluetyp": 30, "quantizegraph": [117, 373], "quantizegraphbas": [117, 373], "quantizegraphforintel": [121, 377], "quantizegraphhelp": [124, 380], "quantizelay": 105, "quantizelayeradd": 104, "quantizelayerbas": 105, "quantizelayerbatchnorm": 106, "quantizelinear": 30, "quantizenodebas": [117, 373], "quantizer_cl": 453, "quantizev2": [83, 355], "quantizewrapp": [101, 107], "quantizewrapperbas": 107, "quantiztaion": [196, 421], "quantopt": 281, "quanttyp": [30, 281], "queri": [1, 32, 133, 145, 174, 185, 196, 289, 290, 421, 453, 493, 501, 502, 551], "query_framework_cap": 501, "query_fused_pattern": 500, "query_fw_cap": [500, 502], "query_layer_nam": 185, "query_quantizable_nod": 1, "querybackendcap": [500, 501], "question": [226, 232, 233, 493, 495, 496, 499, 500, 539, 549, 557, 558, 560], "question_text": 226, "quick": [475, 489, 535, 544, 549], "quickli": [487, 541, 559], "quint8": [30, 417], "quit": 549, "qweight_config_path": 554, "qwen": 494, "qwen2": [499, 550], "r": [30, 128, 150, 381, 480, 481, 482, 484, 486, 488, 493, 539, 551, 560], "r1": [133, 386], "r34": 497, "race": 495, "rais": [52, 53, 55, 90, 138, 140, 145, 171, 177, 184, 193, 231, 236, 282, 325, 326, 328, 400, 401, 417, 437, 439, 449, 453, 499, 527, 549, 550], "ram": [140, 400, 482, 489], "ran": 163, "rand": [422, 443, 482, 493, 557], "randn": [196, 499, 533], "random": [41, 133, 161, 196, 222, 226, 267, 271, 314, 392, 422, 471, 482, 543, 549, 558], "random_crop": [222, 558], "random_flip_left_right": [222, 558], "random_se": [196, 267, 543], "randomcrop": 558, "randomcroptftransform": 226, "randomcroptransform": 226, "randomhorizontalflip": [226, 543, 558], "randomli": [226, 267, 493, 557, 558, 559], "randomresizedcrop": [543, 558], "randomresizedcropmxnettransform": 226, "randomresizedcroppytorchtransform": 226, "randomresizedcroptftransform": 226, "randomresizedcroptransform": 226, "randomst": 267, "randomtunestrategi": 274, "randomverticalflip": [226, 558], "rang": [213, 214, 226, 282, 388, 437, 454, 467, 476, 478, 479, 482, 483, 486, 488, 493, 499, 500, 502, 526, 530, 531, 543, 546, 548, 549, 551, 554, 557, 558], "rank": 531, "rapid": [539, 541], "rate": [482, 493, 543, 549, 551], "rather": [482, 537, 554], "ratio": [31, 128, 150, 176, 181, 193, 196, 222, 226, 381, 541, 543, 549, 558, 560], "ratiospars": 560, "raw": [30, 151, 211, 215, 218, 272, 416, 419, 435, 441, 542, 559], "raw_arrai": 448, "raw_cmd": [151, 154], "raw_func": 451, "raw_imag": 212, "rawgptquant": 424, "rb": [140, 400], "rcnn": 533, "re": 554, "reach": [153, 176, 191, 196, 496, 528, 549, 559], "read": [90, 133, 140, 215, 226, 386, 400, 553, 556], "read_graph": [133, 386], "read_squad_exampl": 226, "read_tensorflow_node_attr": 90, "readabl": [154, 527], "readi": 549, "readlin": [140, 400], "readm": 531, "real": [30, 213, 388, 493, 501, 526, 531, 550, 551], "realdiv": [51, 54, 324, 327], "realiz": [531, 547, 553, 556], "rearrang": [31, 188, 482, 549, 554], "reason": [482, 493, 495, 501, 528, 554, 559], "rebuild": [133, 386], "recal": [233, 235], "receiv": 556, "recent": [479, 543, 544], "recip": [33, 174, 196, 307, 478, 487, 499, 536, 543, 546, 552, 554, 557, 559], "recipe_sampl": 174, "recipesearch": 174, "recogn": [228, 453, 559], "recognit": [479, 531, 533, 549], "recognitionimagenet": 560, "recommend": [235, 451, 477, 479, 489, 494, 499, 500, 535, 536, 549, 559], "recommendation_system": 196, "reconstruct": [133, 386, 550], "reconstruct_saved_model": [133, 386], "record": [135, 145, 164, 167, 210, 211, 212, 218, 437, 471, 487, 554, 556, 559], "record_max_info": [304, 417], "record_output": 167, "recov": [29, 415, 417, 437, 449, 470, 471, 500, 530], "recover_config": 34, "recover_forward": [437, 449], "recover_model_from_json": [415, 470], "rectangl": [482, 552], "recurs": [195, 471], "recursivescriptmodul": 419, "redpajama": [480, 557], "reduc": [16, 196, 443, 449, 479, 480, 481, 482, 485, 486, 493, 494, 500, 526, 530, 543, 544, 549, 550, 551, 552, 553, 554, 557, 559], "reduce_rang": [2, 28, 29, 196, 502], "reducemax": 24, "reducemin": 24, "reduceminmaxoper": 24, "reduceoper": 24, "reduct": [549, 552], "redund": [76, 78, 348, 350, 453], "ref": [3, 133, 386], "refer": [29, 135, 149, 170, 178, 179, 180, 188, 189, 193, 196, 210, 228, 229, 235, 263, 282, 417, 424, 443, 477, 479, 480, 481, 483, 484, 485, 486, 494, 497, 499, 500, 501, 525, 528, 530, 531, 533, 534, 537, 539, 540, 542, 543, 544, 547, 552, 555, 558, 559], "reference_corpu": 229, "refin": [447, 486, 537, 549], "reflect": [542, 558], "reg": [171, 182, 183, 188, 196], "reg_term": 190, "regard": [495, 553], "regardless": 495, "region": [480, 557], "regist": [3, 21, 138, 140, 146, 152, 164, 166, 170, 171, 176, 177, 181, 184, 189, 190, 191, 192, 212, 219, 226, 235, 246, 275, 281, 300, 392, 394, 395, 396, 400, 401, 402, 417, 443, 447, 448, 453, 500, 527, 531, 542, 543, 547, 557, 559], "register_acceler": 447, "register_algo": [392, 453, 527], "register_autotun": 417, "register_config": [152, 527], "register_criterion": [170, 192], "register_customer_metr": 235, "register_observ": 394, "register_pack_func": 448, "register_packag": [140, 400], "register_patched_modul": 395, "register_pattern": 176, "register_prun": [181, 189], "register_reg": 190, "register_scaling_method": 396, "register_schedul": 191, "register_supported_configs_for_fwk": 152, "register_weight_hook": 402, "registr": [146, 212, 219, 226, 394], "registri": [152, 170, 176, 181, 189, 190, 191, 192, 447], "registry_criterion": 164, "regress": [210, 496], "regul": [182, 183, 188], "regular": [190, 228], "regulariz": 190, "reinstal": 534, "reject": 495, "rel": [196, 246, 543, 559, 560], "relat": [175, 190, 231, 281, 411, 414, 418, 428, 452, 460, 502, 536, 549, 554], "relationship": 196, "relative_loss": 153, "releas": [476, 481, 499, 536, 539, 561], "relev": [267, 501, 502, 527, 549], "reli": [483, 543, 557], "religion": 495, "reload": 160, "relu": [59, 63, 94, 332, 336, 360, 497, 535, 557], "relu6": [59, 332, 535], "remain": [435, 446], "remaind": 526, "remap": [55, 140, 328, 400], "remov": [5, 30, 36, 42, 45, 59, 65, 68, 69, 70, 81, 83, 125, 172, 185, 233, 284, 309, 315, 318, 332, 338, 341, 342, 343, 353, 355, 453, 495, 543, 549], "removableactivationoper": 5, "remove_init_from_model_input": 30, "remove_training_nod": [61, 334], "removetrainingnodesoptim": [65, 338], "renam": [66, 339, 483, 555], "rename_batch_norm": [61, 334], "renamebatchnormoptim": [66, 339], "repeat": 559, "repercuss": 495, "replac": [3, 141, 145, 233, 395, 402, 410, 417, 431, 437, 449, 453, 476, 478, 481, 494, 527, 531, 543, 546, 555], "replace_forward": [437, 449], "replace_pattern": 410, "replacement_fn": 431, "replic": 559, "replica": 559, "repo": [210, 474, 496, 532, 561], "repo_id": [141, 453], "repo_typ": [141, 453], "report": [495, 496, 499, 556], "repositori": 496, "repr": 457, "repres": [30, 152, 153, 156, 157, 176, 180, 181, 189, 190, 193, 212, 217, 231, 233, 235, 410, 430, 481, 482, 486, 493, 495, 502, 526, 533, 549, 551, 552, 559], "represent": [30, 138, 401, 478, 482, 493, 495, 497, 526, 530, 546, 549, 551], "reproduc": 422, "requant": [77, 79, 349, 351], "requantize_cfg": 145, "request": [481, 499, 551], "requir": [145, 196, 202, 244, 262, 391, 395, 437, 445, 451, 477, 479, 481, 482, 486, 493, 494, 497, 500, 501, 525, 526, 528, 530, 531, 534, 535, 543, 544, 545, 549, 551, 554, 555, 556, 557, 559], "requirements_pt": [534, 539], "requirements_tf": 539, "rerang": [132, 385], "rerange_quant": [132, 385], "rerange_quantized_concat": [130, 383], "rerangequantizedconcat": [132, 385], "rerewrit": [36, 309], "rerun": 494, "resblock": 196, "rescal": [222, 226, 558], "rescalekeraspretraintransform": 226, "rescaletftransform": 226, "rescaletransform": 226, "research": [483, 499, 540, 557], "reserv": [199, 200], "reset": 542, "reset_none_to_default": 193, "reshap": [46, 52, 53, 58, 319, 325, 326, 331, 417, 493, 557], "reshape_in0_ndef": [52, 53, 325, 326], "reshape_in1_ndef": [52, 53, 325, 326], "reshape_in_channel_to_last": 417, "reshape_scale_as_input": 417, "reshape_scale_as_weight": 417, "reshuffl": 528, "resid": [140, 400], "resiz": [16, 210, 211, 222, 226, 558], "resize_method": 222, "resize_shap": 217, "resize_sid": [222, 558], "resizecropimagenet": [531, 558], "resizemxnettransform": 226, "resizeoper": 25, "resizepytorchtransform": 226, "resizetftransform": 226, "resizetransform": 226, "resizewithaspectratio": 222, "resizewithratio": [226, 558], "resnest50": 560, "resnet": [531, 560], "resnet101": 560, "resnet18": [477, 499, 544, 560], "resnet34": 497, "resnet50": [196, 484, 499, 531, 533, 544, 549, 551, 556, 560], "resnet50_fp32_pretrained_model": 531, "resnet50_v1": [531, 543], "resnetv2": 560, "resnext101_32x8d": 560, "resolut": 526, "resolv": [497, 498], "resort": 543, "resourc": 559, "respect": [493, 495, 535, 549, 557], "respons": [250, 251, 254, 484, 551], "rest": [145, 437, 449], "restor": [482, 554], "restrict": [55, 140, 196, 328, 400, 549, 556], "restructuredtext": 282, "result": [30, 133, 135, 145, 222, 226, 228, 231, 232, 233, 235, 263, 270, 386, 410, 412, 421, 454, 457, 470, 471, 475, 476, 477, 480, 482, 485, 487, 488, 493, 495, 499, 528, 531, 538, 540, 542, 543, 547, 549, 550, 551, 554, 556, 557, 558, 559, 560], "resum": [196, 199, 200, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275], "resume_from": [161, 196, 471], "retain": 526, "retrac": 553, "retrain": [188, 481, 530], "retrain_fre": [170, 184, 549], "retrainfreecriterion": 170, "retrainfreeprun": [188, 189], "retri": 417, "retriev": [152, 159, 208, 388, 410, 417, 453, 549], "return": [1, 3, 31, 39, 52, 53, 55, 59, 90, 101, 133, 134, 135, 140, 144, 145, 146, 151, 152, 154, 160, 161, 164, 166, 171, 174, 176, 177, 181, 184, 189, 190, 191, 193, 195, 199, 200, 212, 219, 222, 226, 228, 229, 231, 232, 233, 235, 236, 240, 244, 246, 258, 262, 263, 267, 275, 279, 281, 282, 300, 302, 304, 306, 312, 325, 326, 328, 332, 386, 391, 392, 400, 402, 408, 410, 412, 413, 415, 416, 417, 419, 421, 422, 424, 429, 431, 435, 437, 439, 441, 442, 443, 445, 446, 449, 451, 453, 454, 457, 460, 464, 470, 471, 479, 483, 484, 487, 493, 497, 501, 502, 528, 531, 542, 545, 547, 549, 551, 554, 557, 559], "return_int": [437, 554], "return_tensor": 494, "reus": 483, "revers": [133, 154], "reversed_numa_info": 154, "revert": [273, 281, 559], "reverted_data_typ": 281, "review": [495, 496, 499, 550], "revis": [141, 435, 446, 453], "rewrit": [35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 92, 93, 94, 171, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 410], "rgb": 222, "right": [140, 222, 231, 400, 493, 495, 496, 497, 557, 558], "rmax": [30, 486, 493, 551], "rmin": [30, 478, 486, 493, 546, 551], "rmse": [235, 542, 559], "rnn": 84, "rnn_convert": 80, "rnn_detail": 84, "roberta": [210, 560], "roc": 235, "role": [237, 391, 482, 493, 554, 557], "rollov": [201, 203, 205, 209, 388, 528], "romanian": 549, "root": [174, 210, 211, 212, 215, 235, 531, 542, 543], "root_linear": 175, "root_rank": 531, "roughli": [482, 493, 554], "rouhani": [478, 546], "round": [31, 128, 150, 381, 408, 443, 476, 477, 482, 483, 493, 499, 550, 551, 554, 557], "round_": [493, 557], "round_method": 443, "round_multipli": 172, "roundingmod": 408, "row": [471, 493, 557], "rowi": 31, "rowparallellinear": 395, "rte": [210, 542, 560], "rtn": [31, 145, 304, 393, 432, 441, 442, 443, 483, 489, 493, 494, 527, 552, 554], "rtn_algo_entri": 527, "rtn_arg": [482, 552, 554], "rtn_entri": 441, "rtn_g32asym": 554, "rtn_quantiz": 31, "rtnconfig": [441, 442, 443, 453, 457, 482, 483, 487, 494, 536], "rtnquantiz": 434, "rule": [486, 549], "run": [1, 125, 133, 140, 151, 181, 193, 196, 199, 200, 209, 225, 236, 263, 267, 284, 386, 400, 417, 454, 477, 479, 482, 483, 486, 488, 489, 493, 499, 500, 525, 531, 534, 535, 543, 550, 551, 554, 555, 556, 559], "run_arg": [442, 445, 483], "run_cmd": 559, "run_fn": [416, 417, 442, 445, 480, 481, 482, 483], "run_forward": 1, "run_generation_gpu_woq": 494, "run_inst": 151, "run_multi_instance_command": 154, "runtim": [476, 493, 496, 499, 500, 501, 503, 528, 532, 535, 538, 544, 546, 554, 559], "s1": 559, "s2": 559, "s3": 559, "s4": 559, "s5": 559, "s6": 559, "s7": 559, "s8": [293, 294, 295, 298, 299, 464], "sa_optim": 168, "sacrif": [478, 546, 550], "safe": [435, 496], "safe_seri": 435, "safetensor": [402, 499], "salient": [31, 482, 549, 554], "same": [68, 126, 133, 153, 188, 196, 210, 226, 231, 287, 341, 386, 417, 471, 477, 478, 482, 487, 488, 493, 500, 502, 525, 528, 531, 535, 543, 546, 549, 551, 554, 557, 558, 559], "sampl": [31, 62, 145, 153, 196, 204, 208, 210, 211, 212, 222, 226, 235, 267, 335, 388, 417, 422, 482, 486, 487, 488, 493, 528, 532, 534, 538, 551, 554, 557, 558, 559, 560], "sampler": [153, 201, 203, 205, 278, 388, 422, 443, 482, 487, 528, 531], "sampling_s": 543, "samsum": 560, "sapphir": [539, 541], "satisfi": [209, 539], "satur": 558, "save": [90, 133, 139, 140, 160, 171, 196, 212, 244, 263, 386, 391, 400, 402, 412, 415, 419, 435, 445, 446, 454, 458, 463, 464, 467, 471, 477, 483, 484, 493, 494, 497, 499, 500, 537, 543, 544, 545, 548, 551, 552, 554, 557], "save_config_map": 160, "save_dir": 494, "save_for_huggingface_upstream": [467, 543], "save_load": [158, 411, 414, 418, 432], "save_load_entri": 444, "save_path": [463, 464, 500, 545], "save_pretrain": 494, "save_protobuf": 90, "save_q_input": 417, "save_to_disk": 500, "saved_dir": [467, 494, 554], "saved_model": [133, 386, 486, 552], "saved_model_sess": [244, 391], "saved_model_tag": [244, 391], "saved_path": 402, "saved_result": [412, 419, 435, 446, 482, 483, 545, 554], "savedmodel": [236, 244, 263, 391], "saveloadformat": [435, 450], "scalabl": [479, 486, 493, 499, 539, 541, 544, 550, 551, 553], "scalar": [199, 200, 236, 263, 443, 454, 542, 551, 559], "scale": [3, 30, 31, 85, 126, 128, 142, 145, 149, 150, 222, 226, 287, 293, 294, 295, 298, 299, 356, 381, 396, 417, 426, 429, 430, 433, 437, 476, 477, 478, 480, 481, 482, 486, 493, 546, 551, 554, 556, 557, 558, 559], "scale_bit": 408, "scale_c": [128, 150, 381], "scale_dtyp": [422, 433, 443, 457, 467, 482, 554], "scale_format": 443, "scale_info": 471, "scale_method": [443, 477], "scale_nam": 30, "scale_param": 443, "scale_propag": [80, 352], "scale_quant_group_s": [443, 482], "scale_shar": [417, 443], "scale_valu": 30, "scalebymax": 396, "scalepropagationtransform": [85, 356], "scaler": 286, "scales_per_op": [126, 287, 304], "scaling_method_nam": 396, "scalingmethodbas": 396, "scan": [496, 499], "scenario": [482, 483, 493, 500, 525, 543, 549, 554], "scene": 549, "schedul": [171, 181, 182, 183, 188, 190, 196, 482, 543, 548], "schema": [89, 437], "scheme": [29, 30, 31, 142, 145, 417, 421, 433, 437, 500, 501, 502, 528, 535, 554, 559], "scienc": 539, "scipi": 267, "scope": [133, 386, 483, 496, 501, 543], "score": [170, 176, 181, 185, 192, 196, 228, 229, 231, 232, 233, 235, 270, 460, 497, 542, 547, 549, 556, 559], "script": [154, 174, 228, 229, 232, 233, 494, 496, 499, 531, 538, 550], "seamless": 494, "seamlessli": [478, 546, 549, 559], "search": [133, 174, 188, 196, 199, 200, 228, 267, 410, 424, 437, 471, 475, 482, 483, 485, 499, 527, 538, 542, 549, 550, 554, 557, 559], "search_algorithm": 196, "search_clip": 437, "search_pattern": 410, "search_spac": 196, "searcher": [174, 196], "searching_result": 174, "sec": [488, 560], "second": [49, 140, 175, 196, 210, 268, 322, 400, 471, 482, 489, 493, 494, 543, 554, 557, 559], "section": [282, 502, 527, 530, 549, 554], "secur": [138, 401, 499, 550, 561], "sed": 555, "see": [138, 226, 228, 401, 477, 482, 493, 495, 496, 497, 498, 527, 540, 543, 554, 557, 559], "seed": [133, 161, 196, 392, 422, 443, 471, 482, 543], "seek": [140, 400, 554], "seem": 527, "seen": [471, 500], "segment": [210, 229, 231, 496], "segment_id": [226, 543], "select": [190, 193, 196, 210, 437, 441, 447, 453, 467, 477, 482, 493, 497, 526, 538, 539, 549, 551, 554, 559], "self": [48, 145, 174, 196, 246, 321, 437, 483, 500, 501, 528, 538, 542, 556, 559], "selfknowledg": 164, "selfknowledgedistillationloss": 164, "selfknowledgedistillationlossconfig": [196, 543], "selfmhasearch": 174, "semant": [500, 535], "send": [496, 501], "senior": 526, "sensit": [170, 538, 549], "sensitivitybalanc": 560, "sentenc": 527, "sep": [499, 550], "separ": [299, 422, 453, 495, 527, 537, 539, 540, 548], "separable_conv2d": 296, "separableconv2d": 299, "seq_len": 457, "seq_length": 210, "seqlen": [422, 443, 482], "seqtyp": 90, "sequenc": [48, 90, 175, 178, 179, 196, 210, 225, 226, 229, 233, 321, 422, 482, 493, 500, 535, 549, 554, 558], "sequencediagram": [501, 502], "sequenti": [153, 208, 264, 266, 388, 392, 424, 487, 559], "sequentialsampl": [153, 208, 388], "seri": [222, 499, 539, 543, 550, 558], "serial": [138, 140, 400, 401, 435], "serv": [196, 244, 391, 493], "server": [161, 489], "servic": [499, 550], "sess": [133, 244, 386, 391], "session": [31, 133, 209, 244, 386, 391, 543], "sessionopt": 258, "set": [1, 30, 36, 81, 90, 100, 133, 140, 145, 151, 152, 153, 154, 161, 166, 193, 196, 199, 200, 201, 210, 212, 215, 226, 231, 235, 236, 244, 262, 263, 282, 289, 303, 309, 353, 386, 388, 390, 391, 395, 400, 410, 413, 417, 435, 437, 442, 443, 446, 453, 454, 471, 477, 479, 480, 482, 483, 484, 485, 487, 488, 489, 493, 494, 495, 499, 501, 525, 528, 531, 533, 534, 535, 537, 538, 542, 543, 544, 549, 551, 554, 556, 557, 559], "set_all_env_var": 151, "set_cores_for_inst": 154, "set_eager_execut": 262, "set_env_var": 151, "set_epoch": 531, "set_loc": [476, 480, 481, 482, 483, 484], "set_modul": [145, 417, 437, 453], "set_nam": 90, "set_random_se": [161, 196, 471], "set_resume_from": [161, 196, 471], "set_tensor": 500, "set_tensorboard": [161, 196, 471], "set_workspac": [161, 196, 471], "settings_recommend": 527, "setup": [499, 535, 539, 549], "sever": [124, 191, 226, 380, 478, 479, 489, 493, 530, 538, 543, 544, 546, 549, 552, 557, 558, 559], "sex": [471, 495], "sexual": 495, "sf": 534, "sgd": [166, 196, 543], "shaji": 482, "shape": [30, 31, 90, 133, 176, 213, 214, 222, 226, 231, 386, 388, 424, 430, 439, 482, 486, 493, 499, 535, 543, 554, 557, 558], "shape_overrid": 127, "shard": [141, 402, 435], "share": [30, 31, 67, 83, 94, 126, 287, 340, 355, 360, 437, 482, 493, 534, 535, 554, 557, 559], "share_qdq_y_pattern": [91, 357], "shared_criterion": [417, 443, 557], "shareqdqforitexypatternoptim": [94, 360], "shell": [154, 499], "shen": [540, 549], "shift": [128, 150, 222, 381, 558], "shop": 527, "short": 559, "shortcut": 210, "shorter": [210, 226, 558], "shot": [170, 188, 191, 482, 486, 538, 543, 549, 550, 554], "should": [40, 100, 101, 140, 163, 172, 174, 185, 196, 199, 200, 208, 210, 212, 226, 229, 235, 236, 263, 282, 302, 306, 313, 395, 400, 417, 431, 435, 446, 451, 454, 464, 471, 481, 483, 484, 485, 486, 488, 493, 494, 497, 500, 501, 502, 531, 542, 543, 547, 549, 551, 554, 558, 559], "show": [181, 471, 478, 493, 495, 531, 543, 546, 557, 559], "show_memory_info": 471, "show_nam": [131, 384], "show_op": [131, 384], "shown": [477, 478, 480, 493, 528, 542, 543, 546, 547, 548, 549, 552, 557, 559], "shrink": 549, "shuffl": [201, 203, 205, 388, 528, 543, 551], "shufflenet": 560, "side": [226, 499, 558], "sigmoid": 533, "sign": [281, 443, 482, 493, 496, 499, 502, 526, 550, 551, 554, 556], "signatur": [244, 391], "signed_flag": 281, "signifi": 90, "signific": [486, 493, 549, 550, 552, 557], "significantli": [479, 482, 543, 544, 549, 559], "signround": 482, "sigopt": [198, 550], "sigopt_api_token": [543, 556, 559], "sigopt_experiment_id": 556, "sigopt_experiment_nam": [543, 556, 559], "sigopt_project_id": [543, 556, 559], "sigopttunestrategi": 199, "silicon": [478, 546], "similar": [185, 493, 543, 557, 559], "similarli": [493, 557], "simpl": [156, 226, 477, 486, 493, 543, 549, 556, 557, 559], "simple_attr": 156, "simple_infer": [145, 421], "simple_progress_bar": 30, "simplest": 526, "simpli": [531, 545], "simplic": [493, 557], "simplifi": [549, 550], "simul": [169, 483, 502], "simultan": [185, 548], "sinc": [196, 228, 477, 482, 493, 533, 542, 548, 554], "since_vers": 89, "singl": [170, 191, 196, 204, 210, 226, 231, 235, 263, 306, 388, 395, 410, 417, 482, 497, 499, 539, 549, 552, 557], "single_output": 235, "singleton": [95, 161, 361, 392, 471], "site": 555, "situat": [196, 483, 531, 549], "sixteen": [479, 544], "size": [83, 153, 178, 179, 203, 204, 209, 212, 218, 222, 226, 244, 246, 355, 388, 391, 422, 430, 435, 437, 471, 478, 481, 482, 493, 495, 501, 528, 531, 534, 543, 546, 547, 549, 551, 552, 554, 557, 558, 560], "skip": [140, 400, 494, 559], "skip_convers": 88, "skip_first": 278, "skip_special_token": 494, "skip_verified_config": 153, "skylak": 539, "slave": [281, 559], "slice": 90, "slim": [172, 173, 174, 231, 242, 244, 391, 392, 545, 549], "slim_sess": [244, 391], "slower": [482, 554], "small": [3, 52, 53, 54, 55, 270, 325, 326, 327, 328, 482, 493, 549, 554, 559, 560], "smaller": [55, 226, 328, 478, 543, 546, 549, 558], "smbo": 559, "smooth": [3, 125, 126, 133, 149, 196, 284, 285, 286, 287, 302, 304, 416, 417, 441, 443, 483, 499, 527, 536, 549, 559], "smooth_distribut": 3, "smooth_quant": [4, 139, 145, 148, 196, 398, 421, 527, 551, 557], "smooth_quant_arg": [196, 551, 557], "smooth_quant_calibr": 96, "smooth_quant_config": 302, "smooth_quant_en": [145, 421], "smooth_quant_entri": [302, 441, 527], "smooth_quant_scal": 96, "smoother": 283, "smoothquant": [29, 145, 149, 285, 414, 416, 417, 443, 475, 480, 482, 483, 485, 493, 541, 550, 554], "smoothquant_scale_info": [145, 417], "smoothquantcalibr": [125, 284], "smoothquantcalibrationllm": [125, 284], "smoothquantconfig": [285, 302, 304, 441, 443, 480, 485, 486], "smoothquantquant": 416, "smoothquantsampl": 278, "smoothquantscal": [126, 287], "smoothquantscalerllm": [126, 287], "smt": 228, "snapshot": 470, "snip": [170, 196, 538, 549, 560], "snip_momentum": [170, 196, 543, 549], "snip_momentum_progress": 196, "snip_progress": 196, "snipcriterion": 170, "snipmomentumcriterion": 170, "snippet": [527, 538], "so": [31, 90, 153, 226, 281, 445, 475, 477, 478, 482, 483, 486, 493, 494, 497, 499, 500, 534, 538, 544, 546, 551, 553, 554, 557, 558], "social": [495, 550], "socio": 495, "socket": [151, 154, 471, 560], "soft": 196, "softwar": [499, 540, 549, 550, 555], "solut": [128, 150, 381, 480, 482, 485, 493, 499, 500, 501, 534, 550, 554, 555, 557, 559], "solv": [493, 496, 551, 555], "some": [172, 174, 196, 210, 482, 483, 493, 499, 501, 502, 527, 533, 536, 539, 542, 543, 547, 549, 551, 553, 554, 557, 559], "someth": [199, 200, 212, 263, 454], "sometim": [90, 493, 497, 551], "somewhat": 501, "soon": 541, "sort": [196, 272, 482, 554, 559], "sota": 550, "sound": 539, "sourc": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 284, 285, 287, 289, 290, 293, 294, 295, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 405, 407, 408, 409, 410, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 457, 458, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 497, 499, 540, 543, 550], "space": [151, 182, 183, 188, 196, 199, 200, 233, 236, 263, 267, 272, 279, 483, 487, 493, 495, 496, 500, 501, 502, 527, 549, 551, 557], "spacetobatchnd": [43, 316], "spanbert": 560, "spars": [172, 186, 550], "sparse_dummy_v2": 214, "sparse_gpt": 549, "sparse_ratio": 214, "sparsecategoricalcrossentropyloss": 164, "sparsedummydataset": 214, "sparsegpt": [189, 549], "sparsegptprun": 189, "sparsiti": [176, 178, 179, 181, 182, 183, 186, 188, 191, 193, 196, 471, 475, 482, 499, 538, 543, 560], "sparsity_decay_typ": [196, 543, 549], "speak": [482, 493, 554], "special": [101, 140, 174, 246, 400, 483, 497, 528, 542, 543, 547, 549, 554], "specif": [29, 89, 101, 151, 152, 154, 166, 193, 196, 210, 211, 212, 213, 217, 219, 235, 263, 388, 390, 395, 413, 417, 435, 453, 478, 479, 481, 482, 483, 486, 489, 495, 500, 501, 526, 527, 528, 535, 537, 541, 542, 543, 544, 545, 546, 547, 549, 554, 559], "specifi": [95, 140, 145, 151, 156, 193, 196, 199, 200, 226, 231, 235, 236, 263, 282, 361, 400, 408, 412, 417, 421, 422, 443, 446, 453, 454, 457, 470, 471, 483, 489, 493, 494, 501, 502, 531, 535, 542, 543, 547, 549, 554, 558, 559], "speed": [477, 493, 526, 543, 549, 550, 551, 559], "speedup": [493, 532, 538, 551], "spellcheck": 496, "spent": 559, "spevif": 437, "spiq": [29, 149, 417, 493, 557], "split": [16, 30, 67, 225, 226, 340, 422, 493, 497, 552, 554, 557, 558], "split_shared_bia": 30, "split_shared_input": [61, 334], "splitoper": 26, "splitsharedinputoptim": [67, 340], "spot": [480, 557], "spr": [32, 290], "sprase": 172, "sq": [285, 416, 486, 541, 557], "sq_config": 485, "sq_weight_tensor": 133, "sq_weights_nod": 133, "sqlalchemi": 534, "sqlinearwrapp": 417, "sqrt": [54, 327], "squad": [210, 226, 232, 233, 235, 542, 549, 558, 560], "squadexampl": 226, "squadf1": [235, 542], "squadv1": [226, 558], "squar": [235, 272, 477, 482, 542, 559], "squeez": [63, 336, 497], "squeezenet": 560, "squeezer": 175, "squential": 208, "src": 90, "ssd": [497, 533, 560], "ssd_mobilenet_v1": 543, "ssh": 531, "sst": [549, 560], "st": [210, 542], "stabil": [482, 554], "stabilityai": [480, 557], "stabl": [499, 549, 550], "stablelm": [480, 557], "stack": [424, 499], "stage": [152, 161, 264, 266, 273, 395, 549, 559], "stai": [480, 482, 483, 494, 554, 557], "stand": [549, 559], "stand_norm": [213, 214, 388], "standard": [212, 226, 394, 496, 501, 527, 533, 542, 558, 559], "star": 496, "start": [154, 196, 226, 231, 268, 475, 539, 550, 558, 559, 561], "start_epoch": 543, "start_posit": 226, "start_step": [181, 196, 543, 549], "stat": [154, 453], "state": [135, 175, 482, 489, 502, 549], "state_dict": [135, 402, 482, 531, 554], "statement": 527, "static": [28, 29, 32, 149, 174, 196, 263, 279, 288, 289, 290, 300, 302, 304, 417, 420, 421, 441, 443, 445, 464, 483, 499, 500, 501, 502, 533, 536, 538, 543, 552, 557, 559, 560], "static_config": 485, "static_graph": 174, "static_group": [443, 457, 482, 554], "static_qu": [283, 398, 484, 527], "static_quant_entri": [302, 441], "static_quant_export": 464, "staticmethod": [124, 380], "staticqu": [418, 420], "staticquantconfig": [289, 290, 300, 304, 392, 441, 443, 481, 484, 485, 486, 487], "staticquantquant": 420, "statist": [161, 471, 472, 477], "statu": [174, 483, 488, 495, 528, 546, 547, 549], "std": [222, 226, 543, 558], "std_valu": 222, "stderr": [392, 471], "step": [170, 180, 181, 182, 183, 187, 188, 191, 196, 454, 476, 480, 481, 482, 493, 494, 501, 502, 530, 531, 543, 548, 549, 553, 554, 556, 557, 559], "step1": 279, "step2": 279, "step3": 279, "step4": 279, "step5": 279, "step_siz": 557, "still": [483, 485, 493, 526, 543, 550, 551, 553], "stock": [32, 290, 557], "stop": [153, 196, 475, 487, 543, 559], "stopgradi": [65, 338], "storag": [140, 400, 482, 493, 542, 554, 557], "store": [125, 170, 171, 174, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 196, 212, 284, 412, 417, 537], "str": [1, 29, 30, 31, 125, 135, 140, 141, 143, 144, 145, 146, 152, 154, 156, 160, 161, 164, 166, 171, 174, 195, 196, 210, 211, 212, 219, 222, 226, 228, 229, 231, 233, 235, 252, 257, 259, 261, 262, 278, 281, 282, 284, 300, 303, 304, 306, 392, 394, 395, 396, 400, 402, 403, 408, 410, 412, 413, 417, 419, 421, 422, 429, 431, 435, 437, 439, 441, 443, 445, 446, 447, 449, 451, 453, 457, 460, 463, 464, 467, 471, 472, 482, 483, 486, 527, 528, 542, 558], "str2arrai": 471, "str_label": 542, "straightforward": [482, 486, 493, 549, 554, 557], "strategi": [1, 145, 188, 196, 197, 212, 227, 475, 487, 493, 499, 500, 501, 502, 506, 526, 527, 528, 531, 538, 543, 550, 551, 553, 554, 555], "strategy_kwarg": [196, 556, 559], "strategy_registri": [275, 559], "stream": [392, 471], "streamlin": [539, 550], "stretch": 477, "strftime": 196, "strict": 457, "stride": [90, 226, 293, 295, 298, 299, 558], "string": [30, 101, 133, 138, 140, 151, 161, 164, 166, 174, 176, 181, 189, 190, 191, 193, 196, 212, 228, 231, 240, 244, 386, 391, 392, 395, 400, 401, 424, 453, 457, 460, 471, 477, 486, 542, 558], "strip": [52, 53, 55, 68, 69, 133, 325, 326, 328, 341, 342, 386], "strip_equivalent_nod": [61, 133, 334, 386], "strip_unused_lib": [133, 386], "strip_unused_nod": [61, 133, 334, 386], "stripequivalentnodesoptim": [68, 341], "stripunusednodesoptim": [69, 342], "stroke": 559, "structur": [175, 186, 187, 196, 280, 424, 471, 475, 483, 493, 538, 549, 550, 551, 560], "stsb": 560, "student": [163, 167, 196, 210, 530, 560], "student1_layer_name1": 196, "student1_layer_name2": 196, "student2_layer_name1": 196, "student2_layer_name2": 196, "student_layer_nam": 196, "student_layer_output_process": 196, "student_loss": 530, "student_model": [164, 196, 543], "student_output": 530, "style": [204, 217, 282, 527, 537], "style_fold": 217, "style_transfer_dataset": 216, "styletransferdataset": 217, "sub": [51, 145, 151, 174, 324, 421, 527, 559], "sub_class": [235, 263], "sub_modul": 527, "subclass": [3, 21, 146, 166, 176, 181, 189, 191, 205, 209, 212, 219, 226, 235, 246, 275, 394, 417, 500], "subfold": 212, "subgraph": [40, 51, 90, 144, 313, 324, 552, 559], "subgraphstyl": 559, "subject": 540, "submit": [496, 550], "subpixel": 222, "subprocess": [154, 527, 528], "subsect": [493, 557], "subsequ": [185, 501], "subset": [212, 215], "subsidiari": 540, "substanti": 552, "substitut": [302, 306, 486], "success": 539, "successfulli": [497, 499, 531, 550], "successor": [76, 77, 78, 79, 348, 349, 350, 351], "sudo": 534, "suffici": 556, "suffix": [133, 386], "suggest": [483, 497, 527, 556], "suit": 539, "suitabl": 483, "sum": [196, 235], "summar": [131, 384, 527], "summari": [151, 154, 454, 560], "summary_benchmark": 151, "summary_latency_throughput": 154, "super": 233, "supplement": 486, "suppli": 1, "support": [1, 29, 30, 31, 82, 89, 149, 152, 162, 164, 166, 171, 177, 184, 188, 196, 199, 200, 209, 210, 212, 219, 222, 226, 227, 235, 236, 240, 246, 263, 273, 279, 282, 354, 395, 417, 441, 453, 454, 460, 466, 467, 471, 473, 475, 476, 481, 484, 487, 493, 499, 501, 527, 536, 541, 543, 550, 553, 556, 559], "supported_float_module_typ": 395, "supported_lay": [145, 424, 437, 453], "supported_op_typ": [48, 321], "supported_typ": 453, "suppos": [493, 557], "suppress": [482, 493, 554, 557], "sure": [176, 181, 189, 191, 499, 525], "surg": [140, 400], "surrog": 559, "suyu": 540, "sweet": [480, 557], "switch": [70, 343], "switch_optim": [61, 334], "switchoptim": [70, 343], "sy": [392, 457, 471, 527, 560], "sym": [29, 30, 31, 413, 417, 437, 457, 501, 502, 535, 551, 554], "sym_full_rang": 554, "sym_model": 1, "symbol": [1, 30, 144, 145, 228, 236, 263, 497, 545], "symbol_r": 228, "symbolblock": 1, "symbolic_trac": 136, "symmetr": [98, 413, 417, 467, 486, 502, 551, 554, 558, 559], "symnet": 1, "synchron": [451, 559], "syntax": 535, "sys_nic": 499, "system": [135, 140, 151, 154, 400, 471, 478, 479, 489, 494, 525, 546, 549, 560], "systemat": [480, 485, 557], "szymon": 526, "t": [30, 52, 53, 55, 128, 140, 150, 176, 196, 226, 233, 325, 326, 328, 381, 400, 479, 480, 481, 486, 488, 497, 500, 527, 531, 543, 544, 549, 551, 554, 559], "t10k": 212, "t5": 549, "t5norm": 557, "tab": 233, "tabl": [174, 185, 471, 478, 499, 502, 533, 536, 546, 560], "table_entri": 471, "taco": [499, 550], "tag": [140, 244, 391, 400, 493, 557], "tail": 482, "tailor": [482, 489], "take": [3, 176, 196, 199, 200, 204, 226, 235, 236, 263, 267, 388, 454, 479, 482, 486, 489, 495, 497, 499, 528, 535, 543, 549, 551, 553, 554, 558, 559], "taken": [199, 200, 236, 263, 454, 551], "tamper": [140, 400], "tar": 212, "target": [1, 29, 30, 87, 145, 174, 191, 193, 196, 267, 289, 410, 424, 453, 467, 477, 483, 531, 543, 549, 558, 559], "target_block": 453, "target_boxes_num": 542, "target_depth": [145, 421], "target_dtyp": [278, 410], "target_height": [226, 558], "target_lay": 174, "target_linear": 175, "target_op_lut": 174, "target_spars": [176, 196, 543, 549], "target_sparsity_ratio": 181, "target_width": [226, 558], "targetspac": 267, "task": [128, 210, 217, 235, 381, 477, 480, 482, 489, 493, 494, 530, 533, 538, 542, 543, 549, 552, 554, 557], "taskdataset": 560, "taskset": [489, 494], "tbb": [451, 534], "td": 559, "teacher": [163, 196, 530, 543, 560], "teacher_layer_nam": 196, "teacher_layer_name1": 196, "teacher_layer_name2": 196, "teacher_layer_output_process": 196, "teacher_logit": 543, "teacher_model": [164, 196, 530, 543], "team": [159, 233, 495, 553], "technic": 499, "techniqu": [162, 227, 473, 475, 481, 486, 487, 493, 499, 536, 538, 543, 548, 549, 550, 551, 560], "technologi": [212, 478, 541, 543, 546], "tell": [140, 235, 263, 400], "temp_path": [125, 284], "temperatur": [164, 196, 494, 543], "templat": [189, 422, 443, 543, 549], "template_config": 193, "temporari": [125, 145, 284, 417, 471, 495], "temporarili": 495, "ten": 489, "tencent": [499, 550], "tend": 549, "tensor": [1, 2, 3, 30, 31, 55, 90, 125, 133, 135, 140, 141, 145, 170, 171, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 196, 226, 244, 272, 284, 328, 386, 391, 392, 400, 402, 408, 410, 412, 415, 416, 417, 421, 426, 427, 429, 430, 437, 442, 445, 451, 453, 462, 464, 467, 470, 471, 476, 477, 478, 483, 486, 497, 502, 527, 528, 546, 549, 551, 555, 558, 559], "tensor2tensor": 229, "tensor_data": [74, 347, 392, 471, 472], "tensor_dict": 500, "tensor_dtyp": 90, "tensor_nam": [30, 133, 140, 141, 386, 400, 402], "tensor_to_nod": 1, "tensor_v": 133, "tensor_valu": 30, "tensorboard": [161, 196, 460, 471, 500, 543], "tensorcollector": 1, "tensordataset": 210, "tensorflow": [37, 39, 60, 61, 62, 72, 80, 86, 87, 88, 89, 90, 91, 95, 96, 97, 99, 102, 115, 125, 126, 127, 130, 133, 164, 166, 192, 196, 209, 210, 211, 212, 215, 217, 219, 226, 227, 229, 231, 235, 236, 244, 257, 258, 261, 262, 263, 273, 463, 464, 471, 485, 496, 500, 501, 507, 526, 527, 528, 530, 532, 535, 536, 538, 543, 544, 545, 546, 549, 550, 556, 557, 559], "tensorflow1": 209, "tensorflow_addon": 166, "tensorflow_dataload": 261, "tensorflow_itex": [212, 215, 217, 219, 528], "tensorflow_itexadaptor": [32, 290], "tensorflow_model": [238, 261], "tensorflowadam": 166, "tensorflowadamw": 166, "tensorflowadaptor": [32, 290], "tensorflowbasemodel": [244, 261, 391], "tensorflowbertdataload": 209, "tensorflowbertdataset": 210, "tensorflowcheckpointmodel": [244, 391], "tensorflowcifar10": 212, "tensorflowcifar100": 212, "tensorflowcocomap": 235, "tensorflowconfig": 290, "tensorflowconfigconvert": 290, "tensorflowcriterion": 164, "tensorflowcroptoboundingbox": 226, "tensorflowcrossentropyloss": 164, "tensorflowdataload": [209, 261], "tensorflowdataset": 212, "tensorflowfashionmnist": 212, "tensorflowfilt": 219, "tensorflowglobalconfig": 390, "tensorflowimagenetdataset": 215, "tensorflowimagenetraw": 215, "tensorflowimagerecord": 212, "tensorflowknowledgedistillationloss": 164, "tensorflowknowledgedistillationlossextern": 164, "tensorflowknowledgedistillationlosswrapp": 164, "tensorflowllmmodel": [244, 391], "tensorflowmap": 235, "tensorflowmetr": 235, "tensorflowmnist": 212, "tensorflowmodel": [244, 391], "tensorflowmodelzoobertdataload": 209, "tensorflowmodelzoobertdataset": [210, 211], "tensorflowoptim": 166, "tensorflowparserfactori": 253, "tensorflowprofilingpars": 254, "tensorflowqatmodel": 244, "tensorflowqdqtoonnxqdqconvert": 127, "tensorflowqueri": [32, 290, 500], "tensorflowrandomhorizontalflip": 226, "tensorflowrandomverticalflip": 226, "tensorflowresizecropimagenettransform": 222, "tensorflowresizewithratio": 226, "tensorflowsavedmodelmodel": [244, 391], "tensorflowsgd": 166, "tensorflowshiftrescal": 222, "tensorflowsparsecategoricalcrossentropi": 164, "tensorflowtfrecorddataset": 212, "tensorflowtopk": 235, "tensorflowtransform": 226, "tensorflowtranspos": 226, "tensorflowtransposelastchannel": 222, "tensorflowvocmap": 235, "tensorflowvocrecord": 212, "tensorflowwrapfunct": 226, "tensorproto": [30, 90], "tensorrt": [30, 526, 544, 551], "tensorrtexecutionprovid": [544, 551], "tensors_kl": 1, "tensors_minmax": 1, "teq": [432, 441, 443, 483, 494, 499, 550, 552, 554], "teq_arg": 482, "teq_quantize_entri": 441, "teqconfig": [441, 443, 457, 482, 494], "teqlinearfakequ": [142, 433], "tequant": 436, "term": [163, 182, 183, 188, 190, 483, 486, 496, 526, 540, 542, 547, 548, 559], "test": [151, 196, 226, 453, 496, 499, 560], "test_func": 531, "text": [90, 189, 225, 226, 228, 233, 478, 480, 482, 493, 533, 540, 546, 549, 550, 554, 557, 558, 560], "tf": [90, 101, 126, 133, 174, 193, 209, 210, 211, 212, 226, 242, 244, 287, 304, 306, 362, 386, 388, 390, 391, 392, 484, 486, 499, 527, 531, 539, 545, 550, 553, 558], "tf1": [209, 545], "tf2": 545, "tf2onnx": [196, 461], "tf2onnx_convert": 96, "tf2onnx_util": 86, "tf2onnxconfig": [196, 533], "tf_criteria": 171, "tf_modul": 262, "tf_to_fp32_onnx": 463, "tf_to_int8_onnx": 463, "tfdatadataload": 209, "tfmodelzoocollecttransform": 226, "tfrecord": [210, 211, 212], "tfslimnetsfactori": [242, 392], "tfsquadv1modelzooposttransform": 226, "tfsquadv1posttransform": 226, "th": [74, 75, 347], "thalaiyasingam": 549, "than": [40, 133, 210, 226, 313, 392, 422, 447, 471, 478, 482, 493, 499, 525, 537, 546, 547, 548, 549, 551, 554, 556, 558, 559], "theblok": 499, "thei": [140, 282, 400, 479, 495, 527, 535, 543, 547], "them": [140, 174, 210, 400, 482, 483, 493, 497, 502, 528, 533, 535, 537, 539, 548, 549, 554, 559], "themselv": 551, "theoret": [482, 493, 551, 554], "therefor": [488, 493, 497, 543, 549, 551, 552, 555, 557], "thi": [29, 71, 95, 117, 124, 128, 132, 135, 138, 140, 145, 150, 152, 153, 154, 163, 167, 172, 174, 176, 178, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 196, 199, 200, 209, 210, 211, 212, 213, 214, 215, 217, 226, 228, 231, 232, 233, 235, 236, 246, 263, 267, 272, 281, 282, 344, 361, 373, 380, 381, 385, 388, 396, 400, 401, 417, 421, 445, 449, 453, 454, 470, 471, 475, 477, 479, 480, 481, 482, 484, 485, 486, 487, 493, 494, 495, 496, 497, 499, 500, 501, 502, 526, 527, 528, 530, 531, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 549, 551, 553, 554, 555, 556, 557, 558, 559], "think": [482, 554], "third": [231, 496, 540], "those": [59, 140, 272, 332, 400, 471, 481, 486, 493, 530, 537, 543, 544, 548, 549, 551, 559], "though": [493, 557], "thread": [151, 196, 258, 262, 494, 528, 534], "threaten": 495, "three": [59, 193, 210, 264, 266, 332, 479, 483, 487, 493, 497, 500, 501, 526, 539, 544, 548, 551, 553, 556, 557], "threshold": [1, 147, 458, 466, 542], "through": [135, 199, 200, 235, 236, 263, 481, 482, 483, 493, 499, 525, 535, 537, 538, 542, 547, 548, 549, 551, 554], "throughput_pattern": 488, "throw": 528, "thu": [231, 493, 543, 549, 551], "thudm": 541, "tian": 540, "tiiuae": [480, 541, 557], "tile": 527, "till": [161, 471, 559], "tim": [482, 493, 554], "time": [133, 140, 161, 196, 226, 235, 246, 267, 386, 392, 400, 471, 481, 482, 483, 485, 487, 489, 493, 494, 499, 501, 528, 531, 534, 543, 547, 549, 550, 551, 554, 556, 557, 558, 559], "time_limit": 471, "timeout": [196, 543, 559], "tinybert": 560, "tip": 489, "titl": [471, 540, 559], "tloss": 531, "tmp_file_path": [392, 471], "to_devic": 453, "to_dtyp": 453, "to_numpi": 30, "to_quant_block_nam": [422, 443, 453], "toarrai": [226, 558], "todo": [156, 210, 213, 231, 279, 388, 424, 447], "togeth": [152, 196, 226, 539, 550, 558], "togethercomput": [480, 557], "token": [210, 223, 226, 228, 229, 422, 435, 457, 467, 480, 482, 493, 494, 542, 543, 554, 556, 557, 558, 559], "token_is_max_context": 226, "token_to_orig_map": 226, "token_type_id": [210, 543], "tokenzi": 225, "toler": [153, 486], "tolerable_loss": [153, 196, 487, 543, 559], "tolist": 557, "tondarrai": 558, "tondarraytransform": 226, "tool": [3, 133, 386, 463, 471, 493, 499, 500, 543, 549, 550, 551], "toolchain": [534, 550], "toolkit": [475, 497, 539, 550], "top": [226, 235, 496, 542, 558], "top1": [454, 542, 549, 551, 560], "topilimag": 558, "topk": [235, 263, 531, 542, 543, 551], "torch": [134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 149, 153, 160, 171, 174, 175, 177, 185, 196, 227, 236, 263, 464, 467, 470, 476, 477, 478, 479, 480, 481, 482, 487, 489, 493, 494, 497, 502, 503, 531, 533, 534, 536, 543, 544, 545, 546, 551, 554, 557], "torch2onnx": [196, 461], "torch2onnxconfig": [196, 533], "torch_dtyp": [499, 502], "torch_load": 137, "torch_model": 238, "torch_to_fp32_onnx": 464, "torch_to_int8_onnx": 464, "torch_util": [443, 552, 557], "torchbaseconfig": 443, "torchdynamo": 483, "torchfunctyp": 410, "torchimport": 483, "torchscript": [446, 533, 552, 557], "torchsmoothqu": [416, 417, 557], "torchvis": [226, 477, 499, 532], "toronto": 212, "torr": 549, "total": [30, 181, 226, 235, 422, 482, 549, 554, 558, 560], "total_block_arg": 145, "total_block_kwarg": 145, "total_execution_tim": 252, "total_valu": [145, 437], "totensor": [543, 558], "tow": 531, "toward": 495, "tpe": 198, "tpetunestrategi": 200, "tqdm": [30, 543], "trace": [135, 144, 145, 174, 196, 270, 412, 416, 417, 421, 442, 445, 464, 481, 483, 497, 559], "trace_and_fuse_sub_graph": 144, "trace_gptq_target_block": 424, "traceabl": 497, "traced_model": [144, 417], "tracer": 497, "track": [161, 556], "trackabl": [133, 386], "trade": [482, 493, 554], "tradit": [486, 549], "train": [29, 42, 65, 149, 163, 182, 183, 186, 188, 196, 199, 200, 210, 212, 226, 227, 263, 315, 338, 417, 424, 443, 460, 478, 479, 480, 481, 482, 483, 485, 487, 499, 500, 501, 506, 530, 533, 536, 538, 544, 546, 548, 550, 552, 554, 556, 557, 559], "train_cfg": 460, "train_dataload": [543, 549, 551], "train_dataset": [531, 551], "train_fn": 482, "train_fun": 543, "train_func": [454, 531, 543, 551], "train_kwarg": 531, "train_load": 531, "train_loop": [454, 543, 548], "train_sampl": 531, "trainabl": [436, 482, 499, 550, 554], "trainableequivalenttransform": 436, "trainer": 543, "training_arg": 543, "training_func": 543, "training_func_for_nc": 530, "trane": 483, "transact": 557, "transfer": [163, 217, 493, 530, 543, 557], "transform": [30, 35, 128, 130, 131, 132, 143, 188, 210, 211, 212, 213, 214, 215, 217, 219, 221, 308, 381, 383, 384, 385, 388, 410, 416, 417, 421, 424, 436, 443, 449, 451, 453, 480, 481, 482, 485, 493, 497, 499, 526, 530, 531, 532, 536, 541, 543, 549, 550, 553, 554, 557, 559, 560], "transform_func": 226, "transform_graph": [96, 362], "transform_list": [226, 558], "transform_registri": 226, "transform_typ": 226, "transformer_block": 424, "transformerbasedmodelblockpatterndetector": [143, 421], "transformers_nam": 424, "transformers_pr": 424, "translat": [228, 229, 478, 546, 549, 559], "translation_corpu": 229, "transpos": [30, 58, 180, 222, 226, 331, 463, 554, 558], "travers": [487, 501, 502, 554, 559], "treat": [140, 400, 453, 528], "tree": [189, 279], "tri": [152, 196, 527, 559], "trial": [153, 487, 559], "trigger": [151, 154, 181, 488], "troll": 495, "trt_env_setup": 30, "true": [1, 30, 31, 70, 98, 131, 133, 140, 151, 153, 196, 208, 210, 212, 213, 225, 226, 229, 235, 246, 263, 278, 282, 293, 294, 295, 299, 300, 304, 343, 384, 386, 388, 400, 402, 410, 416, 417, 422, 424, 427, 431, 433, 435, 436, 437, 443, 445, 453, 457, 460, 464, 467, 470, 471, 476, 480, 481, 482, 483, 484, 486, 487, 488, 493, 494, 501, 528, 531, 535, 542, 543, 551, 552, 554, 557, 558, 559], "true_sequenti": [443, 457, 482, 554], "truncat": [210, 226, 422, 443, 558], "trust": [140, 400], "trust_remote_cod": [435, 446, 494], "truth": [232, 233], "try": [208, 244, 391, 486, 493, 497, 499, 534, 549, 551, 557, 559], "try_cnt": [133, 386], "try_loading_kera": [244, 391], "tunabl": [152, 156], "tunable_typ": 156, "tune": [1, 151, 152, 153, 156, 159, 196, 199, 200, 210, 212, 236, 246, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 303, 417, 442, 443, 454, 471, 479, 480, 481, 482, 483, 487, 490, 494, 499, 500, 501, 526, 527, 528, 531, 536, 538, 540, 543, 544, 547, 549, 550, 553, 555, 556], "tune_cfg": [1, 134, 145, 416, 417, 421, 453, 500, 502, 559], "tune_config": [153, 303, 442, 479, 483, 484, 485, 486, 487, 501], "tuner": [199, 200, 236, 263, 454, 551], "tunestrategi": [275, 559], "tunestrategymeta": 275, "tuning_cfg_to_fw": 501, "tuning_config": 153, "tuning_criterion": [196, 543, 547, 556, 559], "tuning_history_path": 471, "tuning_items_prior": 278, "tuning_order_lst": 278, "tuning_param": 155, "tuning_sampl": 277, "tuning_spac": [277, 278, 280], "tuning_strategi": 196, "tuning_struct": [277, 278, 279], "tuningconfig": [153, 303, 442, 479, 483, 484, 485, 486, 487], "tuningcriterion": [196, 543, 547, 556, 559], "tuningitem": 279, "tuninglogg": [153, 159], "tuningmonitor": 153, "tuningord": 278, "tuningparam": 156, "tuningsampl": 278, "tuningspac": [278, 279], "tupl": [1, 90, 133, 145, 153, 196, 199, 200, 222, 226, 236, 263, 278, 303, 306, 403, 410, 412, 415, 416, 417, 421, 422, 429, 430, 439, 441, 442, 443, 445, 453, 454, 464, 470, 483, 486, 501, 527, 542, 543, 551, 558], "turbo": 560, "turn": [542, 552], "tutori": [475, 497, 550], "twitter": 550, "two": [133, 135, 140, 151, 175, 180, 187, 191, 212, 217, 231, 273, 400, 471, 477, 478, 479, 481, 482, 485, 487, 490, 493, 496, 497, 527, 528, 531, 533, 535, 543, 544, 546, 549, 551, 553, 554, 556, 557, 559], "txt": [215, 534, 539], "type": [1, 3, 29, 30, 31, 59, 81, 90, 101, 107, 117, 125, 133, 134, 135, 140, 145, 146, 152, 153, 154, 156, 160, 161, 164, 166, 174, 175, 176, 181, 189, 190, 191, 193, 195, 196, 208, 210, 212, 219, 226, 228, 229, 231, 235, 244, 246, 267, 268, 275, 279, 281, 282, 284, 302, 306, 332, 353, 373, 386, 391, 392, 395, 396, 400, 402, 407, 408, 410, 412, 413, 415, 417, 421, 422, 424, 429, 430, 431, 435, 437, 439, 441, 442, 443, 445, 449, 453, 464, 470, 471, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 500, 501, 531, 533, 535, 538, 543, 544, 546, 551, 552, 554, 556, 558, 559], "typealia": 527, "types_to_splic": [65, 338], "typic": [499, 530, 532, 549, 560], "u": [128, 150, 381], "ubuntu": [539, 560], "ubuntu24": 499, "ubyt": 212, "uint4": 502, "uint8": [30, 222, 231, 281, 413, 437, 443, 486, 493, 500, 535, 551, 558], "ultim": [493, 551], "ultra": [499, 539, 560], "unaccept": 495, "unari": 27, "unary_op": 16, "unarydirect8bitoper": 27, "unaryoper": 27, "unbalanc": 560, "uncas": [210, 226, 558, 560], "uncertain": 549, "undefin": [140, 193, 400], "under": [95, 196, 212, 361, 392, 453, 467, 470, 487, 496, 499, 540, 542, 543, 548, 549, 550, 552, 554, 559], "underli": [52, 53, 55, 140, 325, 326, 328, 400], "understand": [475, 493, 551], "understudi": 228, "unicod": 225, "unicodedecodeerror": [140, 400], "unicoderegex": 228, "unifi": [159, 393, 439, 500, 501, 502, 528, 537, 538, 542, 543, 545], "uniform": [482, 526, 554], "uniformli": [482, 554], "union": [152, 235, 395, 439, 442, 443, 453, 454, 483, 486, 542], "uniqu": [231, 493, 551], "unique_id": 226, "unit": [176, 294, 496, 549], "unit_scal": [396, 477], "unk": 225, "unk_token": 225, "unless": [140, 400, 535], "unlik": 486, "unnecessari": 543, "unpack": [425, 433], "unpack_weight": 433, "unpack_zp": 433, "unpackedweightonlylinearparam": 433, "unpickl": [138, 140, 400, 401], "unpicklingerror": [138, 401], "unpreced": 549, "unquant": 410, "unquantized_node_set": 410, "unsaf": [140, 400], "unseen": [486, 493, 551], "unset": 31, "unsign": [145, 281, 502, 554], "unstructur": [196, 538, 549, 560], "unsupport": [533, 543, 549], "until": [417, 477, 501, 559], "untrac": 497, "untrust": [140, 400], "unus": [69, 133, 342, 386, 453], "unwelcom": 495, "up": [1, 85, 185, 226, 356, 421, 477, 493, 499, 531, 532, 534, 535, 538, 549, 550, 551, 556, 558, 559], "up1": 535, "up2": 535, "updat": [59, 141, 145, 170, 176, 193, 235, 263, 332, 402, 417, 421, 475, 482, 534, 541, 542, 543, 549, 554, 557, 559], "update_config": 196, "update_modul": [141, 402], "update_param": 193, "update_sq_scal": [145, 417], "upgrad": 543, "upload": 538, "upon": 494, "upstream": [435, 446], "url": [212, 424, 496, 499, 539, 540, 549], "us": [1, 3, 21, 29, 30, 31, 33, 34, 55, 88, 90, 101, 126, 135, 140, 145, 151, 152, 154, 161, 164, 166, 170, 174, 176, 181, 185, 186, 189, 191, 192, 196, 199, 200, 208, 209, 210, 211, 212, 213, 214, 217, 225, 226, 228, 229, 231, 235, 246, 258, 262, 263, 267, 270, 272, 275, 279, 281, 282, 287, 289, 290, 302, 306, 307, 328, 388, 392, 394, 395, 400, 408, 409, 410, 412, 413, 416, 417, 420, 421, 422, 429, 430, 431, 435, 437, 442, 445, 446, 447, 451, 453, 454, 457, 458, 459, 460, 463, 464, 465, 467, 471, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 493, 494, 495, 496, 497, 500, 501, 525, 526, 527, 530, 531, 533, 534, 535, 536, 537, 540, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560], "usabl": 499, "usag": [145, 152, 153, 156, 209, 231, 282, 392, 437, 447, 449, 450, 453, 483, 484, 489, 493, 501, 531, 532, 547, 554, 558], "use_auto_clip": [443, 482], "use_auto_scal": [443, 482], "use_bf16": [33, 34, 307], "use_bia": [293, 294, 295, 299], "use_bp": 229, "use_double_qu": [443, 482], "use_full_length": 554, "use_full_rang": [443, 482], "use_layer_wis": [424, 443, 457, 482], "use_max_length": [424, 554], "use_mse_search": [443, 457, 482], "use_optimum_format": [433, 467, 554], "use_qdq": 443, "use_sym": [443, 482, 487], "user": [140, 151, 166, 174, 186, 193, 196, 199, 200, 212, 215, 219, 226, 235, 236, 246, 263, 268, 281, 400, 410, 417, 421, 443, 453, 454, 471, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 493, 494, 497, 500, 501, 502, 506, 525, 527, 528, 530, 533, 535, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559], "user_cfg": [417, 421], "user_config": 193, "user_eval_fns1": 153, "user_eval_fns2": 153, "user_eval_fns3": 153, "user_eval_fns4": 153, "user_metr": [235, 263], "user_model": [478, 536, 546], "user_obj_cfg": 246, "user_object": 246, "user_postprocess": 224, "user_processor_typ": 453, "userfloatmodel": [476, 481], "usr": 534, "usr_cfg": 246, "usual": [210, 486, 493, 501, 548, 549, 551, 552, 557], "utf": [140, 225, 400], "util": [0, 4, 90, 95, 96, 124, 127, 134, 135, 136, 137, 144, 152, 153, 155, 165, 171, 194, 196, 227, 229, 271, 291, 302, 303, 305, 306, 399, 406, 411, 414, 418, 422, 432, 440, 441, 443, 475, 477, 486, 489, 501, 502, 503, 526, 527, 531, 543, 549, 551, 559], "v": [549, 559], "v0": [480, 541, 557], "v1": [133, 222, 232, 233, 235, 244, 386, 391, 480, 491, 531, 533, 534, 542, 545, 549, 555, 556, 557, 560], "v14": 228, "v2": [135, 270, 480, 528, 531, 533, 534, 541, 555, 557, 559, 560], "v3": [491, 560], "v4": 560, "v5": 496, "v5s6": 560, "val": [133, 193, 212, 215, 430, 543], "val2017": 211, "val_dataload": [484, 543, 551], "val_dataset": [484, 543, 551], "val_load": 551, "val_map": 215, "valid": [40, 52, 53, 90, 159, 181, 184, 193, 196, 212, 231, 244, 293, 295, 298, 299, 313, 325, 326, 391, 413, 453, 494, 499, 500, 532, 535, 538, 540, 543, 549, 551, 554, 555], "valid_keras_format": 392, "valid_mixed_precis": 535, "valid_reshape_input": [52, 53, 325, 326], "validate_and_inference_input_output": [244, 391], "validate_graph_nod": [244, 391], "validate_modul": 453, "valu": [3, 30, 31, 41, 52, 53, 55, 74, 75, 90, 128, 133, 140, 145, 150, 151, 170, 174, 175, 185, 192, 193, 196, 199, 200, 210, 213, 214, 222, 226, 231, 235, 236, 263, 267, 272, 279, 281, 282, 314, 325, 326, 328, 347, 381, 388, 400, 402, 417, 421, 429, 433, 454, 458, 460, 471, 476, 477, 478, 479, 480, 482, 485, 486, 493, 497, 501, 502, 526, 535, 542, 543, 544, 546, 547, 549, 551, 554, 557, 558, 559], "valuabl": 549, "value_layer_nam": 185, "valueerror": [52, 53, 55, 145, 231, 282, 325, 326, 328, 437, 449, 534], "valueinfo": 30, "values_from_const": [52, 53, 55, 325, 326, 328], "vanhouck": 526, "vanilla": [500, 501, 538], "vari": [549, 557, 560], "variabl": [30, 138, 151, 190, 196, 212, 267, 281, 401, 447, 479, 483, 489, 494, 549, 559], "varianc": [128, 150, 381], "variant": 206, "varieti": [483, 487, 532, 559], "variou": [236, 393, 478, 481, 483, 486, 502, 538, 546, 549, 552], "vault": 499, "vcvtne2ps2bf16": [479, 544], "vcvtneps2bf16": [479, 544], "vdpbf16p": [479, 544], "vecchio": 539, "vector": 479, "ventura": 539, "verbos": [30, 267, 429, 464], "veri": [475, 482, 493, 543, 551, 554, 559], "verifi": [533, 541], "version": [1, 39, 89, 142, 145, 155, 174, 196, 227, 312, 433, 451, 463, 464, 475, 480, 495, 497, 499, 500, 527, 535, 539, 540, 543, 550, 557, 559], "version1": [133, 392, 471], "version1_eq_version2": [133, 392, 471], "version1_gt_version2": [133, 392, 471], "version1_gte_version2": [133, 392, 471], "version1_lt_version2": [133, 392, 471], "version1_lte_version2": [133, 392, 471], "version2": [133, 392, 471], "vertic": [180, 226, 558], "vgg": 560, "vgg16": [533, 560], "vgg19": 560, "via": [443, 482, 493, 495, 499, 531, 538, 543, 549, 550], "video": 422, "view": [496, 499, 532, 555], "viewpoint": 495, "vincent": 526, "violat": [138, 401], "virtual": [281, 550], "visibl": 488, "vision": [477, 493, 499, 533, 557], "visit": 560, "visual": [196, 556, 559], "vit": 560, "vmware": 550, "vnni": [493, 532, 538, 551], "voc": [212, 235], "vocab": 225, "vocab_fil": [225, 226, 558], "vocabulari": [210, 225, 226, 558], "vocmap": 542, "vscode": 527, "vtune": 540, "w": [31, 226, 424, 480, 493, 549, 557, 558], "w8a8": [409, 476, 481, 482, 493, 552, 554], "w8a8pt2equant": 409, "w_algo": 443, "w_dq": [493, 557], "w_dtype": [443, 478, 480, 481, 546], "w_fp32": [128, 150, 381], "w_granular": 443, "w_int8": [128, 150, 381], "w_q": [493, 557], "w_scale": [493, 557], "w_sym": 443, "wa": [140, 196, 400, 478, 480, 500, 543, 546, 550, 559], "wai": [174, 211, 212, 215, 244, 391, 394, 482, 485, 493, 502, 528, 542, 543, 548, 549, 551, 554, 557, 559], "wanda": 171, "want": [52, 53, 55, 174, 196, 208, 210, 268, 325, 326, 328, 454, 497, 500, 528, 531, 543, 547, 551, 554, 556, 559], "waq": 557, "warm": 421, "warmup": [196, 525, 543], "warn": [417, 468, 527], "wasn": [140, 400], "wasserblat": 549, "we": [29, 30, 52, 53, 55, 59, 71, 128, 140, 149, 150, 151, 153, 174, 178, 185, 196, 209, 228, 231, 270, 325, 326, 328, 332, 344, 381, 400, 417, 475, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 493, 494, 495, 497, 499, 500, 501, 502, 527, 528, 531, 533, 535, 536, 541, 542, 543, 547, 548, 549, 551, 552, 554, 555, 556, 557, 559], "web": 499, "websit": 539, "wechat": [499, 550], "wei": [482, 493, 554, 557], "weight": [29, 30, 31, 45, 46, 107, 125, 126, 128, 133, 135, 145, 150, 153, 170, 171, 175, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 192, 196, 235, 263, 270, 279, 281, 284, 287, 318, 319, 381, 402, 417, 426, 432, 433, 435, 436, 437, 443, 446, 464, 471, 472, 475, 476, 477, 480, 481, 483, 484, 485, 486, 487, 494, 500, 501, 502, 526, 530, 535, 536, 537, 541, 543, 547, 549, 550, 551, 552, 557, 559], "weight_algorithm": 304, "weight_bit": 501, "weight_clip": [304, 417], "weight_config": [31, 424, 436], "weight_correct": [148, 196, 551], "weight_decai": 543, "weight_dict": 135, "weight_dtyp": [300, 304, 457, 484], "weight_empir": [128, 381], "weight_granular": [300, 304, 484], "weight_max_lb": 417, "weight_max_valu": [293, 294, 295, 298, 299], "weight_min_valu": [293, 294, 295, 298, 299], "weight_name_map": [125, 284], "weight_onli": [4, 196, 398, 443, 470, 478, 527, 546, 552, 554], "weight_shap": 31, "weight_slim": [173, 185], "weight_sym": [300, 304, 484, 486, 487], "weight_tensor": 471, "weight_typ": 464, "weightcorrect": 150, "weightdetail": 471, "weightonli": 31, "weightonlylinear": [433, 482, 554], "weightonlyqu": 482, "weightonlyquantsampl": 278, "weightpruningconfig": [196, 543, 548, 549], "weights_detail": 465, "weights_onli": [140, 400], "weightsdetail": 472, "weightsstatist": 472, "welcom": [474, 495, 496, 499, 561], "well": [199, 200, 236, 263, 454, 478, 493, 499, 527, 546, 549, 551, 555, 557], "wenhua": [482, 493], "were": [140, 235, 400, 549], "wget": 534, "what": [145, 181, 208, 235, 263, 421, 454, 486, 495, 550], "when": [30, 39, 49, 55, 133, 138, 140, 153, 175, 181, 186, 193, 196, 210, 211, 219, 226, 229, 263, 302, 306, 312, 322, 328, 386, 395, 400, 401, 410, 435, 445, 448, 454, 477, 481, 482, 486, 487, 488, 489, 493, 495, 501, 527, 528, 543, 549, 551, 554, 557, 558, 559], "where": [30, 140, 196, 231, 235, 281, 400, 412, 453, 471, 493, 502, 526, 557], "whether": [1, 30, 31, 90, 101, 133, 140, 145, 176, 196, 208, 210, 222, 226, 229, 231, 235, 306, 386, 392, 400, 413, 416, 417, 422, 424, 429, 430, 435, 437, 445, 451, 460, 467, 470, 471, 482, 488, 500, 542, 551, 554, 557, 558], "which": [1, 29, 41, 68, 95, 135, 140, 152, 170, 174, 175, 177, 181, 182, 183, 185, 188, 189, 191, 193, 196, 210, 211, 212, 222, 228, 233, 235, 240, 246, 263, 267, 314, 341, 361, 392, 395, 400, 417, 424, 429, 430, 435, 453, 471, 475, 477, 479, 481, 482, 483, 484, 486, 487, 493, 495, 497, 500, 501, 502, 526, 528, 531, 534, 535, 538, 542, 543, 544, 545, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559], "while": [175, 186, 193, 267, 479, 481, 482, 486, 493, 499, 500, 501, 532, 538, 544, 549, 551, 554, 557], "white_list": [152, 300, 304, 443], "white_module_list": 453, "white_nod": 2, "whitespac": [225, 233], "whitespace_token": 225, "whl": [499, 539], "who": [268, 495], "whole": [476, 493, 502, 551, 560], "whose": [149, 176, 244, 391, 417, 453, 537, 557, 559], "why": [493, 557], "wide": [479, 482, 493, 499, 532, 544, 549, 551], "wideresnet40": 560, "width": [180, 222, 226, 493, 526, 531, 549, 551, 558], "wiki": 495, "wikitext": 560, "window": [151, 154, 488, 489, 525, 539], "winter": [493, 557], "wip": 541, "wise": [128, 137, 139, 141, 150, 196, 267, 268, 272, 381, 399, 402, 408, 449, 475, 494, 501, 538, 549, 554, 557, 559], "wish": 540, "with_arg": 502, "within": [89, 152, 153, 182, 183, 188, 195, 231, 244, 258, 262, 391, 453, 479, 482, 494, 495, 497, 502, 526, 544, 549, 550, 554, 557, 559], "without": [34, 75, 133, 186, 226, 281, 386, 451, 478, 493, 495, 531, 543, 546, 549, 550, 551, 559], "wnli": [210, 542], "won": [196, 551, 554], "woq": [435, 443, 446, 478, 494, 499, 541, 546], "woq_config": 494, "woq_model": 494, "woqmodelload": 435, "word": [228, 482, 493, 527, 542, 549, 554, 560], "wordpiec": [225, 226, 558], "wordpiecetoken": 225, "work": [196, 302, 306, 483, 486, 488, 489, 493, 498, 501, 527, 528, 553, 554, 555, 557], "worker": [543, 551], "workflow": [475, 478, 499, 501, 502, 533, 536, 539, 544, 546], "workload": [471, 479, 550], "workload_loc": 471, "workshop": 550, "workspac": [161, 196, 470, 471, 545], "workspace_path": 196, "worth": [527, 549], "would": [481, 493, 496, 543, 549, 551, 557], "wrap": [1, 90, 101, 164, 231, 306, 390, 497, 531], "wrapmxnetmetr": 235, "wraponnxrtmetr": 235, "wrapped_lay": 101, "wrapper": [60, 87, 88, 89, 90, 107, 125, 134, 142, 153, 164, 171, 209, 226, 231, 235, 240, 244, 284, 333, 390, 391, 405, 433, 437, 486, 553], "wrapperlay": 417, "wrappytorchmetr": 235, "write": [133, 219, 386, 471, 531, 537, 543], "write_graph": [133, 386], "written": 543, "wt_compare_dict": 135, "www": [212, 560], "x": [1, 40, 59, 175, 196, 209, 226, 267, 282, 313, 332, 417, 453, 487, 493, 499, 526, 527, 531, 536, 539, 544, 545, 551, 552, 557, 558], "x1": [493, 557, 559], "x2": [493, 557, 559], "x86": [479, 544], "x86_64": 525, "x86_inductor_quant": 413, "x86inductorquant": [413, 476], "x_max": 267, "x_q": [493, 557], "x_scale": [493, 557], "x_tmp": [493, 557], "xdoctest": [140, 400], "xeon": [479, 488, 493, 499, 539, 540, 541, 544, 550, 551, 553, 560], "xgb": 196, "xgboost": 549, "xiao": [482, 493, 554, 557], "xiui": [482, 493, 554, 557], "xlm": [210, 560], "xlnet": [210, 560], "xpu": [196, 421, 447, 483, 486, 494, 551], "xpu_acceler": 447, "xx": [145, 437], "xx_func": 527, "xxx": [154, 212, 543], "xxy": 212, "xxz": 212, "y": [94, 196, 226, 267, 360, 493, 527, 534, 557, 558], "y_dq": [493, 557], "y_max": 267, "y_q": [493, 557], "yaml": [193, 196, 199, 200, 210, 212, 289, 470, 471, 500, 502, 537, 542, 543, 547, 558], "yaml_fil": [471, 531], "yaml_file_path": 531, "yao": 135, "year": 540, "yet": 551, "yield": [153, 199, 200, 208, 236, 263, 267, 282, 388, 454, 493, 528, 551, 559], "yolo": 560, "yolov3": 560, "yolov5": 549, "you": [29, 140, 196, 208, 210, 235, 263, 400, 417, 475, 477, 494, 496, 497, 501, 527, 528, 531, 534, 539, 540, 542, 544, 549, 551, 554, 555, 556, 557], "your": [208, 210, 475, 481, 494, 496, 499, 527, 528, 531, 540, 543, 549, 550, 556, 559], "your_node1_nam": 531, "your_node2_nam": 531, "your_script": 555, "yourmodel": 482, "yourself": 549, "youtub": 550, "yum": [534, 539], "yvinec": [493, 557], "z": [30, 488, 493, 526, 527, 557], "za": 488, "zafrir": 549, "zero": [3, 30, 31, 181, 193, 226, 293, 294, 295, 299, 417, 426, 429, 430, 437, 471, 478, 481, 482, 493, 546, 549, 551, 554, 557, 558, 559], "zero_grad": [531, 543, 549], "zero_point": [30, 31, 457], "zero_point_nam": 30, "zeropoint": [486, 493, 551], "zfnet": 560, "zhen": 135, "zhewei": 135, "zip": [417, 497], "zo_valu": 30, "zone": 550, "zoo": [209, 226, 499, 532, 560], "zp": [31, 433, 437, 493, 557], "\u03b1": 526, "\u03b2": 526, "\u2776": 501, "\u2777": 501, "\u2778": 501, "\u2779": 501, "\u277a": 501, "\u277b": 501, "\u277c": 501, "\u817e\u8baf\u4e91taco": 550, "\u96c6\u6210\u82f1\u7279\u5c14": 550}, "titles": ["neural_compressor.adaptor.mxnet_utils", "neural_compressor.adaptor.mxnet_utils.util", "neural_compressor.adaptor.ox_utils.calibration", "neural_compressor.adaptor.ox_utils.calibrator", "neural_compressor.adaptor.ox_utils", "neural_compressor.adaptor.ox_utils.operators.activation", "neural_compressor.adaptor.ox_utils.operators.argmax", "neural_compressor.adaptor.ox_utils.operators.attention", "neural_compressor.adaptor.ox_utils.operators.binary_op", "neural_compressor.adaptor.ox_utils.operators.concat", "neural_compressor.adaptor.ox_utils.operators.conv", "neural_compressor.adaptor.ox_utils.operators.direct_q8", "neural_compressor.adaptor.ox_utils.operators.embed_layernorm", "neural_compressor.adaptor.ox_utils.operators.gather", "neural_compressor.adaptor.ox_utils.operators.gavgpool", "neural_compressor.adaptor.ox_utils.operators.gemm", "neural_compressor.adaptor.ox_utils.operators", "neural_compressor.adaptor.ox_utils.operators.lstm", "neural_compressor.adaptor.ox_utils.operators.matmul", "neural_compressor.adaptor.ox_utils.operators.maxpool", "neural_compressor.adaptor.ox_utils.operators.norm", "neural_compressor.adaptor.ox_utils.operators.ops", "neural_compressor.adaptor.ox_utils.operators.pad", "neural_compressor.adaptor.ox_utils.operators.pooling", "neural_compressor.adaptor.ox_utils.operators.reduce", "neural_compressor.adaptor.ox_utils.operators.resize", "neural_compressor.adaptor.ox_utils.operators.split", "neural_compressor.adaptor.ox_utils.operators.unary_op", "neural_compressor.adaptor.ox_utils.quantizer", "neural_compressor.adaptor.ox_utils.smooth_quant", "neural_compressor.adaptor.ox_utils.util", "neural_compressor.adaptor.ox_utils.weight_only", "neural_compressor.adaptor.tensorflow", "neural_compressor.adaptor.tf_utils.graph_converter", "neural_compressor.adaptor.tf_utils.graph_converter_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", "neural_compressor.adaptor.tf_utils.graph_rewriter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.adaptor.tf_utils.graph_util", "neural_compressor.adaptor.tf_utils", "neural_compressor.adaptor.tf_utils.quantize_graph", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", "neural_compressor.adaptor.tf_utils.quantize_graph.qat", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph_common", "neural_compressor.adaptor.tf_utils.smooth_quant_calibration", "neural_compressor.adaptor.tf_utils.smooth_quant_scaler", "neural_compressor.adaptor.tf_utils.tf2onnx_converter", "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", "neural_compressor.adaptor.tf_utils.transform_graph", "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", "neural_compressor.adaptor.tf_utils.util", "neural_compressor.adaptor.torch_utils.bf16_convert", "neural_compressor.adaptor.torch_utils.hawq_metric", "neural_compressor.adaptor.torch_utils", "neural_compressor.adaptor.torch_utils.layer_wise_quant", "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", "neural_compressor.adaptor.torch_utils.model_wrapper", "neural_compressor.adaptor.torch_utils.pattern_detector", "neural_compressor.adaptor.torch_utils.symbolic_trace", "neural_compressor.adaptor.torch_utils.util", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.base_config", "neural_compressor.common.base_tuning", "neural_compressor.common.benchmark", "neural_compressor.common", "neural_compressor.common.tuning_param", "neural_compressor.common.utils.constants", "neural_compressor.common.utils", "neural_compressor.common.utils.logger", "neural_compressor.common.utils.save_load", "neural_compressor.common.utils.utility", "neural_compressor.common.version", "neural_compressor.compression.callbacks", "neural_compressor.compression.distillation.criterions", "neural_compressor.compression.distillation", "neural_compressor.compression.distillation.optimizers", "neural_compressor.compression.distillation.utility", "neural_compressor.compression.hpo", "neural_compressor.compression.hpo.sa_optimizer", "neural_compressor.compression.pruner.criteria", "neural_compressor.compression.pruner", "neural_compressor.compression.pruner.model_slim.auto_slim", "neural_compressor.compression.pruner.model_slim", "neural_compressor.compression.pruner.model_slim.pattern_analyzer", "neural_compressor.compression.pruner.model_slim.weight_slim", "neural_compressor.compression.pruner.patterns.base", "neural_compressor.compression.pruner.patterns", "neural_compressor.compression.pruner.patterns.mha", "neural_compressor.compression.pruner.patterns.ninm", "neural_compressor.compression.pruner.patterns.nxm", "neural_compressor.compression.pruner.pruners.base", "neural_compressor.compression.pruner.pruners.basic", "neural_compressor.compression.pruner.pruners.block_mask", "neural_compressor.compression.pruner.pruners", "neural_compressor.compression.pruner.pruners.mha", "neural_compressor.compression.pruner.pruners.pattern_lock", "neural_compressor.compression.pruner.pruners.progressive", "neural_compressor.compression.pruner.pruners.retrain_free", "neural_compressor.compression.pruner.pruning", "neural_compressor.compression.pruner.regs", "neural_compressor.compression.pruner.schedulers", "neural_compressor.compression.pruner.tf_criteria", "neural_compressor.compression.pruner.utils", "neural_compressor.compression.pruner.wanda", "neural_compressor.compression.pruner.wanda.utils", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.dataloaders.base_dataloader", "neural_compressor.data.dataloaders.dataloader", "neural_compressor.data.dataloaders.default_dataloader", "neural_compressor.data.dataloaders.fetcher", "neural_compressor.data.dataloaders.mxnet_dataloader", "neural_compressor.data.dataloaders.onnxrt_dataloader", "neural_compressor.data.dataloaders.pytorch_dataloader", "neural_compressor.data.dataloaders.sampler", "neural_compressor.data.dataloaders.tensorflow_dataloader", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.profiling.parser.factory", "neural_compressor.profiling.parser.onnx_parser.factory", "neural_compressor.profiling.parser.onnx_parser.parser", "neural_compressor.profiling.parser.parser", "neural_compressor.profiling.parser.result", "neural_compressor.profiling.parser.tensorflow_parser.factory", "neural_compressor.profiling.parser.tensorflow_parser.parser", "neural_compressor.profiling.profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.profiler", "neural_compressor.profiling.profiler.onnxrt_profiler.utils", "neural_compressor.profiling.profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.factory", "neural_compressor.profiling.profiler.tensorflow_profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.utils", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.template.api_doc_example", "neural_compressor.tensorflow.algorithms", "neural_compressor.tensorflow.algorithms.smoother.calibration", "neural_compressor.tensorflow.algorithms.smoother.core", "neural_compressor.tensorflow.algorithms.smoother", "neural_compressor.tensorflow.algorithms.smoother.scaler", "neural_compressor.tensorflow.algorithms.static_quant", "neural_compressor.tensorflow.algorithms.static_quant.keras", "neural_compressor.tensorflow.algorithms.static_quant.tensorflow", "neural_compressor.tensorflow", "neural_compressor.tensorflow.keras", "neural_compressor.tensorflow.keras.layers.conv2d", "neural_compressor.tensorflow.keras.layers.dense", "neural_compressor.tensorflow.keras.layers.depthwise_conv2d", "neural_compressor.tensorflow.keras.layers", "neural_compressor.tensorflow.keras.layers.layer_initializer", "neural_compressor.tensorflow.keras.layers.pool2d", "neural_compressor.tensorflow.keras.layers.separable_conv2d", "neural_compressor.tensorflow.keras.quantization.config", "neural_compressor.tensorflow.keras.quantization", "neural_compressor.tensorflow.quantization.algorithm_entry", "neural_compressor.tensorflow.quantization.autotune", "neural_compressor.tensorflow.quantization.config", "neural_compressor.tensorflow.quantization", "neural_compressor.tensorflow.quantization.quantize", "neural_compressor.tensorflow.quantization.utils.graph_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", "neural_compressor.tensorflow.quantization.utils.graph_rewriter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.tensorflow.quantization.utils.graph_util", "neural_compressor.tensorflow.quantization.utils", "neural_compressor.tensorflow.quantization.utils.quantize_graph", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph_common", "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", "neural_compressor.tensorflow.quantization.utils.transform_graph", "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", "neural_compressor.tensorflow.quantization.utils.utility", "neural_compressor.tensorflow.utils.constants", "neural_compressor.tensorflow.utils.data", "neural_compressor.tensorflow.utils", "neural_compressor.tensorflow.utils.model", "neural_compressor.tensorflow.utils.model_wrappers", "neural_compressor.tensorflow.utils.utility", "neural_compressor.torch.algorithms.base_algorithm", "neural_compressor.torch.algorithms.fp8_quant.observer", "neural_compressor.torch.algorithms.fp8_quant.patched_module_base", "neural_compressor.torch.algorithms.fp8_quant.scaling_method_base", "neural_compressor.torch.algorithms.fp8_quant.utils.logger", "neural_compressor.torch.algorithms", "neural_compressor.torch.algorithms.layer_wise", "neural_compressor.torch.algorithms.layer_wise.load", "neural_compressor.torch.algorithms.layer_wise.modified_pickle", "neural_compressor.torch.algorithms.layer_wise.utils", "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert", "neural_compressor.torch.algorithms.mixed_precision", "neural_compressor.torch.algorithms.mixed_precision.module_wrappers", "neural_compressor.torch.algorithms.mx_quant", "neural_compressor.torch.algorithms.mx_quant.mx", "neural_compressor.torch.algorithms.mx_quant.utils", "neural_compressor.torch.algorithms.pt2e_quant.core", "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter", "neural_compressor.torch.algorithms.pt2e_quant", "neural_compressor.torch.algorithms.pt2e_quant.save_load", "neural_compressor.torch.algorithms.pt2e_quant.utility", "neural_compressor.torch.algorithms.smooth_quant", "neural_compressor.torch.algorithms.smooth_quant.save_load", "neural_compressor.torch.algorithms.smooth_quant.smooth_quant", "neural_compressor.torch.algorithms.smooth_quant.utility", "neural_compressor.torch.algorithms.static_quant", "neural_compressor.torch.algorithms.static_quant.save_load", "neural_compressor.torch.algorithms.static_quant.static_quant", "neural_compressor.torch.algorithms.static_quant.utility", "neural_compressor.torch.algorithms.weight_only.autoround", "neural_compressor.torch.algorithms.weight_only.awq", "neural_compressor.torch.algorithms.weight_only.gptq", "neural_compressor.torch.algorithms.weight_only.hqq.bitpack", "neural_compressor.torch.algorithms.weight_only.hqq.config", "neural_compressor.torch.algorithms.weight_only.hqq.core", "neural_compressor.torch.algorithms.weight_only.hqq", "neural_compressor.torch.algorithms.weight_only.hqq.optimizer", "neural_compressor.torch.algorithms.weight_only.hqq.qtensor", "neural_compressor.torch.algorithms.weight_only.hqq.quantizer", "neural_compressor.torch.algorithms.weight_only", "neural_compressor.torch.algorithms.weight_only.modules", "neural_compressor.torch.algorithms.weight_only.rtn", "neural_compressor.torch.algorithms.weight_only.save_load", "neural_compressor.torch.algorithms.weight_only.teq", "neural_compressor.torch.algorithms.weight_only.utility", "neural_compressor.torch.export", "neural_compressor.torch.export.pt2e_export", "neural_compressor.torch", "neural_compressor.torch.quantization.algorithm_entry", "neural_compressor.torch.quantization.autotune", "neural_compressor.torch.quantization.config", "neural_compressor.torch.quantization", "neural_compressor.torch.quantization.quantize", "neural_compressor.torch.quantization.save_load_entry", "neural_compressor.torch.utils.auto_accelerator", "neural_compressor.torch.utils.bit_packer", "neural_compressor.torch.utils.block_wise", "neural_compressor.torch.utils.constants", "neural_compressor.torch.utils.environ", "neural_compressor.torch.utils", "neural_compressor.torch.utils.utility", "neural_compressor.training", "neural_compressor.transformers.quantization.utils", "neural_compressor.transformers.utils", "neural_compressor.transformers.utils.quantization_config", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Intel\u00ae Neural Compressor Documentation", "2.X API User Guide", "Dynamic Quantization", "FP8 Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Benchmark", "Quantization on Client", "Design", "Version mapping between Intel Neural Compressor to Gaudi Software Stack", "&lt;no title&gt;", "Quantization", "Transformers-like API", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "2.0 API", "3.0 API", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Tensorflow Quantization AutoTune", "Tensorflow Quantization Base API", "Tensorflow Quantization Config", "Pytorch Quantization AutoTune", "Pytorch Quantization Base API", "Pytorch Quantization Config", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Design", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (85)", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "Transform", "Tuning Strategies", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "titleterms": {"": [499, 539], "0": [506, 507, 560], "1": [531, 534, 537, 543, 560], "15": [550, 560], "16": 560, "18": 560, "2": [475, 506, 531, 534, 537, 543, 560], "2018": 550, "2020": 550, "2021": 550, "2022": 550, "2023": 550, "2024": 550, "25": 550, "3": [507, 534, 560], "35": 550, "4": [534, 550], "5": 534, "6": [534, 550], "64": 539, "85": 550, "For": 494, "One": 548, "With": 484, "abil": 502, "accept": 496, "accord": [501, 502], "accuraci": [479, 484, 493, 541, 544, 551, 559], "activ": 5, "ad": 500, "adaptor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 500, 501, 503], "add": 501, "addit": 499, "advanc": 475, "ai": 539, "algorithm": [146, 147, 148, 149, 150, 283, 284, 285, 286, 287, 288, 289, 290, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 494, 526, 554, 557, 559], "algorithm_entri": [302, 441], "alpha": [480, 485, 557], "an": 501, "annot": 527, "api": [475, 478, 479, 483, 486, 494, 500, 501, 506, 507, 508, 509, 519, 522, 525, 528, 530, 531, 537, 542, 544, 546, 547, 548, 549], "api_doc_exampl": 282, "appendix": 533, "approach": [486, 551], "architectur": [490, 529, 538, 539], "argmax": 6, "argument": 482, "ask": 534, "asymmetr": 493, "attent": 7, "attribut": [212, 282, 495], "auto": [264, 485, 553, 557, 559], "auto_acceler": 447, "auto_mixed_precis": 265, "auto_slim": 172, "autoround": [422, 482], "autotun": [303, 442, 479, 483, 487, 518, 521], "awar": [484, 493, 497, 543, 549, 551], "awq": [423, 482], "backend": [481, 486, 500, 551], "background": [500, 527], "base": [176, 181, 475, 519, 522, 539], "base_algorithm": 393, "base_config": 152, "base_dataload": 201, "base_model": 237, "base_tun": 153, "basic": [182, 266, 559], "bayesian": [267, 559], "benchmark": [151, 154, 488, 510, 525, 543], "benefit": 556, "bert_dataset": 210, "between": [491, 537], "bf16": [35, 36, 37, 308, 309, 310, 479, 544], "bf16_convert": [35, 134, 308], "bias_correct": [128, 381], "binari": 539, "binary_op": 8, "bit_pack": 448, "bitpack": 425, "bleu": 228, "bleu_util": 229, "block": 557, "block_mask": 183, "block_wis": 449, "build": [528, 534, 542], "built": [537, 539, 542], "calcul": 501, "calibr": [2, 3, 284, 501, 526], "callback": 163, "capabl": [500, 554], "case": 488, "chang": [502, 537, 555], "channel": [493, 557], "check": 496, "checklist": 496, "citat": 540, "class": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 139, 142, 143, 146, 147, 149, 150, 152, 153, 156, 157, 159, 161, 163, 164, 166, 170, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 224, 225, 226, 228, 231, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 284, 285, 287, 289, 290, 293, 294, 295, 298, 299, 300, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 402, 403, 405, 407, 408, 409, 410, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 433, 434, 435, 436, 437, 443, 447, 450, 454, 457, 458, 466, 467, 468, 469, 471, 472, 500], "client": [482, 489], "coco_dataset": 211, "coco_filt": 218, "coco_label_map": 230, "coco_tool": 231, "code": [495, 496, 527, 543, 554], "collect_layer_histogram": 458, "comment": 527, "common": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 482, 483, 497, 534], "commun": 499, "comparison": 556, "compat": 539, "compress": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 511, 554], "compressor": [474, 491, 497, 499, 528, 538, 539, 542, 543, 556, 561], "comput": 539, "concat": 9, "conduct": [495, 496], "config": [196, 300, 304, 426, 443, 512, 520, 523, 547], "configur": [502, 531, 535, 556], "conserv": [268, 559], "constant": [157, 276, 387, 450, 459], "content": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 224, 225, 226, 228, 229, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 284, 285, 287, 289, 290, 293, 294, 295, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 405, 407, 408, 409, 410, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 457, 458, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 499], "contrib": [197, 198, 199, 200], "contribut": 496, "contributor": [495, 496], "conv": 10, "conv2d": 293, "convent": 527, "convert_add_to_biasadd": [38, 311], "convert_layout": [39, 312], "convert_leakyrelu": [40, 313], "convert_nan_to_random": [41, 314], "convert_placeholder_to_const": [42, 315], "core": [285, 409, 427], "coven": [495, 496], "cpu": [494, 499, 539, 560], "creat": 496, "create_obj_from_config": 460, "criteria": [170, 496, 549, 559], "criterion": 164, "custom": [528, 542, 559], "data": [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 388, 501, 502, 532], "dataload": [201, 202, 203, 204, 205, 206, 207, 208, 209, 528], "dataset": [210, 211, 212, 213, 214, 215, 216, 217, 537], "decai": 549, "default_dataload": 203, "defin": [502, 531], "demo": [477, 488], "dens": 294, "depend": 494, "deploy": 549, "depthwise_conv2d": 295, "dequantize_cast_optim": [36, 309], "design": [490, 501, 529, 559], "detail": 497, "determin": [485, 557], "devic": [486, 494, 551], "differ": 556, "dilated_contract": [43, 316], "direct_q8": 11, "distil": [164, 165, 166, 167, 530, 543, 560], "distribut": [531, 559], "docker": [499, 539], "document": [474, 499, 508, 561], "driven": [479, 544], "dummy_biasadd": [44, 317], "dummy_dataset": 213, "dummy_dataset_v2": 214, "dump": 488, "dure": [544, 553], "dynam": [476, 493, 497, 551], "each": 557, "effici": 482, "embed_layernorm": 12, "enforc": 495, "engin": [539, 557], "enhanc": 557, "entir": 557, "environ": [451, 539], "evalu": 531, "evaluate_squad": 232, "event": [499, 550], "exampl": [476, 477, 478, 479, 481, 482, 484, 485, 493, 494, 497, 500, 508, 525, 528, 530, 531, 532, 533, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 557, 560], "except": [138, 401], "execut": 531, "exhaust": [269, 559], "exit": 559, "expanddims_optim": [45, 318], "export": [438, 439, 461, 462, 463, 464, 533, 554], "f1": 233, "face": 537, "factori": [248, 249, 253, 255, 256, 260], "fake_quant": 98, "fast_bias_correct": 147, "featur": [531, 535, 536, 538, 551], "fetch_weight_from_reshap": [46, 319], "fetcher": 204, "few": 502, "file": 535, "filter": [218, 219, 220], "fix": [480, 485, 557], "flow": [500, 551], "fold_batch_norm": [47, 320], "fold_const": [48, 321], "folder": 527, "fp16": [479, 544], "fp32": [501, 533], "fp8": [477, 499], "fp8_quant": [394, 395, 396, 397], "framework": [480, 499, 501, 528, 533, 535, 539, 545, 546, 552, 554, 557], "free": 549, "freeze_fake_qu": [73, 346], "freeze_valu": [74, 347], "freeze_value_without_calib": 75, "frequent": 534, "from": [499, 501, 539, 543], "full": 550, "function": [1, 3, 21, 29, 30, 31, 52, 53, 55, 89, 90, 101, 103, 133, 134, 135, 140, 141, 144, 145, 146, 151, 152, 153, 154, 160, 161, 164, 166, 167, 170, 171, 172, 174, 176, 177, 181, 184, 189, 190, 191, 192, 193, 195, 202, 203, 210, 212, 219, 225, 226, 228, 229, 231, 232, 233, 235, 236, 240, 244, 246, 258, 262, 263, 267, 275, 279, 281, 282, 293, 294, 295, 298, 299, 300, 302, 303, 304, 306, 325, 326, 328, 386, 388, 391, 392, 394, 395, 396, 400, 402, 408, 410, 412, 413, 415, 416, 417, 419, 421, 422, 424, 429, 431, 435, 437, 439, 441, 442, 443, 445, 446, 447, 448, 449, 451, 453, 454, 460, 462, 463, 464, 467, 468, 470, 471, 531], "fundament": [493, 551, 557], "fuse_biasadd_add": [49, 322], "fuse_column_wise_mul": [50, 323], "fuse_conv_redundant_dequant": [76, 348], "fuse_conv_requant": [77, 349], "fuse_conv_with_math": [51, 324], "fuse_decomposed_bn": [52, 325], "fuse_decomposed_in": [53, 326], "fuse_gelu": [54, 327], "fuse_layer_norm": [55, 328], "fuse_matmul_redundant_dequant": [78, 350], "fuse_matmul_requant": [79, 351], "fuse_pad_with_conv": [56, 329], "fuse_pad_with_fp32_conv": [57, 330], "fuse_qdq_bn": [108, 364], "fuse_qdq_concatv2": [109, 365], "fuse_qdq_conv": [110, 366], "fuse_qdq_deconv": [111, 367], "fuse_qdq_in": [112, 368], "fuse_qdq_matmul": [113, 369], "fuse_qdq_pool": [114, 370], "fuse_reshape_transpos": [58, 331], "fx": 497, "gather": 13, "gaudi": 491, "gavgpool": 14, "gemm": 15, "gener": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 488, 501], "get": [476, 477, 478, 479, 481, 482, 484, 489, 497, 499, 500, 525, 528, 530, 531, 535, 536, 542, 544, 546, 547, 548, 549, 551], "gptq": [424, 482], "gpu": [494, 499, 539], "graph": 501, "graph_bas": [71, 344], "graph_convert": [33, 307], "graph_converter_without_calib": 34, "graph_cse_optim": [59, 332], "graph_rewrit": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360], "graph_transform_bas": [129, 382], "graph_util": [95, 361], "grappler_pass": [60, 333], "guid": 475, "guidelin": 496, "half_precision_convert": 403, "half_precision_rewrit": 410, "hardwar": [479, 539, 544, 560], "hawq_metr": 135, "hawq_v2": [270, 559], "heterogen": 539, "horovodrun": 531, "how": [487, 501, 502], "hpo": [168, 169], "hpu": [499, 539], "hqq": [425, 426, 427, 428, 429, 430, 431, 482], "hyperparamet": 549, "imag": [499, 539], "imagenet_dataset": 215, "imagenet_transform": 222, "implement": [500, 501], "import": 527, "inc": 527, "incompat": [537, 555], "infer": 531, "inform": 540, "infrastructur": 538, "insert_log": [131, 384], "insert_print_nod": [62, 335], "insert_qdq_pattern": [92, 358], "instal": [499, 539], "int4": 502, "int8": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 533, 560], "intel": [474, 491, 494, 499, 528, 538, 539, 542, 543, 561], "intel_extension_for_pytorch": [499, 539], "interfac": 527, "intern": 527, "introduct": [476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 493, 494, 497, 500, 501, 502, 525, 526, 528, 530, 531, 533, 535, 538, 542, 544, 545, 546, 547, 548, 549, 551, 552, 554, 556, 557, 558, 559], "invok": 502, "ipex": [481, 493, 551, 560], "issu": [534, 555], "iter": 501, "json": 527, "kera": [289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 560], "keras_model": 239, "kernel": 502, "kit": 539, "kl_diverg": 466, "knowledg": 560, "known": 555, "languag": [499, 541, 549], "larg": [499, 541, 549], "latenc": 488, "layer": [293, 294, 295, 296, 297, 298, 299, 482, 552, 557], "layer_initi": 297, "layer_wis": [399, 400, 401, 402], "layer_wise_qu": [137, 138, 139, 140, 141], "legal": 540, "licens": 540, "like": [483, 494, 502], "limit": [493, 557], "line": 502, "list": [501, 532, 558], "llm": [499, 541], "load": [400, 482, 483, 499], "load_huggingfac": 467, "logger": [159, 397, 468, 527], "lstm": 17, "lwq": 552, "map": 491, "matmul": [18, 493, 557], "matrix": [479, 480, 482, 483, 486, 488, 497, 500, 525, 526, 528, 530, 531, 533, 535, 536, 538, 542, 544, 545, 546, 547, 548, 549, 551, 552, 554, 557], "maxpool": 19, "merge_duplicated_qdq": [93, 359], "meta_op_optim": [81, 353], "metric": [228, 229, 230, 231, 232, 233, 234, 235, 537, 542], "mha": [178, 185], "microsc": [478, 546], "migrat": 543, "mix": [479, 486, 513, 543, 544, 553], "mix_precis": 236, "mixed_precis": [403, 404, 405], "mme": 539, "mode": [497, 560], "model": [237, 238, 239, 240, 241, 242, 243, 244, 245, 390, 480, 481, 487, 499, 501, 514, 533, 539, 541, 543, 545, 546, 549, 552, 554, 557, 560], "model_slim": [172, 173, 174, 175], "model_wrapp": [142, 391], "modified_pickl": [138, 401], "modul": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 163, 164, 166, 167, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 224, 225, 226, 228, 229, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 284, 285, 287, 289, 290, 293, 294, 295, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 405, 407, 408, 409, 410, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 457, 458, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472], "module_wrapp": 405, "move_squeeze_after_relu": [63, 336], "mse": [272, 559], "mse_v2": [273, 559], "multipl": [539, 547, 560], "mx": 407, "mx_quant": [406, 407, 408], "mxnet": [542, 551, 558], "mxnet_dataload": 205, "mxnet_model": 241, "mxnet_util": [0, 1], "need": 501, "nets_factori": 242, "network": 549, "neural": [474, 491, 497, 499, 528, 538, 539, 542, 543, 549, 556, 561], "neural_compressornew": [499, 500, 502, 559], "ninm": 179, "norm": 20, "note": [497, 555], "nxm": 180, "object": [246, 515, 547], "observ": 394, "off": 553, "onli": [482, 493, 499, 554], "onnx": [86, 87, 88, 89, 90, 504, 539, 551, 552, 560], "onnx_graph": 87, "onnx_model": 243, "onnx_nod": 88, "onnx_pars": [249, 250], "onnx_schema": 89, "onnxrt": [542, 558], "onnxrt_dataload": 206, "onnxrt_profil": [256, 257, 258], "onnxrtadaptor": 500, "op": [21, 533], "oper": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 501, 502], "optim": [166, 429, 548, 549], "optimize_lay": 103, "optimize_qdq": [116, 372], "option": [469, 531], "orchestr": [543, 548], "other": [499, 539], "our": [495, 557], "overview": [475, 487, 496], "ox_util": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "packag": [171, 177, 184, 494], "pad": 22, "paramet": 477, "parser": [248, 249, 250, 251, 252, 253, 254], "patched_module_bas": 395, "pattern": [176, 177, 178, 179, 180, 549], "pattern_analyz": 174, "pattern_detector": 143, "pattern_lock": 186, "per": [493, 557], "perform": 556, "platform": [499, 539, 556], "pledg": 495, "polici": [498, 559], "pool": 23, "pool2d": 298, "post": [486, 497, 543, 551], "post_hostconst_convert": [82, 354], "post_quantized_op_cs": [83, 355], "postprocess": 224, "pre_optim": [64, 337], "precis": [479, 486, 513, 543, 544, 553], "prepar": [494, 501, 556], "prerequisit": 539, "problem": [483, 497], "process": 559, "processor": 539, "profil": [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "progress": 187, "prune": [189, 543, 549, 560], "pruner": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "pt2e": 481, "pt2e_export": 439, "pt2e_quant": [409, 410, 411, 412, 413], "ptq": 560, "public": [499, 527, 550], "pull": 496, "pure": 531, "pypi": 499, "python": [475, 528, 542], "pytorch": [470, 479, 480, 481, 482, 487, 493, 521, 522, 523, 531, 533, 542, 551, 552, 553, 558, 560], "pytorch_dataload": 207, "qat": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 560], "qdq": [91, 92, 93, 94, 108, 109, 110, 111, 112, 113, 114, 115, 116, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 560], "qlinear2qdq": 462, "qtensor": 430, "quant": [485, 557], "quantiz": [28, 139, 263, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 431, 441, 442, 443, 444, 445, 446, 455, 476, 477, 478, 480, 481, 482, 483, 484, 486, 489, 493, 497, 499, 501, 502, 516, 518, 519, 520, 521, 522, 523, 526, 530, 533, 539, 541, 543, 544, 546, 551, 552, 553, 554, 557, 560], "quantization_config": 457, "quantize_config": 100, "quantize_graph": [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379], "quantize_graph_bas": [117, 373], "quantize_graph_bn": [118, 374], "quantize_graph_common": [124, 380], "quantize_graph_concatv2": [119, 375], "quantize_graph_conv": [120, 376], "quantize_graph_for_intel_cpu": [121, 377], "quantize_graph_matmul": [122, 378], "quantize_graph_pool": [123, 379], "quantize_help": 101, "quantize_lay": [102, 103, 104, 105, 106], "quantize_layer_add": 104, "quantize_layer_bas": 105, "quantize_layer_bn": 106, "quantize_wrapp": 107, "queri": 500, "query_fw_cap": 501, "question": 534, "quick": 536, "random": [274, 559], "rang": 501, "recip": [541, 551], "recommend": 527, "reduc": 24, "refer": [478, 482, 493, 526, 527, 546, 549, 551, 554, 557], "reg": 190, "regular": 549, "releas": [532, 555], "remove_training_nod": [65, 338], "rename_batch_norm": [66, 339], "report": 498, "request": [479, 496, 544], "requir": 539, "rerange_quantized_concat": [132, 385], "resiz": 25, "respons": 495, "result": 252, "retrain": 549, "retrain_fre": 188, "rnn_convert": 84, "rtn": [434, 482], "rule": [480, 481, 482, 484, 527, 551], "run": 501, "runtim": [504, 539, 551, 552, 560], "sa_optim": 169, "sampl": [481, 501, 536], "sampler": 208, "save": 482, "save_load": [160, 412, 415, 419, 435], "save_load_entri": 446, "scale_propag": [85, 356], "scaler": 287, "scaling_method_bas": 396, "schedul": [191, 549], "scheme": [486, 493, 551], "scope": [495, 549], "section": [474, 561], "secur": [498, 531], "select": 499, "separable_conv2d": 299, "set": 527, "share_qdq_y_pattern": [94, 360], "shot": 548, "side": 482, "sigopt": [199, 556, 559], "singl": 547, "smooth": [480, 485, 486, 493, 557], "smooth_quant": [29, 149, 414, 415, 416, 417], "smooth_quant_calibr": 125, "smooth_quant_scal": 126, "smoother": [284, 285, 286, 287], "smoothquant": 557, "softwar": [479, 491, 539, 544], "sourc": 539, "space": 559, "spars": 549, "sparsiti": 549, "specif": 502, "specifi": [480, 481, 482, 484, 551], "split": 26, "split_shared_input": [67, 340], "stack": 491, "standard": 495, "start": [476, 477, 478, 479, 481, 482, 484, 489, 497, 499, 500, 525, 528, 530, 531, 535, 536, 542, 544, 546, 547, 548, 549, 551], "static": [481, 486, 493, 497, 551], "static_qu": [288, 289, 290, 418, 419, 420, 421], "statu": 496, "step": 496, "strategi": [198, 199, 200, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 517, 556, 559], "string": 527, "strip_equivalent_nod": [68, 341], "strip_unused_nod": [69, 342], "structur": 527, "style_transfer_dataset": 217, "submodul": [0, 4, 16, 37, 61, 72, 80, 86, 91, 96, 97, 99, 102, 115, 130, 136, 137, 148, 155, 158, 165, 168, 171, 173, 177, 184, 194, 198, 216, 220, 223, 227, 234, 238, 271, 277, 286, 288, 296, 301, 305, 310, 334, 345, 352, 357, 362, 363, 371, 383, 389, 398, 399, 404, 406, 411, 414, 418, 428, 432, 438, 444, 452, 456, 461, 465], "subpackag": [4, 72, 96, 97, 99, 136, 155, 171, 197, 221, 227, 271, 283, 291, 292, 305, 345, 362, 363, 398, 432, 440, 465], "summari": [488, 502], "support": [477, 479, 480, 482, 483, 486, 488, 494, 496, 497, 500, 502, 525, 526, 528, 530, 531, 533, 535, 538, 539, 542, 544, 545, 546, 547, 548, 549, 551, 552, 554, 557, 558], "switch_optim": [70, 343], "symbolic_trac": 144, "symmetr": 493, "system": 539, "templat": [282, 496], "tensor": [493, 557], "tensorflow": [32, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 484, 486, 487, 493, 499, 518, 519, 520, 531, 533, 539, 542, 551, 553, 558, 560], "tensorflow_dataload": 209, "tensorflow_model": 244, "tensorflow_pars": [253, 254], "tensorflow_profil": [260, 261, 262], "teq": [436, 482], "tf2onnx": 463, "tf2onnx_convert": 127, "tf2onnx_util": 90, "tf_criteria": 192, "tf_util": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "through": [485, 539, 557, 560], "throughput": 488, "todo": 527, "token": 225, "topic": 475, "torch": [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 483, 499, 505, 539, 560], "torch2onnx": 464, "torch_load": 140, "torch_model": 245, "torch_util": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "tpc": 539, "tpe": [200, 559], "trademark": 540, "train": [454, 486, 493, 497, 524, 531, 543, 549, 551], "transform": [222, 223, 224, 225, 226, 455, 456, 457, 494, 537, 558], "transform_graph": [128, 129, 130, 131, 132, 381, 382, 383, 384, 385], "tune": [484, 485, 493, 502, 551, 554, 557, 559], "tune_cfg": 501, "tuning_param": 156, "tuning_sampl": 278, "tuning_spac": 279, "tuning_struct": 280, "turn": 553, "two": 539, "type": [502, 527, 549], "unary_op": 27, "us": [485, 488, 499, 502, 528, 539, 542, 557], "usag": [477, 480, 481, 482, 485, 488, 494, 557, 559], "user": [475, 531, 537, 554], "util": [1, 30, 133, 141, 145, 157, 158, 159, 160, 161, 167, 193, 195, 258, 262, 276, 277, 278, 279, 280, 281, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 397, 402, 408, 413, 417, 421, 437, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 505], "v": 527, "v1": 537, "valid": [480, 539, 557, 560], "vendor": 539, "version": [162, 473, 491], "vulner": 498, "wanda": [194, 195], "weight": [482, 493, 499, 554], "weight_correct": 150, "weight_onli": [31, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "weight_slim": 175, "weights_detail": 472, "what": 499, "wise": [482, 552], "without": 484, "woq": 554, "work": [487, 500, 551], "workflow": [490, 529], "x": [475, 543], "xe": 539, "yaml": [501, 531, 535]}})